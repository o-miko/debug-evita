import { DocumentNode } from 'graphql';
import * as VueApolloComposable from '@vue/apollo-composable';
import * as VueCompositionApi from '@vue/composition-api';
export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
export type MakeEmpty<T extends { [key: string]: unknown }, K extends keyof T> = { [_ in K]?: never };
export type Incremental<T> = T | { [P in keyof T]?: P extends ' $fragmentName' | '__typename' ? T[P] : never };
export type ReactiveFunction<TParam> = () => TParam;
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: { input: string; output: string; }
  String: { input: string; output: string; }
  Boolean: { input: boolean; output: boolean; }
  Int: { input: number; output: number; }
  Float: { input: number; output: number; }
  Any: { input: any; output: any; }
  BigDecimal: { input: any; output: any; }
  ComplexDataObject: { input: any; output: any; }
  Currency: { input: any; output: any; }
  DateTimeRange: { input: any; output: any; }
  Locale: { input: any; output: any; }
  Object: { input: any; output: any; }
  OffsetDateTime: { input: any; output: any; }
  Predecessor: { input: any; output: any; }
  UUID: { input: any; output: any; }
};

/**
 * Adjusted price policy represents a custom strategy of altering prices in the cart / order. There are different
 * adjusted price policies and not all affect all users. Each user should have only a selection of price policies
 * assigned.
 */
export type AdjustedPricePolicy = Entity & {
  __typename?: 'AdjustedPricePolicy';
  /**
   * Contains set of all locales that were used for localized attributes or associated data of
   * this particular entity.
   *
   */
  allLocales: Array<CatalogLocale>;
  /**
   * Associated data carry additional data entries that are never used for filtering / sorting but may be needed to be fetched
   * along with entity in order to present data to the target consumer (i.e. user / API / bot). Associated data may be stored
   * in slower storage and may contain wide range of data types - from small ones (i.e. numbers, strings, dates) up to large
   * binary arrays representing entire files (i.e. pictures, documents).
   *
   */
  associatedData?: Maybe<AdjustedPricePolicyAssociatedData>;
  /**
   * Attributes allows defining set of data that are fetched in bulk along with the reference.
   * Attributes may be used for fast filtering or can be used to sort along.
   *
   */
  attributes?: Maybe<AdjustedPricePolicyAttributes>;
  /**
   * Contains set of requested locales for this particular entity.
   *
   */
  locales: Array<CatalogLocale>;
  /**
   * Unique Integer positive number representing the entity. Can be used for fast lookup for
   * entity (entities). Primary key must be unique within the same entity type.
   *
   */
  primaryKey: Scalars['Int']['output'];
  /**
   * Type of entity.
   * Entity type is main sharding key - all data of entities with same type are stored in separated collections. Within the
   * entity type entity is uniquely represented by primary key.
   *
   */
  type: Scalars['String']['output'];
  /**
   * Contains version of this definition object and gets increased with any entity type update. Allows to execute
   * optimistic locking i.e. avoiding parallel modifications.
   *
   */
  version: Scalars['Int']['output'];
};


/**
 * Adjusted price policy represents a custom strategy of altering prices in the cart / order. There are different
 * adjusted price policies and not all affect all users. Each user should have only a selection of price policies
 * assigned.
 */
export type AdjustedPricePolicyAssociatedDataArgs = {
  locale?: InputMaybe<CatalogLocale>;
};


/**
 * Adjusted price policy represents a custom strategy of altering prices in the cart / order. There are different
 * adjusted price policies and not all affect all users. Each user should have only a selection of price policies
 * assigned.
 */
export type AdjustedPricePolicyAttributesArgs = {
  locale?: InputMaybe<CatalogLocale>;
};

/**
 * Associated data carry additional data entries that are never used for filtering / sorting but may be needed to be fetched
 * along with entity in order to present data to the target consumer (i.e. user / API / bot). Associated data may be stored
 * in slower storage and may contain wide range of data types - from small ones (i.e. numbers, strings, dates) up to large
 * binary arrays representing entire files (i.e. pictures, documents).
 *
 */
export type AdjustedPricePolicyAssociatedData = {
  __typename?: 'AdjustedPricePolicyAssociatedData';
  /**
   * Contains a structure that keeps all currently active URLs for different locales. This information is used
   * for rendering language switching menu. We need to use correct active URL so that user stays looking
   * the exact same entity after the locale switch occurred - just in different language.
   */
  allActiveUrls?: Maybe<Scalars['ComplexDataObject']['output']>;
  /**
   * Contains JSON configuration of the particular adjusted price policy calculation. The structure is relevant to
   * the attribute `type` in the JSON and relates to the structure / documentation of the classes implementing
   * `com.fg.cps.eshop.price.service.calculation.CalculationParameters` interface.
   */
  calculationConfig: Scalars['String']['output'];
  /** A structure that allows to specify a set of localized labels for entity. */
  localization?: Maybe<Scalars['ComplexDataObject']['output']>;
  /**
   * Contains JSON configuration of the particular usage condition. The structure is relevant to the attribute
   * `type` in the JSON and relates to the structure / documentation of the classes implementing
   * `com.fg.cps.eshop.price.service.usageCondition.UsageCondition` interface.
   */
  usageConditionDetails?: Maybe<Scalars['String']['output']>;
};

/**
 * Attributes allows defining set of data that are fetched in bulk along with the entity body.
 * Attributes may be used for fast filtering or can be used to sort along.
 *
 */
export type AdjustedPricePolicyAttributes = {
  __typename?: 'AdjustedPricePolicyAttributes';
  /**
   * Defines the type of pricing policy. Based on this type, the strategy is subsequently looked up by examining
   * (AdjustedPricePolicyStrategy#getType()). The strategy may then be applied.
   */
  calculationType: Scalars['String']['output'];
  /**
   * Date and time of the last change of this entity. This timestamp is updated only when real change
   * in entity occurs in primary data store.  This timestamp should be used on boundaries with external
   * systems (such as inventory feeds and so on).
   */
  changed: Scalars['OffsetDateTime']['output'];
  /**
   * Unique code that identifies the entity among other entities of the same kind.
   * The code is equivalent to primary key but is targeted on external consumers (systems).
   */
  code: Scalars['String']['output'];
  /** Full description of the entity in HTML format. */
  description?: Maybe<Scalars['String']['output']>;
  /** Shortened version of description of the entity in plain text. */
  descriptionShort?: Maybe<Scalars['String']['output']>;
  /**
   * Pricing policy group identifier. The group is used to determine the processing priority of all policies. Priority
   * it is defined configurationally for the group (see configuration of individual features that register their policies).
   *
   * If the group contains several policies, the order within the given group is determined by the value of `priority` (or `previousEntity`).
   *
   * If the policy is bound to a specific entity ({@link #getPartOfCatalogEntityId()}), the sorting takes place within the same group and the same entity.
   *
   * For example, for credits, vouchers, bonus products, the group always contains only one policy. An example of a group,
   * which contains more policies are price policies for transport (e.g. free shipping for a certain order amount).
   * These policies belong to the same group and are always assigned to a specific transport. The priority of these transport policies
   * is determined in AR and can be changed by the administrator.
   *
   * So on FE, policies are processed according to the priority of the groups (which is determined by the configuration) and within the given group they are processed according to the `priority'.
   *
   */
  group: Scalars['String']['output'];
  /** Localized name of the entity. */
  name: Scalars['String']['output'];
  /**
   * Order of the entity among other entities sharing the same parent in the listing. Used for sorting entities
   * in ascending order.
   */
  order: Scalars['Predecessor']['output'];
  /**
   * Id of the catalog entity to which this pricing policy is bound. If `null`, then it is not bound to any entity.
   * E.g. free shipping is a pricing policy related to specific shipping.
   */
  partOfCatalogEntity?: Maybe<Scalars['Int']['output']>;
  /**
   * Date and time when this entity was last published in the evitaDB index. This timestamp will usually
   * be different from the `changed` attribute because the publishing process asynchronously picks up
   * changed entities and publishes them to the evitaDB index with some delay. Also, when evitaDB is
   * completely re-indexed, all timestamps in this attribute will be reset to a new timestamp, while the
   * `changed` attribute will remain the same.
   *
   */
  published: Scalars['OffsetDateTime']['output'];
  /**
   * Returns the status of the entity:
   *
   * - ACTIVE: entity is available on frontend
   * - PRIVATE: entity is  not available on frontend, but it's visible in administration
   */
  status: Scalars['String']['output'];
  /** Localized and globally unique URL of the entity. */
  url?: Maybe<Scalars['String']['output']>;
  /**
   * Old URLs that has been originally assigned to the entity, but are no longer active. Each value that was
   * once `url` but was changed to something else is moved to this list. Thi allows accessing the entity even
   * on the previous location (with redirect) so that remembered URLs in external systems don't end up with
   * "entity not found" response.
   */
  urlInactive?: Maybe<Array<Scalars['String']['output']>>;
  /**
   * Allows to quickly find adept price lists in current user related context. We need to consider that there
   * might be thousands of prices lists that require certain condition to be met in order they could be used
   * for particular user. Therefore, we couldn't iterate over all of them and evaluate their conditions set
   * in associated data `usageConditionDetails` precisely, and we need to reduce the amount of evaluated price
   * list to bare minimum. That's why this attribute exists - it allows pre-filtering price lists that may
   * participate in current user's context computation. Each usage condition contains possible combination of
   * user context properties the usage condition may match ordered alphabetically.
   *
   */
  usageCondition?: Maybe<Array<Scalars['String']['output']>>;
  /**
   * Date time range of general accessibility to the entity. Outside this range the entity behaves like if
   * the status was set to PRIVATE.
   */
  validity?: Maybe<Scalars['DateTimeRange']['output']>;
};

/**
 * Map of requested extra results besides actual found records.
 *
 */
export type AdjustedPricePolicyExtraResults = {
  __typename?: 'AdjustedPricePolicyExtraResults';
  attributeHistograms?: Maybe<Array<AttributeNamedHistogram>>;
  /**
   * Returns object containing detailed information about query processing time and its decomposition to single operations.
   *
   */
  queryTelemetry: Scalars['Object']['output'];
};


/**
 * Map of requested extra results besides actual found records.
 *
 */
export type AdjustedPricePolicyExtraResultsAttributeHistogramsArgs = {
  attributes: Array<Scalars['String']['input']>;
};


/**
 * Map of requested extra results besides actual found records.
 *
 */
export type AdjustedPricePolicyExtraResultsQueryTelemetryArgs = {
  formatted?: InputMaybe<Scalars['Boolean']['input']>;
};

/**
 * Contains all possible local mutations to perform on entity `AdjustedPricePolicy`.
 *
 */
export type AdjustedPricePolicyLocalMutationAggregate = {
  /**
   * Increments or decrements existing numeric value by specified delta (negative number produces decremental of
   * existing number, positive one incrementation).
   *
   * Allows to specify the number range that is tolerated for the value after delta application has been finished to
   * verify for example that number of items on stock doesn't go below zero.
   *
   */
  applyDeltaAttributeMutation?: InputMaybe<ApplyDeltaAttributeMutation>;
  /**
   * Remove associated data mutation will drop existing associatedData - ie.generates new version of the associated data with tombstone
   * on it.
   *
   */
  removeAssociatedDataMutation?: InputMaybe<RemoveAssociatedDataMutation>;
  /**
   * Remove attribute mutation will drop existing attribute - ie.generates new version of the attribute with tombstone
   * on it.
   *
   */
  removeAttributeMutation?: InputMaybe<RemoveAttributeMutation>;
  /**
   * Upsert associatedData mutation will either update existing associatedData or create new one.
   *
   */
  upsertAssociatedDataMutation?: InputMaybe<UpsertAssociatedDataMutation>;
  /**
   * Upsert attribute mutation will either update existing attribute or create new one.
   *
   */
  upsertAttributeMutation?: InputMaybe<UpsertAttributeMutation>;
};

/**
 * Page of records according to pagination rules in input query.
 *
 */
export type AdjustedPricePolicyRecordPage = {
  __typename?: 'AdjustedPricePolicyRecordPage';
  /**
   * Actual found sorted page/strip of records.
   *
   */
  data: Array<AdjustedPricePolicy>;
  /**
   * Returns true if there are no data available.
   *
   */
  empty: Scalars['Boolean']['output'];
  /**
   * Returns true if current page/strip is the first page/strip in the result set.
   *
   */
  first: Scalars['Boolean']['output'];
  /**
   * Returns offset of the first record of current page with current pageSize.
   *
   */
  firstPageItemNumber: Scalars['Int']['output'];
  /**
   * Returns true if there is next page/strip available.
   *
   */
  hasNext: Scalars['Boolean']['output'];
  /**
   * Returns true if there is previous page/strip available.
   *
   */
  hasPrevious: Scalars['Boolean']['output'];
  /**
   * Returns true if current page/strip is the last page/strip in the result set.
   *
   */
  last: Scalars['Boolean']['output'];
  /**
   * Returns offset of the last record of current page with current pageSize.
   *
   */
  lastPageItemNumber: Scalars['Int']['output'];
  /**
   * Returns number of the last page that can be accessed with current number of records.
   * Returns -1 when offset/limit was used for creating paginated list.
   *
   */
  lastPageNumber: Scalars['Int']['output'];
  /**
   * Returns current page number (indexed from 1).
   *
   */
  pageNumber: Scalars['Int']['output'];
  /**
   * Returns number of records per single page.
   *
   */
  pageSize: Scalars['Int']['output'];
  /**
   * Returns true if there is only single page/strip available (i.e. total record count < record count on one page).
   *
   */
  singlePage: Scalars['Boolean']['output'];
  /**
   * Returns total number of records that are possible to fetch by paginating entire result stream.
   *
   */
  totalRecordCount: Scalars['Int']['output'];
};

/**
 * Strip of records according to offset and limit rules in input query.
 *
 */
export type AdjustedPricePolicyRecordStrip = {
  __typename?: 'AdjustedPricePolicyRecordStrip';
  /**
   * Actual found sorted page/strip of records.
   *
   */
  data: Array<AdjustedPricePolicy>;
  /**
   * Returns true if there are no data available.
   *
   */
  empty: Scalars['Boolean']['output'];
  /**
   * Returns true if current page/strip is the first page/strip in the result set.
   *
   */
  first: Scalars['Boolean']['output'];
  /**
   * Returns true if there is next page/strip available.
   *
   */
  hasNext: Scalars['Boolean']['output'];
  /**
   * Returns true if there is previous page/strip available.
   *
   */
  hasPrevious: Scalars['Boolean']['output'];
  /**
   * Returns true if current page/strip is the last page/strip in the result set.
   *
   */
  last: Scalars['Boolean']['output'];
  /**
   * Returns limit - i.e. maximal number of records that are requested after offset.
   *
   */
  limit: Scalars['Int']['output'];
  /**
   * Returns current offset (indexed from 0).
   *
   */
  offset: Scalars['Int']['output'];
  /**
   * Returns true if there is only single page/strip available (i.e. total record count < record count on one page).
   *
   */
  singlePage: Scalars['Boolean']['output'];
  /**
   * Returns total number of records that are possible to fetch by paginating entire result stream.
   *
   */
  totalRecordCount: Scalars['Int']['output'];
};

/**
 * Evita response contains all results to single query. Results are divided to two parts - main results returned by
 * `recordPage`/`recordStrip` and set of extra results retrieved by `extraResults`.
 *
 */
export type AdjustedPricePolicyResponse = {
  __typename?: 'AdjustedPricePolicyResponse';
  /**
   * Returns map of requested extra results besides actual found records.
   *
   */
  extraResults: AdjustedPricePolicyExtraResults;
  /**
   * Returns page of records according to pagination rules in input query.
   * Either `page` or `strip` can be used, not both.
   *
   */
  recordPage?: Maybe<AdjustedPricePolicyRecordPage>;
  /**
   * Returns strip of records according to pagination rules in input query.
   * Either `page` or `strip` can be used, not both.
   *
   */
  recordStrip?: Maybe<AdjustedPricePolicyRecordStrip>;
};


/**
 * Evita response contains all results to single query. Results are divided to two parts - main results returned by
 * `recordPage`/`recordStrip` and set of extra results retrieved by `extraResults`.
 *
 */
export type AdjustedPricePolicyResponseRecordPageArgs = {
  number?: InputMaybe<Scalars['Int']['input']>;
  size?: InputMaybe<Scalars['Int']['input']>;
};


/**
 * Evita response contains all results to single query. Results are divided to two parts - main results returned by
 * `recordPage`/`recordStrip` and set of extra results retrieved by `extraResults`.
 *
 */
export type AdjustedPricePolicyResponseRecordStripArgs = {
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
};

/**
 * Increments or decrements existing numeric value by specified delta (negative number produces decremental of
 * existing number, positive one incrementation).
 *
 * Allows to specify the number range that is tolerated for the value after delta application has been finished to
 * verify for example that number of items on stock doesn't go below zero.
 *
 */
export type ApplyDeltaAttributeMutation = {
  /**
   * Delta to change existing value by of this attribute (negative number produces decremental of
   * existing number, positive one incrementation).
   *
   */
  delta: Scalars['Any']['input'];
  /**
   * Contains locale in case the attribute is locale specific.
   *
   */
  locale?: InputMaybe<Scalars['Locale']['input']>;
  /**
   * Unique name of the attribute. Case-sensitive. Distinguishes one associated data item from another within
   * single entity instance.
   *
   */
  name: Scalars['String']['input'];
  /**
   * Number range that is tolerated for the value after delta application has been finished to
   * verify for example that number of items on stock doesn't go below zero.
   *
   */
  requiredRangeAfterApplication?: InputMaybe<Scalars['Any']['input']>;
};

/**
 * Enum containing all supported data types by associated data.
 *
 */
export enum AssociatedDataScalar {
  BigDecimal = 'BigDecimal',
  BigDecimalArray = 'BigDecimalArray',
  BigDecimalNumberRange = 'BigDecimalNumberRange',
  BigDecimalNumberRangeArray = 'BigDecimalNumberRangeArray',
  Boolean = 'Boolean',
  BooleanArray = 'BooleanArray',
  Byte = 'Byte',
  ByteArray = 'ByteArray',
  ByteNumberRange = 'ByteNumberRange',
  ByteNumberRangeArray = 'ByteNumberRangeArray',
  Character = 'Character',
  CharacterArray = 'CharacterArray',
  ComplexDataObject = 'ComplexDataObject',
  Currency = 'Currency',
  CurrencyArray = 'CurrencyArray',
  DateTimeRange = 'DateTimeRange',
  DateTimeRangeArray = 'DateTimeRangeArray',
  Integer = 'Integer',
  IntegerArray = 'IntegerArray',
  IntegerNumberRange = 'IntegerNumberRange',
  IntegerNumberRangeArray = 'IntegerNumberRangeArray',
  LocalDate = 'LocalDate',
  LocalDateArray = 'LocalDateArray',
  LocalDateTime = 'LocalDateTime',
  LocalDateTimeArray = 'LocalDateTimeArray',
  LocalTime = 'LocalTime',
  LocalTimeArray = 'LocalTimeArray',
  Locale = 'Locale',
  LocaleArray = 'LocaleArray',
  Long = 'Long',
  LongArray = 'LongArray',
  LongNumberRange = 'LongNumberRange',
  LongNumberRangeArray = 'LongNumberRangeArray',
  OffsetDateTime = 'OffsetDateTime',
  OffsetDateTimeArray = 'OffsetDateTimeArray',
  Predecessor = 'Predecessor',
  Short = 'Short',
  ShortArray = 'ShortArray',
  ShortNumberRange = 'ShortNumberRange',
  ShortNumberRangeArray = 'ShortNumberRangeArray',
  String = 'String',
  StringArray = 'StringArray',
  Uuid = 'UUID',
  UuidArray = 'UUIDArray'
}

/**
 * A histogram is an approximate representation of the distribution of numerical data. For detailed description please
 * see [Wikipedia](https://en.wikipedia.org/wiki/Histogram).
 * Histogram can be computed only for numeric based properties. It visualises which property values are more common
 * in the returned data set and which are rare. Bucket count will never exceed requested bucket count but there
 * may be less of them if there is no enough data for computation. Bucket thresholds are specified heuristically so tha
 * there are as few "empty buckets" as possible.
 *
 * - buckets are defined by their lower bounds (inclusive)
 * - the upper bound is the lower bound of the next bucket
 *
 */
export type AttributeNamedHistogram = {
  __typename?: 'AttributeNamedHistogram';
  attributeName: Scalars['String']['output'];
  /**
   * Returns histogram buckets that represents a tuple of occurrence count and the minimal threshold of the bucket
   * values.
   *
   */
  buckets: Array<HistogramBucket>;
  /**
   * Returns right bound of the last bucket of the histogram. Each bucket contains only left bound threshold, so this
   * value is necessary so that first histogram buckets makes any sense. This value is exceptional in the sense that
   * it represents the biggest value encountered in the returned set and represents inclusive right bound for the
   * last bucket.
   *
   */
  max: Scalars['BigDecimal']['output'];
  /**
   * Returns left bound of the first bucket. It represents the smallest value encountered in the returned set.
   *
   */
  min: Scalars['BigDecimal']['output'];
  /**
   * Returns count of all entities that are covered by this histogram. It's plain sum of occurrences of all buckets
   * in the histogram.
   *
   */
  overallCount: Scalars['Int']['output'];
};


/**
 * A histogram is an approximate representation of the distribution of numerical data. For detailed description please
 * see [Wikipedia](https://en.wikipedia.org/wiki/Histogram).
 * Histogram can be computed only for numeric based properties. It visualises which property values are more common
 * in the returned data set and which are rare. Bucket count will never exceed requested bucket count but there
 * may be less of them if there is no enough data for computation. Bucket thresholds are specified heuristically so tha
 * there are as few "empty buckets" as possible.
 *
 * - buckets are defined by their lower bounds (inclusive)
 * - the upper bound is the lower bound of the next bucket
 *
 */
export type AttributeNamedHistogramBucketsArgs = {
  behavior?: InputMaybe<HistogramBehavior>;
  requestedCount: Scalars['Int']['input'];
};

export enum AttributeSpecialValue {
  NotNull = 'NOT_NULL',
  Null = 'NULL'
}

/**
 * Brand represents a manufacturer or marketing brand of the product. The product may have only one such
 * brand.
 */
export type Brand = Entity & {
  __typename?: 'Brand';
  /**
   * Contains set of all locales that were used for localized attributes or associated data of
   * this particular entity.
   *
   */
  allLocales: Array<CatalogLocale>;
  /**
   * Associated data carry additional data entries that are never used for filtering / sorting but may be needed to be fetched
   * along with entity in order to present data to the target consumer (i.e. user / API / bot). Associated data may be stored
   * in slower storage and may contain wide range of data types - from small ones (i.e. numbers, strings, dates) up to large
   * binary arrays representing entire files (i.e. pictures, documents).
   *
   */
  associatedData?: Maybe<BrandAssociatedData>;
  /**
   * Attributes allows defining set of data that are fetched in bulk along with the reference.
   * Attributes may be used for fast filtering or can be used to sort along.
   *
   */
  attributes?: Maybe<BrandAttributes>;
  /**
   * Contains set of requested locales for this particular entity.
   *
   */
  locales: Array<CatalogLocale>;
  /**
   * Unique Integer positive number representing the entity. Can be used for fast lookup for
   * entity (entities). Primary key must be unique within the same entity type.
   *
   */
  primaryKey: Scalars['Int']['output'];
  /**
   * Tags allow non-systematic categorization (cross-structure tagging) of the entities. Tags are often more
   * digestible from the user's point of view. Tags are maintained in Edee.ONE CMS and here we just link them.
   */
  tags: Array<BrandTagsReference>;
  /**
   * Type of entity.
   * Entity type is main sharding key - all data of entities with same type are stored in separated collections. Within the
   * entity type entity is uniquely represented by primary key.
   *
   */
  type: Scalars['String']['output'];
  /**
   * Contains version of this definition object and gets increased with any entity type update. Allows to execute
   * optimistic locking i.e. avoiding parallel modifications.
   *
   */
  version: Scalars['Int']['output'];
};


/**
 * Brand represents a manufacturer or marketing brand of the product. The product may have only one such
 * brand.
 */
export type BrandAssociatedDataArgs = {
  locale?: InputMaybe<CatalogLocale>;
};


/**
 * Brand represents a manufacturer or marketing brand of the product. The product may have only one such
 * brand.
 */
export type BrandAttributesArgs = {
  locale?: InputMaybe<CatalogLocale>;
};


/**
 * Brand represents a manufacturer or marketing brand of the product. The product may have only one such
 * brand.
 */
export type BrandTagsArgs = {
  filterBy?: InputMaybe<FilterContainer1f0678ef1ed202e4>;
  orderBy?: InputMaybe<Array<OrderContainer8173dcb058a60a9a>>;
};

/**
 * Associated data carry additional data entries that are never used for filtering / sorting but may be needed to be fetched
 * along with entity in order to present data to the target consumer (i.e. user / API / bot). Associated data may be stored
 * in slower storage and may contain wide range of data types - from small ones (i.e. numbers, strings, dates) up to large
 * binary arrays representing entire files (i.e. pictures, documents).
 *
 */
export type BrandAssociatedData = {
  __typename?: 'BrandAssociatedData';
  /**
   * Contains a structure that keeps all currently active URLs for different locales. This information is used
   * for rendering language switching menu. We need to use correct active URL so that user stays looking
   * the exact same entity after the locale switch occurred - just in different language.
   */
  allActiveUrls?: Maybe<Scalars['ComplexDataObject']['output']>;
  /**
   * A structure that allows to reference multiple binary files related to the entity. The related files might
   * represent pictures, technical documentation, certificates, 3D models and much more. The files are expected
   * to be kept in external storage and referenced from here.
   *
   * The format of the related file string is: `code`:`storageId`:`[id1,id2,id3]` where:
   *
   * - `code` is the identificator of the related file type
   * - `storageId` is the identifiactor of the Edee.ONE storage
   * - `[id1,id2,id3]` is array of integer numbers that identify the files in the storage
   *
   * This associated data contains all data about related files and is superset of `relatedFiles`.
   */
  allRelatedFiles?: Maybe<Array<Scalars['String']['output']>>;
  /** A structure that allows to specify a set of localized labels for entity. */
  localization?: Maybe<Scalars['ComplexDataObject']['output']>;
};

/**
 * Attributes allows defining set of data that are fetched in bulk along with the entity body.
 * Attributes may be used for fast filtering or can be used to sort along.
 *
 */
export type BrandAttributes = {
  __typename?: 'BrandAttributes';
  /**
   * Date and time of the last change of this entity. This timestamp is updated only when real change
   * in entity occurs in primary data store.  This timestamp should be used on boundaries with external
   * systems (such as inventory feeds and so on).
   */
  changed: Scalars['OffsetDateTime']['output'];
  /**
   * Unique code that identifies the entity among other entities of the same kind.
   * The code is equivalent to primary key but is targeted on external consumers (systems).
   */
  code: Scalars['String']['output'];
  /** Full description of the entity in HTML format. */
  description?: Maybe<Scalars['String']['output']>;
  /** Shortened version of description of the entity in plain text. */
  descriptionShort?: Maybe<Scalars['String']['output']>;
  /** Localized name of the entity. */
  name: Scalars['String']['output'];
  /**
   * Order of the entity among other entities sharing the same parent in the listing. Used for sorting entities
   * in ascending order.
   */
  order: Scalars['Predecessor']['output'];
  /**
   * Date and time when this entity was last published in the evitaDB index. This timestamp will usually
   * be different from the `changed` attribute because the publishing process asynchronously picks up
   * changed entities and publishes them to the evitaDB index with some delay. Also, when evitaDB is
   * completely re-indexed, all timestamps in this attribute will be reset to a new timestamp, while the
   * `changed` attribute will remain the same.
   *
   */
  published: Scalars['OffsetDateTime']['output'];
  /**
   * A structure that allows to reference multiple binary files related to the entity. The related files might
   * represent pictures, technical documentation, certificates, 3D models and much more. The files are expected
   * to be kept in external storage and referenced from here.
   *
   * - `code` is the identificator of the related file type
   * - `storageId` is the identificator of the Edee.ONE storage
   * - `[id1,id2,id3]` is array of integer numbers that identify the files in the storage
   *
   * This attribute contains subset of `allRelatedFiles` that is used frequently along with entity
   * in listings and so on. Usually it contains something like main motive.
   */
  relatedFiles?: Maybe<Array<Scalars['String']['output']>>;
  /**
   * Returns the status of the entity:
   *
   * - ACTIVE: entity is available on frontend
   * - PRIVATE: entity is  not available on frontend, but it's visible in administration
   */
  status: Scalars['String']['output'];
  /** Localized and globally unique URL of the entity. */
  url?: Maybe<Scalars['String']['output']>;
  /**
   * Old URLs that has been originally assigned to the entity, but are no longer active. Each value that was
   * once `url` but was changed to something else is moved to this list. Thi allows accessing the entity even
   * on the previous location (with redirect) so that remembered URLs in external systems don't end up with
   * "entity not found" response.
   */
  urlInactive?: Maybe<Array<Scalars['String']['output']>>;
  /**
   * Date time range of general accessibility to the entity. Outside this range the entity behaves like if
   * the status was set to PRIVATE.
   */
  validity?: Maybe<Scalars['DateTimeRange']['output']>;
  /**
   * Returns the visibility state of the entity:
   * 	- VISIBLE: entity is visible in signposts, searchable, accessible on detail page
   * 	- INVISIBLE: the entity is only available on a specific detail page (with URL knowledge),
   * 		is not searchable and is not present in listings
   */
  visibility: Scalars['String']['output'];
};

/**
 * Map of requested extra results besides actual found records.
 *
 */
export type BrandExtraResults = {
  __typename?: 'BrandExtraResults';
  attributeHistograms?: Maybe<Array<AttributeNamedHistogram>>;
  /**
   * Returns summary of all facets that match query filter excluding those inside `userFilter`.
   * Object contains information about facet groups and individual facets in them as well as appropriate statistics for them.
   *
   */
  facetSummary?: Maybe<BrandFacetSummary>;
  /**
   * Returns object containing detailed information about query processing time and its decomposition to single operations.
   *
   */
  queryTelemetry: Scalars['Object']['output'];
};


/**
 * Map of requested extra results besides actual found records.
 *
 */
export type BrandExtraResultsAttributeHistogramsArgs = {
  attributes: Array<Scalars['String']['input']>;
};


/**
 * Map of requested extra results besides actual found records.
 *
 */
export type BrandExtraResultsQueryTelemetryArgs = {
  formatted?: InputMaybe<Scalars['Boolean']['input']>;
};

/**
 * This DTO allows returning summary of all facets that match query filter excluding those inside `userFilter`.
 * DTO contains information about facet groups and individual facets in them as well as appropriate statistics for them.
 *
 */
export type BrandFacetSummary = {
  __typename?: 'BrandFacetSummary';
  tags?: Maybe<Array<BrandTagsFacetGroupStatistics>>;
};


/**
 * This DTO allows returning summary of all facets that match query filter excluding those inside `userFilter`.
 * DTO contains information about facet groups and individual facets in them as well as appropriate statistics for them.
 *
 */
export type BrandFacetSummaryTagsArgs = {
  filterGroupBy?: InputMaybe<FilterContainer3a2a9890a875d4bd>;
  orderGroupBy?: InputMaybe<Array<OrderContainer2cb1816184dccd3f>>;
};

/**
 * Contains all possible local mutations to perform on entity `Brand`.
 *
 */
export type BrandLocalMutationAggregate = {
  /**
   * Increments or decrements existing numeric value by specified delta (negative number produces decremental of
   * existing number, positive one incrementation).
   *
   * Allows to specify the number range that is tolerated for the value after delta application has been finished to
   * verify for example that number of items on stock doesn't go below zero.
   *
   */
  applyDeltaAttributeMutation?: InputMaybe<ApplyDeltaAttributeMutation>;
  /**
   * This mutation allows to create a reference in the entity.
   *
   */
  insertReferenceMutation?: InputMaybe<InsertReferenceMutation>;
  /**
   * This mutation allows to create / update / remove attribute of the reference.
   *
   */
  referenceAttributeMutation?: InputMaybe<ReferenceAttributeMutation>;
  /**
   * Remove associated data mutation will drop existing associatedData - ie.generates new version of the associated data with tombstone
   * on it.
   *
   */
  removeAssociatedDataMutation?: InputMaybe<RemoveAssociatedDataMutation>;
  /**
   * Remove attribute mutation will drop existing attribute - ie.generates new version of the attribute with tombstone
   * on it.
   *
   */
  removeAttributeMutation?: InputMaybe<RemoveAttributeMutation>;
  /**
   * This mutation allows to remove group in the reference.
   *
   */
  removeReferenceGroupMutation?: InputMaybe<RemoveReferenceGroupMutation>;
  /**
   * This mutation allows to remove a reference from the entity.
   *
   */
  removeReferenceMutation?: InputMaybe<RemoveReferenceMutation>;
  /**
   * This mutation allows to create / update group of the reference.
   *
   */
  setReferenceGroupMutation?: InputMaybe<SetReferenceGroupMutation>;
  /**
   * Upsert associatedData mutation will either update existing associatedData or create new one.
   *
   */
  upsertAssociatedDataMutation?: InputMaybe<UpsertAssociatedDataMutation>;
  /**
   * Upsert attribute mutation will either update existing attribute or create new one.
   *
   */
  upsertAttributeMutation?: InputMaybe<UpsertAttributeMutation>;
};

/**
 * Page of records according to pagination rules in input query.
 *
 */
export type BrandRecordPage = {
  __typename?: 'BrandRecordPage';
  /**
   * Actual found sorted page/strip of records.
   *
   */
  data: Array<Brand>;
  /**
   * Returns true if there are no data available.
   *
   */
  empty: Scalars['Boolean']['output'];
  /**
   * Returns true if current page/strip is the first page/strip in the result set.
   *
   */
  first: Scalars['Boolean']['output'];
  /**
   * Returns offset of the first record of current page with current pageSize.
   *
   */
  firstPageItemNumber: Scalars['Int']['output'];
  /**
   * Returns true if there is next page/strip available.
   *
   */
  hasNext: Scalars['Boolean']['output'];
  /**
   * Returns true if there is previous page/strip available.
   *
   */
  hasPrevious: Scalars['Boolean']['output'];
  /**
   * Returns true if current page/strip is the last page/strip in the result set.
   *
   */
  last: Scalars['Boolean']['output'];
  /**
   * Returns offset of the last record of current page with current pageSize.
   *
   */
  lastPageItemNumber: Scalars['Int']['output'];
  /**
   * Returns number of the last page that can be accessed with current number of records.
   * Returns -1 when offset/limit was used for creating paginated list.
   *
   */
  lastPageNumber: Scalars['Int']['output'];
  /**
   * Returns current page number (indexed from 1).
   *
   */
  pageNumber: Scalars['Int']['output'];
  /**
   * Returns number of records per single page.
   *
   */
  pageSize: Scalars['Int']['output'];
  /**
   * Returns true if there is only single page/strip available (i.e. total record count < record count on one page).
   *
   */
  singlePage: Scalars['Boolean']['output'];
  /**
   * Returns total number of records that are possible to fetch by paginating entire result stream.
   *
   */
  totalRecordCount: Scalars['Int']['output'];
};

/**
 * Strip of records according to offset and limit rules in input query.
 *
 */
export type BrandRecordStrip = {
  __typename?: 'BrandRecordStrip';
  /**
   * Actual found sorted page/strip of records.
   *
   */
  data: Array<Brand>;
  /**
   * Returns true if there are no data available.
   *
   */
  empty: Scalars['Boolean']['output'];
  /**
   * Returns true if current page/strip is the first page/strip in the result set.
   *
   */
  first: Scalars['Boolean']['output'];
  /**
   * Returns true if there is next page/strip available.
   *
   */
  hasNext: Scalars['Boolean']['output'];
  /**
   * Returns true if there is previous page/strip available.
   *
   */
  hasPrevious: Scalars['Boolean']['output'];
  /**
   * Returns true if current page/strip is the last page/strip in the result set.
   *
   */
  last: Scalars['Boolean']['output'];
  /**
   * Returns limit - i.e. maximal number of records that are requested after offset.
   *
   */
  limit: Scalars['Int']['output'];
  /**
   * Returns current offset (indexed from 0).
   *
   */
  offset: Scalars['Int']['output'];
  /**
   * Returns true if there is only single page/strip available (i.e. total record count < record count on one page).
   *
   */
  singlePage: Scalars['Boolean']['output'];
  /**
   * Returns total number of records that are possible to fetch by paginating entire result stream.
   *
   */
  totalRecordCount: Scalars['Int']['output'];
};

/**
 * Evita response contains all results to single query. Results are divided to two parts - main results returned by
 * `recordPage`/`recordStrip` and set of extra results retrieved by `extraResults`.
 *
 */
export type BrandResponse = {
  __typename?: 'BrandResponse';
  /**
   * Returns map of requested extra results besides actual found records.
   *
   */
  extraResults: BrandExtraResults;
  /**
   * Returns page of records according to pagination rules in input query.
   * Either `page` or `strip` can be used, not both.
   *
   */
  recordPage?: Maybe<BrandRecordPage>;
  /**
   * Returns strip of records according to pagination rules in input query.
   * Either `page` or `strip` can be used, not both.
   *
   */
  recordStrip?: Maybe<BrandRecordStrip>;
};


/**
 * Evita response contains all results to single query. Results are divided to two parts - main results returned by
 * `recordPage`/`recordStrip` and set of extra results retrieved by `extraResults`.
 *
 */
export type BrandResponseRecordPageArgs = {
  number?: InputMaybe<Scalars['Int']['input']>;
  size?: InputMaybe<Scalars['Int']['input']>;
};


/**
 * Evita response contains all results to single query. Results are divided to two parts - main results returned by
 * `recordPage`/`recordStrip` and set of extra results retrieved by `extraResults`.
 *
 */
export type BrandResponseRecordStripArgs = {
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
};

/**
 * This DTO contains information about single facet group and statistics of the facets that relates to it.
 *
 */
export type BrandTagsFacetGroupStatistics = {
  __typename?: 'BrandTagsFacetGroupStatistics';
  /**
   * Contains number of distinct entities in the response that possess any reference in this group.
   *
   */
  count: Scalars['Int']['output'];
  /**
   * Contains statistics of individual facets.
   *
   */
  facetStatistics: Array<BrandTagsFacetStatistics>;
  /**
   * Contains referenced entity representing this group.
   *
   */
  groupEntity?: Maybe<EntityReference>;
};


/**
 * This DTO contains information about single facet group and statistics of the facets that relates to it.
 *
 */
export type BrandTagsFacetGroupStatisticsFacetStatisticsArgs = {
  filterBy?: InputMaybe<FilterContainer967c71ead6465215>;
  orderBy?: InputMaybe<Array<OrderContainer60ec14e01e238dfe>>;
};

/**
 * This DTO contains information about single facet statistics of the entities that are present in the response.
 *
 */
export type BrandTagsFacetStatistics = {
  __typename?: 'BrandTagsFacetStatistics';
  /**
   * Contains number of distinct entities in the response that possess of this reference.
   *
   */
  count: Scalars['Int']['output'];
  /**
   * Contains referenced entity representing.
   *
   */
  facetEntity?: Maybe<Tag>;
  /**
   * This field is not null only when this facet is not requested.
   * Contains projected impact on the current response if this facet is also requested in filtering constraints.
   *
   */
  impact?: Maybe<FacetRequestImpact>;
  /**
   * Contains TRUE if the facet was part of the query filtering constraints.
   *
   */
  requested: Scalars['Boolean']['output'];
};

/**
 * Tags allow non-systematic categorization (cross-structure tagging) of the entities. Tags are often more
 * digestible from the user's point of view. Tags are maintained in Edee.ONE CMS and here we just link them.
 */
export type BrandTagsReference = {
  __typename?: 'BrandTagsReference';
  /**
   * Returns body of the referenced entity in case its fetching was requested via entity_groupFetch constraint.
   *
   */
  groupEntity: EntityReference;
  /**
   * Returns body of the referenced entity in case its fetching was requested via entity_fetch constraint.
   *
   */
  referencedEntity?: Maybe<Tag>;
  /**
   *          Returns primary key of the referenced (internal or external) entity.
   *
   */
  referencedPrimaryKey: Scalars['Int']['output'];
};

export enum Cardinality {
  ExactlyOne = 'EXACTLY_ONE',
  OneOrMore = 'ONE_OR_MORE',
  ZeroOrMore = 'ZERO_OR_MORE',
  ZeroOrOne = 'ZERO_OR_ONE'
}

/**
 * Enum of all available currencies in a catalog.
 *
 */
export enum CatalogCurrency {
  Czk = 'CZK',
  Eur = 'EUR'
}

/**
 * Enum of all available locales in a catalog.
 *
 */
export enum CatalogLocale {
  Cs = 'cs',
  De = 'de',
  En = 'en'
}

/**
 * Category allows organizing products into a logically structured tree.
 * Single product can be part of multiple categories.
 * Category might have only single category as its parent (or none if it's root category).
 */
export type Category = Entity & {
  __typename?: 'Category';
  /**
   * Contains set of all locales that were used for localized attributes or associated data of
   * this particular entity.
   *
   */
  allLocales: Array<CatalogLocale>;
  /**
   * Associated data carry additional data entries that are never used for filtering / sorting but may be needed to be fetched
   * along with entity in order to present data to the target consumer (i.e. user / API / bot). Associated data may be stored
   * in slower storage and may contain wide range of data types - from small ones (i.e. numbers, strings, dates) up to large
   * binary arrays representing entire files (i.e. pictures, documents).
   *
   */
  associatedData?: Maybe<CategoryAssociatedData>;
  /**
   * Attributes allows defining set of data that are fetched in bulk along with the reference.
   * Attributes may be used for fast filtering or can be used to sort along.
   *
   */
  attributes?: Maybe<CategoryAttributes>;
  /**
   * Contains set of requested locales for this particular entity.
   *
   */
  locales: Array<CatalogLocale>;
  /**
   * Returns primary key of direct parent entity or `null` if the entity is root entity.
   *
   * Entities may be organized in hierarchical fashion. That means that entity may refer to single parent entity and
   * may be referred by multiple child entities. Hierarchy is always composed of entities of same type.
   * Each entity must be part of at most single hierarchy (tree).
   *
   */
  parentPrimaryKey?: Maybe<Scalars['Int']['output']>;
  /**
   * Returns list of parent hierarchical entities, possibly entire parent axis of the entity to the root if requested.
   *
   * Entities may be organized in hierarchical fashion. That means that entity may refer to single parent entity and
   * may be referred by multiple child entities. Hierarchy is always composed of entities of same type.
   * Each entity must be part of at most single hierarchy (tree).
   *
   */
  parents?: Maybe<Array<NonHierarchicalCategory>>;
  /**
   * Unique Integer positive number representing the entity. Can be used for fast lookup for
   * entity (entities). Primary key must be unique within the same entity type.
   *
   */
  primaryKey: Scalars['Int']['output'];
  /**
   * Contains set of product the product is related to. The type of the relation is further categorized by
   * `category` reference attribute. This reference allows interconnect products that are similar or
   * supplementary one to another.
   */
  relatedProducts: Array<CategoryRelatedProductsReference>;
  /**
   * The reference is present only for categories with attribute `categoryType` equal to `SHORTCUT` and
   * contains relation to a standard category that is being represented by this shortcut category. Client
   * is expected to extract `url` attribute of represented category and navigate user to it.
   */
  representedCategory?: Maybe<CategoryRepresentedCategoryReference>;
  /**
   * Tags allow non-systematic categorization (cross-structure tagging) of the entities. Tags are often more
   * digestible from the user's point of view. Tags are maintained in Edee.ONE CMS and here we just link them.
   */
  tags: Array<CategoryTagsReference>;
  /**
   * Type of entity.
   * Entity type is main sharding key - all data of entities with same type are stored in separated collections. Within the
   * entity type entity is uniquely represented by primary key.
   *
   */
  type: Scalars['String']['output'];
  /**
   * Contains version of this definition object and gets increased with any entity type update. Allows to execute
   * optimistic locking i.e. avoiding parallel modifications.
   *
   */
  version: Scalars['Int']['output'];
};


/**
 * Category allows organizing products into a logically structured tree.
 * Single product can be part of multiple categories.
 * Category might have only single category as its parent (or none if it's root category).
 */
export type CategoryAssociatedDataArgs = {
  locale?: InputMaybe<CatalogLocale>;
};


/**
 * Category allows organizing products into a logically structured tree.
 * Single product can be part of multiple categories.
 * Category might have only single category as its parent (or none if it's root category).
 */
export type CategoryAttributesArgs = {
  locale?: InputMaybe<CatalogLocale>;
};


/**
 * Category allows organizing products into a logically structured tree.
 * Single product can be part of multiple categories.
 * Category might have only single category as its parent (or none if it's root category).
 */
export type CategoryParentsArgs = {
  stopAt?: InputMaybe<RequireContainer6397022a1afae37>;
};


/**
 * Category allows organizing products into a logically structured tree.
 * Single product can be part of multiple categories.
 * Category might have only single category as its parent (or none if it's root category).
 */
export type CategoryRelatedProductsArgs = {
  filterBy?: InputMaybe<FilterContainerbce0a3eba231c049>;
  orderBy?: InputMaybe<Array<OrderContainerd0162863fcee4fc6>>;
};


/**
 * Category allows organizing products into a logically structured tree.
 * Single product can be part of multiple categories.
 * Category might have only single category as its parent (or none if it's root category).
 */
export type CategoryRepresentedCategoryArgs = {
  filterBy?: InputMaybe<FilterContainere7ac486b7b142f94>;
  orderBy?: InputMaybe<Array<OrderContainerc48ced511efb6976>>;
};


/**
 * Category allows organizing products into a logically structured tree.
 * Single product can be part of multiple categories.
 * Category might have only single category as its parent (or none if it's root category).
 */
export type CategoryTagsArgs = {
  filterBy?: InputMaybe<FilterContainer4aed9dcb3b5a8033>;
  orderBy?: InputMaybe<Array<OrderContainerc445bae2bad3e58>>;
};

/**
 * Associated data carry additional data entries that are never used for filtering / sorting but may be needed to be fetched
 * along with entity in order to present data to the target consumer (i.e. user / API / bot). Associated data may be stored
 * in slower storage and may contain wide range of data types - from small ones (i.e. numbers, strings, dates) up to large
 * binary arrays representing entire files (i.e. pictures, documents).
 *
 */
export type CategoryAssociatedData = {
  __typename?: 'CategoryAssociatedData';
  /**
   * Contains a structure that keeps all currently active URLs for different locales. This information is used
   * for rendering language switching menu. We need to use correct active URL so that user stays looking
   * the exact same entity after the locale switch occurred - just in different language.
   */
  allActiveUrls?: Maybe<Scalars['ComplexDataObject']['output']>;
  /**
   * A structure that allows to reference multiple binary files related to the entity. The related files might
   * represent pictures, technical documentation, certificates, 3D models and much more. The files are expected
   * to be kept in external storage and referenced from here.
   *
   * The format of the related file string is: `code`:`storageId`:`[id1,id2,id3]` where:
   *
   * - `code` is the identificator of the related file type
   * - `storageId` is the identifiactor of the Edee.ONE storage
   * - `[id1,id2,id3]` is array of integer numbers that identify the files in the storage
   *
   * This associated data contains all data about related files and is superset of `relatedFiles`.
   */
  allRelatedFiles?: Maybe<Array<Scalars['String']['output']>>;
  /** A structure that allows to specify a set of localized labels for entity. */
  localization?: Maybe<Scalars['ComplexDataObject']['output']>;
};

/**
 * Attribute histogram is just index for `Histogram` objects for multiple attributes.
 *
 */
export type CategoryAttributeHistogram = {
  __typename?: 'CategoryAttributeHistogram';
  level?: Maybe<Histogram>;
};

/**
 * Attributes allows defining set of data that are fetched in bulk along with the entity body.
 * Attributes may be used for fast filtering or can be used to sort along.
 *
 */
export type CategoryAttributes = {
  __typename?: 'CategoryAttributes';
  /**
   * Categories can be of two types:
   *
   * - STANDARD: generic category
   * - SHORTCUT: a virtual category that serves as link to another STANDARD category
   */
  categoryType: Scalars['String']['output'];
  /**
   * Date and time of the last change of this entity. This timestamp is updated only when real change
   * in entity occurs in primary data store.  This timestamp should be used on boundaries with external
   * systems (such as inventory feeds and so on).
   */
  changed: Scalars['OffsetDateTime']['output'];
  /**
   * Unique code that identifies the entity among other entities of the same kind.
   * The code is equivalent to primary key but is targeted on external consumers (systems).
   */
  code: Scalars['String']['output'];
  /** Full description of the entity in HTML format. */
  description?: Maybe<Scalars['String']['output']>;
  /** Shortened version of description of the entity in plain text. */
  descriptionShort?: Maybe<Scalars['String']['output']>;
  /**
   * Category with `shortcut` type may choose whether to display target category products or not. This attribute
   * is present only for shortcut categories and has no sense for `standard` category.
   */
  displayReferencedCategoryProducts?: Maybe<Scalars['Boolean']['output']>;
  /**
   * Contains the level of the category in the category tree. Number 1 is used for root categories, with each
   * parent the number increases by one.
   */
  level: Scalars['Int']['output'];
  /** Localized name of the entity. */
  name: Scalars['String']['output'];
  /**
   * Order of the entity among other entities sharing the same parent in the listing. Used for sorting entities
   * in ascending order.
   */
  order: Scalars['Predecessor']['output'];
  /**
   * Date and time when this entity was last published in the evitaDB index. This timestamp will usually
   * be different from the `changed` attribute because the publishing process asynchronously picks up
   * changed entities and publishes them to the evitaDB index with some delay. Also, when evitaDB is
   * completely re-indexed, all timestamps in this attribute will be reset to a new timestamp, while the
   * `changed` attribute will remain the same.
   *
   */
  published: Scalars['OffsetDateTime']['output'];
  /**
   * A structure that allows to reference multiple binary files related to the entity. The related files might
   * represent pictures, technical documentation, certificates, 3D models and much more. The files are expected
   * to be kept in external storage and referenced from here.
   *
   * - `code` is the identificator of the related file type
   * - `storageId` is the identificator of the Edee.ONE storage
   * - `[id1,id2,id3]` is array of integer numbers that identify the files in the storage
   *
   * This attribute contains subset of `allRelatedFiles` that is used frequently along with entity
   * in listings and so on. Usually it contains something like main motive.
   */
  relatedFiles?: Maybe<Array<Scalars['String']['output']>>;
  /**
   * Returns the status of the entity:
   *
   * - ACTIVE: entity is available on frontend
   * - PRIVATE: entity is  not available on frontend, but it's visible in administration
   */
  status: Scalars['String']['output'];
  /** Localized and globally unique URL of the entity. */
  url?: Maybe<Scalars['String']['output']>;
  /**
   * Old URLs that has been originally assigned to the entity, but are no longer active. Each value that was
   * once `url` but was changed to something else is moved to this list. Thi allows accessing the entity even
   * on the previous location (with redirect) so that remembered URLs in external systems don't end up with
   * "entity not found" response.
   */
  urlInactive?: Maybe<Array<Scalars['String']['output']>>;
  /**
   * Date time range of general accessibility to the entity. Outside this range the entity behaves like if
   * the status was set to PRIVATE.
   */
  validity?: Maybe<Scalars['DateTimeRange']['output']>;
  /**
   * Returns the visibility state of the entity:
   * 	- VISIBLE: entity is visible in signposts, searchable, accessible on detail page
   * 	- INVISIBLE: the entity is only available on a specific detail page (with URL knowledge),
   * 		is not searchable and is not present in listings
   */
  visibility: Scalars['String']['output'];
};

/**
 * This DTO contains hierarchical structures of hierarchical entities of same type is the queried one. It copies
 * hierarchical structure of those entities and contains their identification or full body as well as information on
 * cardinality of referencing entities.
 *
 */
export type CategoryCategoryHierarchy = {
  __typename?: 'CategoryCategoryHierarchy';
  /**
   * Note: for multiple different children hierarchies, the use of field alias is encouraged here.
   *
   */
  children: Array<CategoryCategoryLevelInfo>;
  /**
   * Note: for multiple different hierarchies beginning from a node, the use of field alias is encouraged here.
   *
   */
  fromNode: Array<CategoryCategoryLevelInfo>;
  /**
   * Note: for multiple different hierarchies beginning from the root, the use of field alias is encouraged here.
   *
   */
  fromRoot: Array<CategoryCategoryLevelInfo>;
  /**
   * Note: for multiple different parents hierarchies, the use of field alias is encouraged here.
   *
   */
  parents: Array<CategoryCategoryLevelInfo>;
  /**
   * Note: for multiple different siblings hierarchies, the use of field alias is encouraged here.
   *
   */
  siblings: Array<CategoryCategoryLevelInfo>;
};


/**
 * This DTO contains hierarchical structures of hierarchical entities of same type is the queried one. It copies
 * hierarchical structure of those entities and contains their identification or full body as well as information on
 * cardinality of referencing entities.
 *
 */
export type CategoryCategoryHierarchyChildrenArgs = {
  statisticsBase?: InputMaybe<StatisticsBase>;
  stopAt?: InputMaybe<RequireContainer6397022a1afae37>;
};


/**
 * This DTO contains hierarchical structures of hierarchical entities of same type is the queried one. It copies
 * hierarchical structure of those entities and contains their identification or full body as well as information on
 * cardinality of referencing entities.
 *
 */
export type CategoryCategoryHierarchyFromNodeArgs = {
  node: WrapperObject833e49fd2eea6dc0;
  statisticsBase?: InputMaybe<StatisticsBase>;
  stopAt?: InputMaybe<RequireContainer6397022a1afae37>;
};


/**
 * This DTO contains hierarchical structures of hierarchical entities of same type is the queried one. It copies
 * hierarchical structure of those entities and contains their identification or full body as well as information on
 * cardinality of referencing entities.
 *
 */
export type CategoryCategoryHierarchyFromRootArgs = {
  statisticsBase?: InputMaybe<StatisticsBase>;
  stopAt?: InputMaybe<RequireContainer6397022a1afae37>;
};


/**
 * This DTO contains hierarchical structures of hierarchical entities of same type is the queried one. It copies
 * hierarchical structure of those entities and contains their identification or full body as well as information on
 * cardinality of referencing entities.
 *
 */
export type CategoryCategoryHierarchyParentsArgs = {
  siblings?: InputMaybe<CategoryCategoryParentsSiblingsSpecification>;
  statisticsBase?: InputMaybe<StatisticsBase>;
  stopAt?: InputMaybe<RequireContainer6397022a1afae37>;
};


/**
 * This DTO contains hierarchical structures of hierarchical entities of same type is the queried one. It copies
 * hierarchical structure of those entities and contains their identification or full body as well as information on
 * cardinality of referencing entities.
 *
 */
export type CategoryCategoryHierarchySiblingsArgs = {
  statisticsBase?: InputMaybe<StatisticsBase>;
  stopAt?: InputMaybe<RequireContainer6397022a1afae37>;
};

/**
 * This DTO represents single hierarchical entity in the hierarchy tree. It contains identification of the entity,
 * the cardinality of queried entities that refer to it and information about children level.
 *
 */
export type CategoryCategoryLevelInfo = {
  __typename?: 'CategoryCategoryLevelInfo';
  /**
   * Contains number of hierarchical entities that are referring to this `entity` as its parent.
   * The count will respect behaviour settings and will not
   * count empty children in case `REMOVE_EMPTY` is
   * used for computation.
   *
   */
  childrenCount: Scalars['Int']['output'];
  /**
   * Hierarchical entity at position in tree represented by this object.
   *
   */
  entity: Category;
  /**
   * Level on which this node is placed from root. Root is always on level 1.
   *
   */
  level: Scalars['Int']['output'];
  /**
   * Contains the number of queried entities that refer directly to this {@link #entity} or to any of its children
   * entities.
   *
   */
  queriedEntityCount: Scalars['Int']['output'];
  /**
   * 			True in case the entity was filtered by `hierarchyWithin`.
   *
   */
  requested: Scalars['Boolean']['output'];
};

/**
 *             Specifies which siblings of parents will be returned and how.
 *
 */
export type CategoryCategoryParentsSiblingsSpecification = {
  /**
   * Defines node at which the hierarchy will stop expanding.
   *
   */
  stopAt?: InputMaybe<RequireContainer6397022a1afae37>;
};

/**
 * Map of requested extra results besides actual found records.
 *
 */
export type CategoryExtraResults = {
  __typename?: 'CategoryExtraResults';
  /**
   * Returns computed histograms for specific attributes based on filter constraints.
   *
   * A histogram is an approximate representation of the distribution of numerical data. For detailed description please
   * see [WikiPedia](https://en.wikipedia.org/wiki/Histogram).
   * Histogram can be computed only for numeric based properties. It visualises which property values are more common
   * in the returned data set and which are rare. Bucket count will never exceed requested bucket count specified in
   * `requestedCount` but there
   * may be less of them if there is no enough data for computation. Bucket thresholds are specified heuristically so that
   * there are as few "empty buckets" as possible.
   *
   * - buckets are defined by their lower bounds (inclusive)
   * - the upper bound is the lower bound of the next bucket
   *
   */
  attributeHistogram?: Maybe<CategoryAttributeHistogram>;
  attributeHistograms?: Maybe<Array<AttributeNamedHistogram>>;
  /**
   * Returns summary of all facets that match query filter excluding those inside `userFilter`.
   * Object contains information about facet groups and individual facets in them as well as appropriate statistics for them.
   *
   */
  facetSummary?: Maybe<CategoryFacetSummary>;
  /**
   * Returns object containing hierarchical structure of entities referenced by the entities required by the query. It copies
   * hierarchical structure of those entities and contains their identification or full body as well as information on
   * cardinality of referencing entities.
   *
   */
  hierarchy?: Maybe<CategoryHierarchy>;
  /**
   * Returns object containing detailed information about query processing time and its decomposition to single operations.
   *
   */
  queryTelemetry: Scalars['Object']['output'];
};


/**
 * Map of requested extra results besides actual found records.
 *
 */
export type CategoryExtraResultsAttributeHistogramsArgs = {
  attributes: Array<Scalars['String']['input']>;
};


/**
 * Map of requested extra results besides actual found records.
 *
 */
export type CategoryExtraResultsQueryTelemetryArgs = {
  formatted?: InputMaybe<Scalars['Boolean']['input']>;
};

/**
 * This DTO allows returning summary of all facets that match query filter excluding those inside `userFilter`.
 * DTO contains information about facet groups and individual facets in them as well as appropriate statistics for them.
 *
 */
export type CategoryFacetSummary = {
  __typename?: 'CategoryFacetSummary';
  tags?: Maybe<Array<CategoryTagsFacetGroupStatistics>>;
};


/**
 * This DTO allows returning summary of all facets that match query filter excluding those inside `userFilter`.
 * DTO contains information about facet groups and individual facets in them as well as appropriate statistics for them.
 *
 */
export type CategoryFacetSummaryTagsArgs = {
  filterGroupBy?: InputMaybe<FilterContainer3a2a9890a875d4bd>;
  orderGroupBy?: InputMaybe<Array<OrderContainer2cb1816184dccd3f>>;
};

/**
 * This DTO contains hierarchical structures of self hierarchical as well as entities referenced by the entities
 * required by the query. It copies hierarchical structure of those entities and contains their identification
 * or full body as well as information on cardinality of referencing entities.
 *
 */
export type CategoryHierarchy = {
  __typename?: 'CategoryHierarchy';
  /**
   * Computes statistics for referenced entity collection `Category` as queried.
   *
   */
  representedCategory: CategoryRepresentedCategoryHierarchy;
  /**
   * Computes statistics for same entity collection as queried.
   *
   */
  self: CategoryCategoryHierarchy;
};


/**
 * This DTO contains hierarchical structures of self hierarchical as well as entities referenced by the entities
 * required by the query. It copies hierarchical structure of those entities and contains their identification
 * or full body as well as information on cardinality of referencing entities.
 *
 */
export type CategoryHierarchyRepresentedCategoryArgs = {
  emptyHierarchicalEntityBehaviour?: InputMaybe<EmptyHierarchicalEntityBehaviour>;
  orderBy?: InputMaybe<Array<OrderContaineraff1014cee092cf7>>;
};


/**
 * This DTO contains hierarchical structures of self hierarchical as well as entities referenced by the entities
 * required by the query. It copies hierarchical structure of those entities and contains their identification
 * or full body as well as information on cardinality of referencing entities.
 *
 */
export type CategoryHierarchySelfArgs = {
  orderBy?: InputMaybe<Array<OrderContaineraff1014cee092cf7>>;
};

/**
 * Contains all possible local mutations to perform on entity `Category`.
 *
 */
export type CategoryLocalMutationAggregate = {
  /**
   * Increments or decrements existing numeric value by specified delta (negative number produces decremental of
   * existing number, positive one incrementation).
   *
   * Allows to specify the number range that is tolerated for the value after delta application has been finished to
   * verify for example that number of items on stock doesn't go below zero.
   *
   */
  applyDeltaAttributeMutation?: InputMaybe<ApplyDeltaAttributeMutation>;
  /**
   * This mutation allows to create a reference in the entity.
   *
   */
  insertReferenceMutation?: InputMaybe<InsertReferenceMutation>;
  /**
   * This mutation allows to create / update / remove attribute of the reference.
   *
   */
  referenceAttributeMutation?: InputMaybe<ReferenceAttributeMutation>;
  /**
   * Remove associated data mutation will drop existing associatedData - ie.generates new version of the associated data with tombstone
   * on it.
   *
   */
  removeAssociatedDataMutation?: InputMaybe<RemoveAssociatedDataMutation>;
  /**
   * Remove attribute mutation will drop existing attribute - ie.generates new version of the attribute with tombstone
   * on it.
   *
   */
  removeAttributeMutation?: InputMaybe<RemoveAttributeMutation>;
  /**
   * This mutation allows to remove `parent` from the `entity`.
   *
   */
  removeParentMutation?: InputMaybe<Scalars['Boolean']['input']>;
  /**
   * This mutation allows to remove group in the reference.
   *
   */
  removeReferenceGroupMutation?: InputMaybe<RemoveReferenceGroupMutation>;
  /**
   * This mutation allows to remove a reference from the entity.
   *
   */
  removeReferenceMutation?: InputMaybe<RemoveReferenceMutation>;
  /**
   * This mutation allows to set `parent` in the `entity`.
   *
   */
  setParentMutation?: InputMaybe<SetParentMutation>;
  /**
   * This mutation allows to create / update group of the reference.
   *
   */
  setReferenceGroupMutation?: InputMaybe<SetReferenceGroupMutation>;
  /**
   * Upsert associatedData mutation will either update existing associatedData or create new one.
   *
   */
  upsertAssociatedDataMutation?: InputMaybe<UpsertAssociatedDataMutation>;
  /**
   * Upsert attribute mutation will either update existing attribute or create new one.
   *
   */
  upsertAttributeMutation?: InputMaybe<UpsertAttributeMutation>;
};

/**
 * Page of records according to pagination rules in input query.
 *
 */
export type CategoryRecordPage = {
  __typename?: 'CategoryRecordPage';
  /**
   * Actual found sorted page/strip of records.
   *
   */
  data: Array<Category>;
  /**
   * Returns true if there are no data available.
   *
   */
  empty: Scalars['Boolean']['output'];
  /**
   * Returns true if current page/strip is the first page/strip in the result set.
   *
   */
  first: Scalars['Boolean']['output'];
  /**
   * Returns offset of the first record of current page with current pageSize.
   *
   */
  firstPageItemNumber: Scalars['Int']['output'];
  /**
   * Returns true if there is next page/strip available.
   *
   */
  hasNext: Scalars['Boolean']['output'];
  /**
   * Returns true if there is previous page/strip available.
   *
   */
  hasPrevious: Scalars['Boolean']['output'];
  /**
   * Returns true if current page/strip is the last page/strip in the result set.
   *
   */
  last: Scalars['Boolean']['output'];
  /**
   * Returns offset of the last record of current page with current pageSize.
   *
   */
  lastPageItemNumber: Scalars['Int']['output'];
  /**
   * Returns number of the last page that can be accessed with current number of records.
   * Returns -1 when offset/limit was used for creating paginated list.
   *
   */
  lastPageNumber: Scalars['Int']['output'];
  /**
   * Returns current page number (indexed from 1).
   *
   */
  pageNumber: Scalars['Int']['output'];
  /**
   * Returns number of records per single page.
   *
   */
  pageSize: Scalars['Int']['output'];
  /**
   * Returns true if there is only single page/strip available (i.e. total record count < record count on one page).
   *
   */
  singlePage: Scalars['Boolean']['output'];
  /**
   * Returns total number of records that are possible to fetch by paginating entire result stream.
   *
   */
  totalRecordCount: Scalars['Int']['output'];
};

/**
 * Strip of records according to offset and limit rules in input query.
 *
 */
export type CategoryRecordStrip = {
  __typename?: 'CategoryRecordStrip';
  /**
   * Actual found sorted page/strip of records.
   *
   */
  data: Array<Category>;
  /**
   * Returns true if there are no data available.
   *
   */
  empty: Scalars['Boolean']['output'];
  /**
   * Returns true if current page/strip is the first page/strip in the result set.
   *
   */
  first: Scalars['Boolean']['output'];
  /**
   * Returns true if there is next page/strip available.
   *
   */
  hasNext: Scalars['Boolean']['output'];
  /**
   * Returns true if there is previous page/strip available.
   *
   */
  hasPrevious: Scalars['Boolean']['output'];
  /**
   * Returns true if current page/strip is the last page/strip in the result set.
   *
   */
  last: Scalars['Boolean']['output'];
  /**
   * Returns limit - i.e. maximal number of records that are requested after offset.
   *
   */
  limit: Scalars['Int']['output'];
  /**
   * Returns current offset (indexed from 0).
   *
   */
  offset: Scalars['Int']['output'];
  /**
   * Returns true if there is only single page/strip available (i.e. total record count < record count on one page).
   *
   */
  singlePage: Scalars['Boolean']['output'];
  /**
   * Returns total number of records that are possible to fetch by paginating entire result stream.
   *
   */
  totalRecordCount: Scalars['Int']['output'];
};

/**
 * Attributes allows defining set of data that are fetched in bulk along with the entity body.
 * Attributes may be used for fast filtering or can be used to sort along.
 *
 */
export type CategoryRelatedProductsAttributes = {
  __typename?: 'CategoryRelatedProductsAttributes';
  /**
   * Category describes the form of the relation between the related products. The common ones are `alternative
   * product` or `complementary product`.
   */
  category: Scalars['String']['output'];
  /**
   * Order of the entity among other variants within the same master product in the variant listing. Used for
   * sorting entities in ascending order.
   */
  orderInRelation: Scalars['Int']['output'];
};

/**
 * Contains set of product the product is related to. The type of the relation is further categorized by
 * `category` reference attribute. This reference allows interconnect products that are similar or
 * supplementary one to another.
 */
export type CategoryRelatedProductsReference = {
  __typename?: 'CategoryRelatedProductsReference';
  /**
   * Attributes allows defining set of data that are fetched in bulk along with the reference.
   * Attributes may be used for fast filtering or can be used to sort along.
   *
   */
  attributes?: Maybe<CategoryRelatedProductsAttributes>;
  /**
   * Returns body of the referenced entity in case its fetching was requested via entity_fetch constraint.
   *
   */
  referencedEntity?: Maybe<Product>;
  /**
   *          Returns primary key of the referenced (internal or external) entity.
   *
   */
  referencedPrimaryKey: Scalars['Int']['output'];
};

/**
 * This DTO contains hierarchical structures of entities referenced by the entities required by the query. It copies
 * hierarchical structure of those entities and contains their identification or full body as well as information on
 * cardinality of referencing entities.
 *
 */
export type CategoryRepresentedCategoryHierarchy = {
  __typename?: 'CategoryRepresentedCategoryHierarchy';
  /**
   * Note: for multiple different children hierarchies, the use of field alias is encouraged here.
   *
   */
  children: Array<CategoryRepresentedCategoryLevelInfo>;
  /**
   * Note: for multiple different hierarchies beginning from a node, the use of field alias is encouraged here.
   *
   */
  fromNode: Array<CategoryRepresentedCategoryLevelInfo>;
  /**
   * Note: for multiple different hierarchies beginning from the root, the use of field alias is encouraged here.
   *
   */
  fromRoot: Array<CategoryRepresentedCategoryLevelInfo>;
  /**
   * Note: for multiple different parents hierarchies, the use of field alias is encouraged here.
   *
   */
  parents: Array<CategoryRepresentedCategoryLevelInfo>;
  /**
   * Note: for multiple different siblings hierarchies, the use of field alias is encouraged here.
   *
   */
  siblings: Array<CategoryRepresentedCategoryLevelInfo>;
};


/**
 * This DTO contains hierarchical structures of entities referenced by the entities required by the query. It copies
 * hierarchical structure of those entities and contains their identification or full body as well as information on
 * cardinality of referencing entities.
 *
 */
export type CategoryRepresentedCategoryHierarchyChildrenArgs = {
  statisticsBase?: InputMaybe<StatisticsBase>;
  stopAt?: InputMaybe<RequireContainer65ded0e02e7a08e5>;
};


/**
 * This DTO contains hierarchical structures of entities referenced by the entities required by the query. It copies
 * hierarchical structure of those entities and contains their identification or full body as well as information on
 * cardinality of referencing entities.
 *
 */
export type CategoryRepresentedCategoryHierarchyFromNodeArgs = {
  node: WrapperObject5dcae8f8f4fda156;
  statisticsBase?: InputMaybe<StatisticsBase>;
  stopAt?: InputMaybe<RequireContainer65ded0e02e7a08e5>;
};


/**
 * This DTO contains hierarchical structures of entities referenced by the entities required by the query. It copies
 * hierarchical structure of those entities and contains their identification or full body as well as information on
 * cardinality of referencing entities.
 *
 */
export type CategoryRepresentedCategoryHierarchyFromRootArgs = {
  statisticsBase?: InputMaybe<StatisticsBase>;
  stopAt?: InputMaybe<RequireContainer65ded0e02e7a08e5>;
};


/**
 * This DTO contains hierarchical structures of entities referenced by the entities required by the query. It copies
 * hierarchical structure of those entities and contains their identification or full body as well as information on
 * cardinality of referencing entities.
 *
 */
export type CategoryRepresentedCategoryHierarchyParentsArgs = {
  siblings?: InputMaybe<CategoryRepresentedCategoryParentsSiblingsSpecification>;
  statisticsBase?: InputMaybe<StatisticsBase>;
  stopAt?: InputMaybe<RequireContainer65ded0e02e7a08e5>;
};


/**
 * This DTO contains hierarchical structures of entities referenced by the entities required by the query. It copies
 * hierarchical structure of those entities and contains their identification or full body as well as information on
 * cardinality of referencing entities.
 *
 */
export type CategoryRepresentedCategoryHierarchySiblingsArgs = {
  statisticsBase?: InputMaybe<StatisticsBase>;
  stopAt?: InputMaybe<RequireContainer65ded0e02e7a08e5>;
};

/**
 * This DTO represents single hierarchical entity in the hierarchy tree. It contains identification of the entity,
 * the cardinality of queried entities that refer to it and information about children level.
 *
 */
export type CategoryRepresentedCategoryLevelInfo = {
  __typename?: 'CategoryRepresentedCategoryLevelInfo';
  /**
   * Contains number of hierarchical entities that are referring to this `entity` as its parent.
   * The count will respect behaviour settings and will not
   * count empty children in case `REMOVE_EMPTY` is
   * used for computation.
   *
   */
  childrenCount: Scalars['Int']['output'];
  /**
   * Hierarchical entity at position in tree represented by this object.
   *
   */
  entity: Category;
  /**
   * Level on which this node is placed from root. Root is always on level 1.
   *
   */
  level: Scalars['Int']['output'];
  /**
   * Contains the number of queried entities that refer directly to this {@link #entity} or to any of its children
   * entities.
   *
   */
  queriedEntityCount: Scalars['Int']['output'];
  /**
   * 			True in case the entity was filtered by `hierarchyWithin`.
   *
   */
  requested: Scalars['Boolean']['output'];
};

/**
 *             Specifies which siblings of parents will be returned and how.
 *
 */
export type CategoryRepresentedCategoryParentsSiblingsSpecification = {
  /**
   * Defines node at which the hierarchy will stop expanding.
   *
   */
  stopAt?: InputMaybe<RequireContainer65ded0e02e7a08e5>;
};

/**
 * The reference is present only for categories with attribute `categoryType` equal to `SHORTCUT` and
 * contains relation to a standard category that is being represented by this shortcut category. Client
 * is expected to extract `url` attribute of represented category and navigate user to it.
 */
export type CategoryRepresentedCategoryReference = {
  __typename?: 'CategoryRepresentedCategoryReference';
  /**
   * Returns body of the referenced entity in case its fetching was requested via entity_fetch constraint.
   *
   */
  referencedEntity?: Maybe<Category>;
  /**
   *          Returns primary key of the referenced (internal or external) entity.
   *
   */
  referencedPrimaryKey: Scalars['Int']['output'];
};

/**
 * Evita response contains all results to single query. Results are divided to two parts - main results returned by
 * `recordPage`/`recordStrip` and set of extra results retrieved by `extraResults`.
 *
 */
export type CategoryResponse = {
  __typename?: 'CategoryResponse';
  /**
   * Returns map of requested extra results besides actual found records.
   *
   */
  extraResults: CategoryExtraResults;
  /**
   * Returns page of records according to pagination rules in input query.
   * Either `page` or `strip` can be used, not both.
   *
   */
  recordPage?: Maybe<CategoryRecordPage>;
  /**
   * Returns strip of records according to pagination rules in input query.
   * Either `page` or `strip` can be used, not both.
   *
   */
  recordStrip?: Maybe<CategoryRecordStrip>;
};


/**
 * Evita response contains all results to single query. Results are divided to two parts - main results returned by
 * `recordPage`/`recordStrip` and set of extra results retrieved by `extraResults`.
 *
 */
export type CategoryResponseRecordPageArgs = {
  number?: InputMaybe<Scalars['Int']['input']>;
  size?: InputMaybe<Scalars['Int']['input']>;
};


/**
 * Evita response contains all results to single query. Results are divided to two parts - main results returned by
 * `recordPage`/`recordStrip` and set of extra results retrieved by `extraResults`.
 *
 */
export type CategoryResponseRecordStripArgs = {
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
};

/**
 * This DTO contains information about single facet group and statistics of the facets that relates to it.
 *
 */
export type CategoryTagsFacetGroupStatistics = {
  __typename?: 'CategoryTagsFacetGroupStatistics';
  /**
   * Contains number of distinct entities in the response that possess any reference in this group.
   *
   */
  count: Scalars['Int']['output'];
  /**
   * Contains statistics of individual facets.
   *
   */
  facetStatistics: Array<CategoryTagsFacetStatistics>;
  /**
   * Contains referenced entity representing this group.
   *
   */
  groupEntity?: Maybe<EntityReference>;
};


/**
 * This DTO contains information about single facet group and statistics of the facets that relates to it.
 *
 */
export type CategoryTagsFacetGroupStatisticsFacetStatisticsArgs = {
  filterBy?: InputMaybe<FilterContainer967c71ead6465215>;
  orderBy?: InputMaybe<Array<OrderContainer60ec14e01e238dfe>>;
};

/**
 * This DTO contains information about single facet statistics of the entities that are present in the response.
 *
 */
export type CategoryTagsFacetStatistics = {
  __typename?: 'CategoryTagsFacetStatistics';
  /**
   * Contains number of distinct entities in the response that possess of this reference.
   *
   */
  count: Scalars['Int']['output'];
  /**
   * Contains referenced entity representing.
   *
   */
  facetEntity?: Maybe<Tag>;
  /**
   * This field is not null only when this facet is not requested.
   * Contains projected impact on the current response if this facet is also requested in filtering constraints.
   *
   */
  impact?: Maybe<FacetRequestImpact>;
  /**
   * Contains TRUE if the facet was part of the query filtering constraints.
   *
   */
  requested: Scalars['Boolean']['output'];
};

/**
 * Tags allow non-systematic categorization (cross-structure tagging) of the entities. Tags are often more
 * digestible from the user's point of view. Tags are maintained in Edee.ONE CMS and here we just link them.
 */
export type CategoryTagsReference = {
  __typename?: 'CategoryTagsReference';
  /**
   * Returns body of the referenced entity in case its fetching was requested via entity_groupFetch constraint.
   *
   */
  groupEntity: EntityReference;
  /**
   * Returns body of the referenced entity in case its fetching was requested via entity_fetch constraint.
   *
   */
  referencedEntity?: Maybe<Tag>;
  /**
   *          Returns primary key of the referenced (internal or external) entity.
   *
   */
  referencedPrimaryKey: Scalars['Int']['output'];
};

export enum EmptyHierarchicalEntityBehaviour {
  LeaveEmpty = 'LEAVE_EMPTY',
  RemoveEmpty = 'REMOVE_EMPTY'
}

/**
 * Generic the most basic entity.
 * Common ancestor for all specific entities which correspond to specific collections.
 *
 */
export type Entity = {
  /**
   * Unique Integer positive number representing the entity. Can be used for fast lookup for
   * entity (entities). Primary key must be unique within the same entity type.
   *
   */
  primaryKey: Scalars['Int']['output'];
  /**
   * Type of entity.
   * Entity type is main sharding key - all data of entities with same type are stored in separated collections. Within the
   * entity type entity is uniquely represented by primary key.
   *
   */
  type: Scalars['String']['output'];
  /**
   * Contains version of this definition object and gets increased with any entity type update. Allows to execute
   * optimistic locking i.e. avoiding parallel modifications.
   *
   */
  version: Scalars['Int']['output'];
};

export enum EntityExistence {
  MayExist = 'MAY_EXIST',
  MustExist = 'MUST_EXIST',
  MustNotExist = 'MUST_NOT_EXIST'
}

/**
 * Pointer to a full entity.
 *
 */
export type EntityReference = {
  __typename?: 'EntityReference';
  /**
   * Unique Integer positive number representing the entity. Can be used for fast lookup for
   * entity (entities). Primary key must be unique within the same entity type.
   *
   */
  primaryKey: Scalars['Int']['output'];
  /**
   * Type of entity.
   * Entity type is main sharding key - all data of entities with same type are stored in separated collections. Within the
   * entity type entity is uniquely represented by primary key.
   *
   */
  type: Scalars['String']['output'];
  /**
   * Contains version of this definition object and gets increased with any entity type update. Allows to execute
   * optimistic locking i.e. avoiding parallel modifications.
   *
   */
  version: Scalars['Int']['output'];
};

/**
 *  This DTO contains information about the impact of adding respective facet into the filtering constraint. This
 *  would lead to expanding or shrinking the result response in certain way, that is described in this DTO.
 *  This implementation contains only the bare difference and the match count.
 *
 */
export type FacetRequestImpact = {
  __typename?: 'FacetRequestImpact';
  /**
   * Projected number of entities that are added or removed from result if the query is altered by adding this
   * facet to filtering constraint in comparison to current result.
   *
   */
  difference: Scalars['Int']['output'];
  /**
   * Selection has sense - TRUE if there is at least one entity still present in the result if the query is
   * altered by adding this facet to filtering constraint.
   *
   */
  hasSense: Scalars['Boolean']['output'];
  /**
   * Projected number of filtered entities if the query is altered by adding this facet to filtering constraint.
   *
   */
  matchCount: Scalars['Int']['output'];
};

export type FilterContainer1e4225e8e77021d7 = {
  /** The container that combines inner constraints with [logical AND](https://en.wikipedia.org/wiki/Logical_conjunction). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/logical#and) */
  and?: InputMaybe<Array<FilterContainer1e4225e8e77021d7>>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeChangedBetween?: InputMaybe<Array<InputMaybe<Scalars['OffsetDateTime']['input']>>>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeChangedEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeChangedGreaterThan?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeChangedGreaterThanEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeChangedInSet?: InputMaybe<Array<Scalars['OffsetDateTime']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeChangedIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeChangedLessThan?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeChangedLessThanEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeCodeBetween?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute contains part of passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-contains) */
  attributeCodeContains?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute ends with passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-ends-with) */
  attributeCodeEndsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeCodeEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeCodeGreaterThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeCodeGreaterThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeCodeInSet?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeCodeIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeCodeLessThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeCodeLessThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attributes starts with passed text. (case-sensitive) [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-starts-with) */
  attributeCodeStartsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeNameBetween?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute contains part of passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-contains) */
  attributeNameContains?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute ends with passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-ends-with) */
  attributeNameEndsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeNameEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeNameGreaterThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeNameGreaterThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeNameInSet?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeNameIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeNameLessThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeNameLessThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attributes starts with passed text. (case-sensitive) [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-starts-with) */
  attributeNameStartsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributePublishedBetween?: InputMaybe<Array<InputMaybe<Scalars['OffsetDateTime']['input']>>>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributePublishedEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributePublishedGreaterThan?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributePublishedGreaterThanEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributePublishedInSet?: InputMaybe<Array<Scalars['OffsetDateTime']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributePublishedIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributePublishedLessThan?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributePublishedLessThanEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeStatusBetween?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute contains part of passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-contains) */
  attributeStatusContains?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute ends with passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-ends-with) */
  attributeStatusEndsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeStatusEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeStatusGreaterThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeStatusGreaterThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeStatusInSet?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeStatusIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeStatusLessThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeStatusLessThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attributes starts with passed text. (case-sensitive) [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-starts-with) */
  attributeStatusStartsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeUrlBetween?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute contains part of passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-contains) */
  attributeUrlContains?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute ends with passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-ends-with) */
  attributeUrlEndsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeUrlEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeUrlGreaterThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeUrlGreaterThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeUrlInSet?: InputMaybe<Array<Scalars['String']['input']>>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeUrlInactiveBetween?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute contains part of passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-contains) */
  attributeUrlInactiveContains?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute ends with passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-ends-with) */
  attributeUrlInactiveEndsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeUrlInactiveEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeUrlInactiveGreaterThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeUrlInactiveGreaterThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeUrlInactiveInSet?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeUrlInactiveIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeUrlInactiveLessThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeUrlInactiveLessThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attributes starts with passed text. (case-sensitive) [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-starts-with) */
  attributeUrlInactiveStartsWith?: InputMaybe<Scalars['String']['input']>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeUrlIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeUrlLessThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeUrlLessThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attributes starts with passed text. (case-sensitive) [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-starts-with) */
  attributeUrlStartsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeValidityBetween?: InputMaybe<Array<InputMaybe<Scalars['OffsetDateTime']['input']>>>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeValidityEquals?: InputMaybe<Scalars['DateTimeRange']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeValidityGreaterThan?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeValidityGreaterThanEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the range value of that attribute contains the passed value within its limits (both ends are inclusive). The constraint can be used only for Range data type values. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/range#attribute-in-range) */
  attributeValidityInRange?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeValidityInSet?: InputMaybe<Array<Scalars['DateTimeRange']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeValidityIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeValidityLessThan?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeValidityLessThanEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeVisibilityBetween?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute contains part of passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-contains) */
  attributeVisibilityContains?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute ends with passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-ends-with) */
  attributeVisibilityEndsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeVisibilityEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeVisibilityGreaterThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeVisibilityGreaterThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeVisibilityInSet?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeVisibilityIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeVisibilityLessThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeVisibilityLessThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attributes starts with passed text. (case-sensitive) [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-starts-with) */
  attributeVisibilityStartsWith?: InputMaybe<Scalars['String']['input']>;
  /** The constraint if at least one of entity locales (derived from entity attributes or associated data) equals to the passed one. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/locale#entity-locale-equals) */
  entityLocaleEquals?: InputMaybe<CatalogLocale>;
  /** The constraint checks if primary key of the entity equals to at least one of the passed values. The constraint is equivalent to one or more `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/constant#entity-primary-key-in-set) */
  entityPrimaryKeyInSet?: InputMaybe<Array<Scalars['Int']['input']>>;
  /** The container that behaves as [logical NOT](https://en.wikipedia.org/wiki/Negation) for the inner constraint. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/logical#not) */
  not?: InputMaybe<FilterContainer1e4225e8e77021d7>;
  /** The container that combines inner constraints with [logical OR](https://en.wikipedia.org/wiki/Logical_disjunction). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/logical#or) */
  or?: InputMaybe<Array<FilterContainer1e4225e8e77021d7>>;
  /** The container for constraints that are controlled by the user (client UI widgets). It is used mainly to distinguish between user constraint (refining the search) and program defined constraints (considered mandatory), when the extra results are computed. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/behavioral#user-filter) */
  userFilter?: InputMaybe<Array<FilterContainereb8d9910aeafde88>>;
};

export type FilterContainer1f0678ef1ed202e4 = {
  /** The container that combines inner constraints with [logical AND](https://en.wikipedia.org/wiki/Logical_conjunction). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/logical#and) */
  and?: InputMaybe<Array<FilterContainer1f0678ef1ed202e4>>;
  /** The container allowing to filter entities by having references to entities managed by evitaDB that match inner filtering constraints. This container resembles the SQL inner join clauses where the `entityHaving`contains the filtering condition on particular join. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/references#entity-having) */
  entityHaving?: InputMaybe<FilterContainer967c71ead6465215>;
  /** The constraint checks if primary key of the entity equals to at least one of the passed values. The constraint is equivalent to one or more `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/constant#entity-primary-key-in-set) */
  entityPrimaryKeyInSet?: InputMaybe<Array<Scalars['Int']['input']>>;
  /** The container that behaves as [logical NOT](https://en.wikipedia.org/wiki/Negation) for the inner constraint. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/logical#not) */
  not?: InputMaybe<FilterContainer1f0678ef1ed202e4>;
  /** The container that combines inner constraints with [logical OR](https://en.wikipedia.org/wiki/Logical_disjunction). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/logical#or) */
  or?: InputMaybe<Array<FilterContainer1f0678ef1ed202e4>>;
};

export type FilterContainer2cf89daeb4f0d064 = {
  /** The container that combines inner constraints with [logical AND](https://en.wikipedia.org/wiki/Logical_conjunction). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/logical#and) */
  and?: InputMaybe<Array<FilterContainer2cf89daeb4f0d064>>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeMinRequiredQuantityBetween?: InputMaybe<Array<InputMaybe<Scalars['BigDecimal']['input']>>>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeMinRequiredQuantityEquals?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeMinRequiredQuantityGreaterThan?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeMinRequiredQuantityGreaterThanEquals?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeMinRequiredQuantityInSet?: InputMaybe<Array<Scalars['BigDecimal']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeMinRequiredQuantityIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeMinRequiredQuantityLessThan?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeMinRequiredQuantityLessThanEquals?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeRequiredProductIdBetween?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeRequiredProductIdEquals?: InputMaybe<Scalars['Int']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeRequiredProductIdGreaterThan?: InputMaybe<Scalars['Int']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeRequiredProductIdGreaterThanEquals?: InputMaybe<Scalars['Int']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeRequiredProductIdInSet?: InputMaybe<Array<Scalars['Int']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeRequiredProductIdIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeRequiredProductIdLessThan?: InputMaybe<Scalars['Int']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeRequiredProductIdLessThanEquals?: InputMaybe<Scalars['Int']['input']>;
  /** The container allowing to filter entities by having references to entities managed by evitaDB that match inner filtering constraints. This container resembles the SQL inner join clauses where the `entityHaving`contains the filtering condition on particular join. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/references#entity-having) */
  entityHaving?: InputMaybe<FilterContainer150edb03f6a8549a>;
  /** The constraint checks if primary key of the entity equals to at least one of the passed values. The constraint is equivalent to one or more `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/constant#entity-primary-key-in-set) */
  entityPrimaryKeyInSet?: InputMaybe<Array<Scalars['Int']['input']>>;
  /** The container that behaves as [logical NOT](https://en.wikipedia.org/wiki/Negation) for the inner constraint. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/logical#not) */
  not?: InputMaybe<FilterContainer2cf89daeb4f0d064>;
  /** The container that combines inner constraints with [logical OR](https://en.wikipedia.org/wiki/Logical_disjunction). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/logical#or) */
  or?: InputMaybe<Array<FilterContainer2cf89daeb4f0d064>>;
};

export type FilterContainer3a2a9890a875d4bd = {
  /** The container that combines inner constraints with [logical AND](https://en.wikipedia.org/wiki/Logical_conjunction). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/logical#and) */
  and?: InputMaybe<Array<FilterContainer3a2a9890a875d4bd>>;
  /** The constraint checks if primary key of the entity equals to at least one of the passed values. The constraint is equivalent to one or more `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/constant#entity-primary-key-in-set) */
  entityPrimaryKeyInSet?: InputMaybe<Array<Scalars['Int']['input']>>;
  /** The container that behaves as [logical NOT](https://en.wikipedia.org/wiki/Negation) for the inner constraint. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/logical#not) */
  not?: InputMaybe<FilterContainer3a2a9890a875d4bd>;
  /** The container that combines inner constraints with [logical OR](https://en.wikipedia.org/wiki/Logical_disjunction). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/logical#or) */
  or?: InputMaybe<Array<FilterContainer3a2a9890a875d4bd>>;
  /** The container for constraints that are controlled by the user (client UI widgets). It is used mainly to distinguish between user constraint (refining the search) and program defined constraints (considered mandatory), when the extra results are computed. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/behavioral#user-filter) */
  userFilter?: InputMaybe<Array<FilterContainera24e57ad70b0d28e>>;
};

export type FilterContainer3e7971791f10624 = {
  /** The container that combines inner constraints with [logical AND](https://en.wikipedia.org/wiki/Logical_conjunction). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/logical#and) */
  and?: InputMaybe<Array<FilterContainer3e7971791f10624>>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeQuantityOnStockBetween?: InputMaybe<Array<InputMaybe<Scalars['BigDecimal']['input']>>>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeQuantityOnStockEquals?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeQuantityOnStockGreaterThan?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeQuantityOnStockGreaterThanEquals?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeQuantityOnStockInSet?: InputMaybe<Array<Scalars['BigDecimal']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeQuantityOnStockIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeQuantityOnStockLessThan?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeQuantityOnStockLessThanEquals?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** The container allowing to filter entities by having references to entities managed by evitaDB that match inner filtering constraints. This container resembles the SQL inner join clauses where the `entityHaving`contains the filtering condition on particular join. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/references#entity-having) */
  entityHaving?: InputMaybe<FilterContainer11895e8d40db8091>;
  /** The constraint checks if primary key of the entity equals to at least one of the passed values. The constraint is equivalent to one or more `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/constant#entity-primary-key-in-set) */
  entityPrimaryKeyInSet?: InputMaybe<Array<Scalars['Int']['input']>>;
  /** The container that behaves as [logical NOT](https://en.wikipedia.org/wiki/Negation) for the inner constraint. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/logical#not) */
  not?: InputMaybe<FilterContainer3e7971791f10624>;
  /** The container that combines inner constraints with [logical OR](https://en.wikipedia.org/wiki/Logical_disjunction). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/logical#or) */
  or?: InputMaybe<Array<FilterContainer3e7971791f10624>>;
};

export type FilterContainer3e99187591f187d1 = {
  /** The container that combines inner constraints with [logical AND](https://en.wikipedia.org/wiki/Logical_conjunction). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/logical#and) */
  and?: InputMaybe<Array<FilterContainer3e99187591f187d1>>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeAssignmentValidityBetween?: InputMaybe<Array<InputMaybe<Scalars['OffsetDateTime']['input']>>>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeAssignmentValidityEquals?: InputMaybe<Scalars['DateTimeRange']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeAssignmentValidityGreaterThan?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeAssignmentValidityGreaterThanEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the range value of that attribute contains the passed value within its limits (both ends are inclusive). The constraint can be used only for Range data type values. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/range#attribute-in-range) */
  attributeAssignmentValidityInRange?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeAssignmentValidityInSet?: InputMaybe<Array<Scalars['DateTimeRange']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeAssignmentValidityIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeAssignmentValidityLessThan?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeAssignmentValidityLessThanEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** The container allowing to filter entities by having references to entities managed by evitaDB that match inner filtering constraints. This container resembles the SQL inner join clauses where the `entityHaving`contains the filtering condition on particular join. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/references#entity-having) */
  entityHaving?: InputMaybe<FilterContainerc183dce568fe08c7>;
  /** The constraint checks if primary key of the entity equals to at least one of the passed values. The constraint is equivalent to one or more `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/constant#entity-primary-key-in-set) */
  entityPrimaryKeyInSet?: InputMaybe<Array<Scalars['Int']['input']>>;
  /** The container that behaves as [logical NOT](https://en.wikipedia.org/wiki/Negation) for the inner constraint. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/logical#not) */
  not?: InputMaybe<FilterContainer3e99187591f187d1>;
  /** The container that combines inner constraints with [logical OR](https://en.wikipedia.org/wiki/Logical_disjunction). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/logical#or) */
  or?: InputMaybe<Array<FilterContainer3e99187591f187d1>>;
};

export type FilterContainer3ff4be886c39a0e = {
  /** The container that combines inner constraints with [logical AND](https://en.wikipedia.org/wiki/Logical_conjunction). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/logical#and) */
  and?: InputMaybe<Array<FilterContainer3ff4be886c39a0e>>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeChangedBetween?: InputMaybe<Array<InputMaybe<Scalars['OffsetDateTime']['input']>>>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeChangedEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeChangedGreaterThan?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeChangedGreaterThanEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeChangedInSet?: InputMaybe<Array<Scalars['OffsetDateTime']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeChangedIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeChangedLessThan?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeChangedLessThanEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeCodeBetween?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute contains part of passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-contains) */
  attributeCodeContains?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute ends with passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-ends-with) */
  attributeCodeEndsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeCodeEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeCodeGreaterThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeCodeGreaterThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeCodeInSet?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeCodeIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeCodeLessThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeCodeLessThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attributes starts with passed text. (case-sensitive) [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-starts-with) */
  attributeCodeStartsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeNameBetween?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute contains part of passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-contains) */
  attributeNameContains?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute ends with passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-ends-with) */
  attributeNameEndsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeNameEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeNameGreaterThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeNameGreaterThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeNameInSet?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeNameIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeNameLessThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeNameLessThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attributes starts with passed text. (case-sensitive) [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-starts-with) */
  attributeNameStartsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributePaymentTypeBetween?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute contains part of passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-contains) */
  attributePaymentTypeContains?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute ends with passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-ends-with) */
  attributePaymentTypeEndsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributePaymentTypeEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributePaymentTypeGreaterThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributePaymentTypeGreaterThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributePaymentTypeInSet?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributePaymentTypeIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributePaymentTypeLessThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributePaymentTypeLessThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attributes starts with passed text. (case-sensitive) [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-starts-with) */
  attributePaymentTypeStartsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributePublishedBetween?: InputMaybe<Array<InputMaybe<Scalars['OffsetDateTime']['input']>>>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributePublishedEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributePublishedGreaterThan?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributePublishedGreaterThanEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributePublishedInSet?: InputMaybe<Array<Scalars['OffsetDateTime']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributePublishedIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributePublishedLessThan?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributePublishedLessThanEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeStatusBetween?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute contains part of passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-contains) */
  attributeStatusContains?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute ends with passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-ends-with) */
  attributeStatusEndsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeStatusEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeStatusGreaterThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeStatusGreaterThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeStatusInSet?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeStatusIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeStatusLessThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeStatusLessThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attributes starts with passed text. (case-sensitive) [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-starts-with) */
  attributeStatusStartsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeUrlBetween?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute contains part of passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-contains) */
  attributeUrlContains?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute ends with passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-ends-with) */
  attributeUrlEndsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeUrlEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeUrlGreaterThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeUrlGreaterThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeUrlInSet?: InputMaybe<Array<Scalars['String']['input']>>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeUrlInactiveBetween?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute contains part of passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-contains) */
  attributeUrlInactiveContains?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute ends with passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-ends-with) */
  attributeUrlInactiveEndsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeUrlInactiveEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeUrlInactiveGreaterThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeUrlInactiveGreaterThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeUrlInactiveInSet?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeUrlInactiveIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeUrlInactiveLessThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeUrlInactiveLessThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attributes starts with passed text. (case-sensitive) [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-starts-with) */
  attributeUrlInactiveStartsWith?: InputMaybe<Scalars['String']['input']>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeUrlIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeUrlLessThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeUrlLessThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attributes starts with passed text. (case-sensitive) [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-starts-with) */
  attributeUrlStartsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeValidityBetween?: InputMaybe<Array<InputMaybe<Scalars['OffsetDateTime']['input']>>>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeValidityEquals?: InputMaybe<Scalars['DateTimeRange']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeValidityGreaterThan?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeValidityGreaterThanEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the range value of that attribute contains the passed value within its limits (both ends are inclusive). The constraint can be used only for Range data type values. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/range#attribute-in-range) */
  attributeValidityInRange?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeValidityInSet?: InputMaybe<Array<Scalars['DateTimeRange']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeValidityIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeValidityLessThan?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeValidityLessThanEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeVisibilityBetween?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute contains part of passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-contains) */
  attributeVisibilityContains?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute ends with passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-ends-with) */
  attributeVisibilityEndsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeVisibilityEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeVisibilityGreaterThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeVisibilityGreaterThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeVisibilityInSet?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeVisibilityIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeVisibilityLessThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeVisibilityLessThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attributes starts with passed text. (case-sensitive) [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-starts-with) */
  attributeVisibilityStartsWith?: InputMaybe<Scalars['String']['input']>;
  /** The constraint if at least one of entity locales (derived from entity attributes or associated data) equals to the passed one. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/locale#entity-locale-equals) */
  entityLocaleEquals?: InputMaybe<CatalogLocale>;
  /** The constraint checks if primary key of the entity equals to at least one of the passed values. The constraint is equivalent to one or more `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/constant#entity-primary-key-in-set) */
  entityPrimaryKeyInSet?: InputMaybe<Array<Scalars['Int']['input']>>;
  /** The container that behaves as [logical NOT](https://en.wikipedia.org/wiki/Negation) for the inner constraint. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/logical#not) */
  not?: InputMaybe<FilterContainer3ff4be886c39a0e>;
  /** The container that combines inner constraints with [logical OR](https://en.wikipedia.org/wiki/Logical_disjunction). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/logical#or) */
  or?: InputMaybe<Array<FilterContainer3ff4be886c39a0e>>;
  /** The constraint checks if entity has price for sale within the passed range of prices (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/price#price-between) */
  priceBetween?: InputMaybe<Array<InputMaybe<Scalars['BigDecimal']['input']>>>;
  /** The constraint filters out all entities that lack selling price in specified currency. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/price#price-in-currency) */
  priceInCurrency?: InputMaybe<CatalogCurrency>;
  /** The constraint filters out all entities that lack selling price in specified price lists. Order of price lists also defines priority for selecting the entity selling price - the price from first price list in the list will be used as a selling price for the entire entity. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/price#price-in-price-lists) */
  priceInPriceLists?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint checks if entity has selling price valid at the passed moment. [Check detailed documentation](https://evitadb.io/documentation/filtering/price#price-valid-in) */
  priceValidIn?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** The constraint checks if entity has selling price valid at the passed moment. [Check detailed documentation](https://evitadb.io/documentation/filtering/price#price-valid-in) */
  priceValidInNow?: InputMaybe<Scalars['Boolean']['input']>;
  /** The container allowing to filter entities by having references to entities managed by evitaDB that match the inner filter constraint. This container resembles the SQL inner join clauses. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/references#reference-having) */
  referenceRestrictedShippingMethodsHaving?: InputMaybe<Array<FilterContainer114b400452e41fc1>>;
  /** The container for constraints that are controlled by the user (client UI widgets). It is used mainly to distinguish between user constraint (refining the search) and program defined constraints (considered mandatory), when the extra results are computed. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/behavioral#user-filter) */
  userFilter?: InputMaybe<Array<FilterContainere360aa9b26ebf852>>;
};

export type FilterContainer4aed9dcb3b5a8033 = {
  /** The container that combines inner constraints with [logical AND](https://en.wikipedia.org/wiki/Logical_conjunction). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/logical#and) */
  and?: InputMaybe<Array<FilterContainer4aed9dcb3b5a8033>>;
  /** The container allowing to filter entities by having references to entities managed by evitaDB that match inner filtering constraints. This container resembles the SQL inner join clauses where the `entityHaving`contains the filtering condition on particular join. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/references#entity-having) */
  entityHaving?: InputMaybe<FilterContainer967c71ead6465215>;
  /** The constraint checks if primary key of the entity equals to at least one of the passed values. The constraint is equivalent to one or more `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/constant#entity-primary-key-in-set) */
  entityPrimaryKeyInSet?: InputMaybe<Array<Scalars['Int']['input']>>;
  /** The container that behaves as [logical NOT](https://en.wikipedia.org/wiki/Negation) for the inner constraint. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/logical#not) */
  not?: InputMaybe<FilterContainer4aed9dcb3b5a8033>;
  /** The container that combines inner constraints with [logical OR](https://en.wikipedia.org/wiki/Logical_disjunction). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/logical#or) */
  or?: InputMaybe<Array<FilterContainer4aed9dcb3b5a8033>>;
};

export type FilterContainer7c02d16043ca92f = {
  /** The container that combines inner constraints with [logical AND](https://en.wikipedia.org/wiki/Logical_conjunction). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/logical#and) */
  and?: InputMaybe<Array<FilterContainer7c02d16043ca92f>>;
  /** The container allowing to filter entities by having references to entities managed by evitaDB that match inner filtering constraints. This container resembles the SQL inner join clauses where the `entityHaving`contains the filtering condition on particular join. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/references#entity-having) */
  entityHaving?: InputMaybe<FilterContainer967c71ead6465215>;
  /** The constraint checks if primary key of the entity equals to at least one of the passed values. The constraint is equivalent to one or more `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/constant#entity-primary-key-in-set) */
  entityPrimaryKeyInSet?: InputMaybe<Array<Scalars['Int']['input']>>;
  /** The container that behaves as [logical NOT](https://en.wikipedia.org/wiki/Negation) for the inner constraint. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/logical#not) */
  not?: InputMaybe<FilterContainer7c02d16043ca92f>;
  /** The container that combines inner constraints with [logical OR](https://en.wikipedia.org/wiki/Logical_disjunction). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/logical#or) */
  or?: InputMaybe<Array<FilterContainer7c02d16043ca92f>>;
};

export type FilterContainer8b8d18989520db5b = {
  /** The container that combines inner constraints with [logical AND](https://en.wikipedia.org/wiki/Logical_conjunction). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/logical#and) */
  and?: InputMaybe<Array<FilterContainer8b8d18989520db5b>>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeChangedBetween?: InputMaybe<Array<InputMaybe<Scalars['OffsetDateTime']['input']>>>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeChangedEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeChangedGreaterThan?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeChangedGreaterThanEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeChangedInSet?: InputMaybe<Array<Scalars['OffsetDateTime']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeChangedIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeChangedLessThan?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeChangedLessThanEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeCodeBetween?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute contains part of passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-contains) */
  attributeCodeContains?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute ends with passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-ends-with) */
  attributeCodeEndsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeCodeEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeCodeGreaterThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeCodeGreaterThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeCodeInSet?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeCodeIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeCodeLessThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeCodeLessThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attributes starts with passed text. (case-sensitive) [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-starts-with) */
  attributeCodeStartsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeNameBetween?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute contains part of passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-contains) */
  attributeNameContains?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute ends with passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-ends-with) */
  attributeNameEndsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeNameEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeNameGreaterThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeNameGreaterThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeNameInSet?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeNameIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeNameLessThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeNameLessThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attributes starts with passed text. (case-sensitive) [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-starts-with) */
  attributeNameStartsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributePublishedBetween?: InputMaybe<Array<InputMaybe<Scalars['OffsetDateTime']['input']>>>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributePublishedEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributePublishedGreaterThan?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributePublishedGreaterThanEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributePublishedInSet?: InputMaybe<Array<Scalars['OffsetDateTime']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributePublishedIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributePublishedLessThan?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributePublishedLessThanEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeStatusBetween?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute contains part of passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-contains) */
  attributeStatusContains?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute ends with passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-ends-with) */
  attributeStatusEndsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeStatusEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeStatusGreaterThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeStatusGreaterThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeStatusInSet?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeStatusIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeStatusLessThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeStatusLessThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attributes starts with passed text. (case-sensitive) [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-starts-with) */
  attributeStatusStartsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeUrlBetween?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute contains part of passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-contains) */
  attributeUrlContains?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute ends with passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-ends-with) */
  attributeUrlEndsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeUrlEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeUrlGreaterThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeUrlGreaterThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeUrlInSet?: InputMaybe<Array<Scalars['String']['input']>>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeUrlInactiveBetween?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute contains part of passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-contains) */
  attributeUrlInactiveContains?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute ends with passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-ends-with) */
  attributeUrlInactiveEndsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeUrlInactiveEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeUrlInactiveGreaterThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeUrlInactiveGreaterThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeUrlInactiveInSet?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeUrlInactiveIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeUrlInactiveLessThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeUrlInactiveLessThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attributes starts with passed text. (case-sensitive) [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-starts-with) */
  attributeUrlInactiveStartsWith?: InputMaybe<Scalars['String']['input']>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeUrlIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeUrlLessThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeUrlLessThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attributes starts with passed text. (case-sensitive) [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-starts-with) */
  attributeUrlStartsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeUsageConditionBetween?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute contains part of passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-contains) */
  attributeUsageConditionContains?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute ends with passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-ends-with) */
  attributeUsageConditionEndsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeUsageConditionEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeUsageConditionGreaterThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeUsageConditionGreaterThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeUsageConditionInSet?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeUsageConditionIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeUsageConditionLessThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeUsageConditionLessThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attributes starts with passed text. (case-sensitive) [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-starts-with) */
  attributeUsageConditionStartsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeValidityBetween?: InputMaybe<Array<InputMaybe<Scalars['OffsetDateTime']['input']>>>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeValidityEquals?: InputMaybe<Scalars['DateTimeRange']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeValidityGreaterThan?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeValidityGreaterThanEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the range value of that attribute contains the passed value within its limits (both ends are inclusive). The constraint can be used only for Range data type values. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/range#attribute-in-range) */
  attributeValidityInRange?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeValidityInSet?: InputMaybe<Array<Scalars['DateTimeRange']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeValidityIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeValidityLessThan?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeValidityLessThanEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** The constraint if at least one of entity locales (derived from entity attributes or associated data) equals to the passed one. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/locale#entity-locale-equals) */
  entityLocaleEquals?: InputMaybe<CatalogLocale>;
  /** The constraint checks if primary key of the entity equals to at least one of the passed values. The constraint is equivalent to one or more `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/constant#entity-primary-key-in-set) */
  entityPrimaryKeyInSet?: InputMaybe<Array<Scalars['Int']['input']>>;
  /** The container that behaves as [logical NOT](https://en.wikipedia.org/wiki/Negation) for the inner constraint. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/logical#not) */
  not?: InputMaybe<FilterContainer8b8d18989520db5b>;
  /** The container that combines inner constraints with [logical OR](https://en.wikipedia.org/wiki/Logical_disjunction). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/logical#or) */
  or?: InputMaybe<Array<FilterContainer8b8d18989520db5b>>;
  /** The container for constraints that are controlled by the user (client UI widgets). It is used mainly to distinguish between user constraint (refining the search) and program defined constraints (considered mandatory), when the extra results are computed. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/behavioral#user-filter) */
  userFilter?: InputMaybe<Array<FilterContainer8c6c3834a415e514>>;
};

export type FilterContainer8b3382e70149a029 = {
  /** The container that combines inner constraints with [logical AND](https://en.wikipedia.org/wiki/Logical_conjunction). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/logical#and) */
  and?: InputMaybe<Array<FilterContainer517d1d8ea5c4e742>>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeChangedBetween?: InputMaybe<Array<InputMaybe<Scalars['OffsetDateTime']['input']>>>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeChangedEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeChangedGreaterThan?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeChangedGreaterThanEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeChangedInSet?: InputMaybe<Array<Scalars['OffsetDateTime']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeChangedIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeChangedLessThan?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeChangedLessThanEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeCodeBetween?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute contains part of passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-contains) */
  attributeCodeContains?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute ends with passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-ends-with) */
  attributeCodeEndsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeCodeEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeCodeGreaterThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeCodeGreaterThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeCodeInSet?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeCodeIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeCodeLessThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeCodeLessThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attributes starts with passed text. (case-sensitive) [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-starts-with) */
  attributeCodeStartsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeNameBetween?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute contains part of passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-contains) */
  attributeNameContains?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute ends with passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-ends-with) */
  attributeNameEndsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeNameEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeNameGreaterThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeNameGreaterThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeNameInSet?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeNameIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeNameLessThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeNameLessThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attributes starts with passed text. (case-sensitive) [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-starts-with) */
  attributeNameStartsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributePublishedBetween?: InputMaybe<Array<InputMaybe<Scalars['OffsetDateTime']['input']>>>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributePublishedEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributePublishedGreaterThan?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributePublishedGreaterThanEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributePublishedInSet?: InputMaybe<Array<Scalars['OffsetDateTime']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributePublishedIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributePublishedLessThan?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributePublishedLessThanEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeStatusBetween?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute contains part of passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-contains) */
  attributeStatusContains?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute ends with passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-ends-with) */
  attributeStatusEndsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeStatusEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeStatusGreaterThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeStatusGreaterThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeStatusInSet?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeStatusIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeStatusLessThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeStatusLessThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attributes starts with passed text. (case-sensitive) [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-starts-with) */
  attributeStatusStartsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeUrlBetween?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute contains part of passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-contains) */
  attributeUrlContains?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute ends with passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-ends-with) */
  attributeUrlEndsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeUrlEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeUrlGreaterThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeUrlGreaterThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeUrlInSet?: InputMaybe<Array<Scalars['String']['input']>>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeUrlInactiveBetween?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute contains part of passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-contains) */
  attributeUrlInactiveContains?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute ends with passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-ends-with) */
  attributeUrlInactiveEndsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeUrlInactiveEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeUrlInactiveGreaterThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeUrlInactiveGreaterThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeUrlInactiveInSet?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeUrlInactiveIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeUrlInactiveLessThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeUrlInactiveLessThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attributes starts with passed text. (case-sensitive) [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-starts-with) */
  attributeUrlInactiveStartsWith?: InputMaybe<Scalars['String']['input']>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeUrlIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeUrlLessThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeUrlLessThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attributes starts with passed text. (case-sensitive) [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-starts-with) */
  attributeUrlStartsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeValidityBetween?: InputMaybe<Array<InputMaybe<Scalars['OffsetDateTime']['input']>>>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeValidityEquals?: InputMaybe<Scalars['DateTimeRange']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeValidityGreaterThan?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeValidityGreaterThanEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the range value of that attribute contains the passed value within its limits (both ends are inclusive). The constraint can be used only for Range data type values. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/range#attribute-in-range) */
  attributeValidityInRange?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeValidityInSet?: InputMaybe<Array<Scalars['DateTimeRange']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeValidityIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeValidityLessThan?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeValidityLessThanEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeVisibilityBetween?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute contains part of passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-contains) */
  attributeVisibilityContains?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute ends with passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-ends-with) */
  attributeVisibilityEndsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeVisibilityEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeVisibilityGreaterThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeVisibilityGreaterThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeVisibilityInSet?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeVisibilityIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeVisibilityLessThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeVisibilityLessThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attributes starts with passed text. (case-sensitive) [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-starts-with) */
  attributeVisibilityStartsWith?: InputMaybe<Scalars['String']['input']>;
  /** The constraint checks if primary key of the entity equals to at least one of the passed values. The constraint is equivalent to one or more `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/constant#entity-primary-key-in-set) */
  entityPrimaryKeyInSet?: InputMaybe<Array<Scalars['Int']['input']>>;
  /** The container allowing to filter entities by having references to entities managed by evitaDB that match the inner filter constraint. This container resembles the SQL inner join clauses and works in cooperation with facet summary requirement. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/references#facet-having) */
  facetTagsHaving?: InputMaybe<Array<FilterContainer1f0678ef1ed202e4>>;
  /** The container that behaves as [logical NOT](https://en.wikipedia.org/wiki/Negation) for the inner constraint. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/logical#not) */
  not?: InputMaybe<FilterContainer517d1d8ea5c4e742>;
  /** The container that combines inner constraints with [logical OR](https://en.wikipedia.org/wiki/Logical_disjunction). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/logical#or) */
  or?: InputMaybe<Array<FilterContainer517d1d8ea5c4e742>>;
};

export type FilterContainer8c6c3834a415e514 = {
  /** The container that combines inner constraints with [logical AND](https://en.wikipedia.org/wiki/Logical_conjunction). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/logical#and) */
  and?: InputMaybe<Array<FilterContainer8b8d18989520db5b>>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeChangedBetween?: InputMaybe<Array<InputMaybe<Scalars['OffsetDateTime']['input']>>>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeChangedEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeChangedGreaterThan?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeChangedGreaterThanEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeChangedInSet?: InputMaybe<Array<Scalars['OffsetDateTime']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeChangedIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeChangedLessThan?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeChangedLessThanEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeCodeBetween?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute contains part of passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-contains) */
  attributeCodeContains?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute ends with passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-ends-with) */
  attributeCodeEndsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeCodeEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeCodeGreaterThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeCodeGreaterThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeCodeInSet?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeCodeIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeCodeLessThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeCodeLessThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attributes starts with passed text. (case-sensitive) [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-starts-with) */
  attributeCodeStartsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeNameBetween?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute contains part of passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-contains) */
  attributeNameContains?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute ends with passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-ends-with) */
  attributeNameEndsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeNameEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeNameGreaterThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeNameGreaterThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeNameInSet?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeNameIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeNameLessThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeNameLessThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attributes starts with passed text. (case-sensitive) [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-starts-with) */
  attributeNameStartsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributePublishedBetween?: InputMaybe<Array<InputMaybe<Scalars['OffsetDateTime']['input']>>>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributePublishedEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributePublishedGreaterThan?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributePublishedGreaterThanEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributePublishedInSet?: InputMaybe<Array<Scalars['OffsetDateTime']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributePublishedIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributePublishedLessThan?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributePublishedLessThanEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeStatusBetween?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute contains part of passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-contains) */
  attributeStatusContains?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute ends with passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-ends-with) */
  attributeStatusEndsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeStatusEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeStatusGreaterThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeStatusGreaterThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeStatusInSet?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeStatusIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeStatusLessThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeStatusLessThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attributes starts with passed text. (case-sensitive) [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-starts-with) */
  attributeStatusStartsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeUrlBetween?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute contains part of passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-contains) */
  attributeUrlContains?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute ends with passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-ends-with) */
  attributeUrlEndsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeUrlEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeUrlGreaterThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeUrlGreaterThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeUrlInSet?: InputMaybe<Array<Scalars['String']['input']>>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeUrlInactiveBetween?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute contains part of passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-contains) */
  attributeUrlInactiveContains?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute ends with passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-ends-with) */
  attributeUrlInactiveEndsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeUrlInactiveEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeUrlInactiveGreaterThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeUrlInactiveGreaterThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeUrlInactiveInSet?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeUrlInactiveIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeUrlInactiveLessThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeUrlInactiveLessThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attributes starts with passed text. (case-sensitive) [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-starts-with) */
  attributeUrlInactiveStartsWith?: InputMaybe<Scalars['String']['input']>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeUrlIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeUrlLessThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeUrlLessThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attributes starts with passed text. (case-sensitive) [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-starts-with) */
  attributeUrlStartsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeUsageConditionBetween?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute contains part of passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-contains) */
  attributeUsageConditionContains?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute ends with passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-ends-with) */
  attributeUsageConditionEndsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeUsageConditionEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeUsageConditionGreaterThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeUsageConditionGreaterThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeUsageConditionInSet?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeUsageConditionIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeUsageConditionLessThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeUsageConditionLessThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attributes starts with passed text. (case-sensitive) [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-starts-with) */
  attributeUsageConditionStartsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeValidityBetween?: InputMaybe<Array<InputMaybe<Scalars['OffsetDateTime']['input']>>>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeValidityEquals?: InputMaybe<Scalars['DateTimeRange']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeValidityGreaterThan?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeValidityGreaterThanEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the range value of that attribute contains the passed value within its limits (both ends are inclusive). The constraint can be used only for Range data type values. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/range#attribute-in-range) */
  attributeValidityInRange?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeValidityInSet?: InputMaybe<Array<Scalars['DateTimeRange']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeValidityIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeValidityLessThan?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeValidityLessThanEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** The constraint checks if primary key of the entity equals to at least one of the passed values. The constraint is equivalent to one or more `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/constant#entity-primary-key-in-set) */
  entityPrimaryKeyInSet?: InputMaybe<Array<Scalars['Int']['input']>>;
  /** The container that behaves as [logical NOT](https://en.wikipedia.org/wiki/Negation) for the inner constraint. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/logical#not) */
  not?: InputMaybe<FilterContainer8b8d18989520db5b>;
  /** The container that combines inner constraints with [logical OR](https://en.wikipedia.org/wiki/Logical_disjunction). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/logical#or) */
  or?: InputMaybe<Array<FilterContainer8b8d18989520db5b>>;
};

export type FilterContainer8ca9770ee59185ab = {
  /** The container that combines inner constraints with [logical AND](https://en.wikipedia.org/wiki/Logical_conjunction). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/logical#and) */
  and?: InputMaybe<Array<FilterContainer21f42768fb89b5d4>>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeChangedBetween?: InputMaybe<Array<InputMaybe<Scalars['OffsetDateTime']['input']>>>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeChangedEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeChangedGreaterThan?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeChangedGreaterThanEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeChangedInSet?: InputMaybe<Array<Scalars['OffsetDateTime']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeChangedIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeChangedLessThan?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeChangedLessThanEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeCodeBetween?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute contains part of passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-contains) */
  attributeCodeContains?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute ends with passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-ends-with) */
  attributeCodeEndsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeCodeEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeCodeGreaterThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeCodeGreaterThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeCodeInSet?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeCodeIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeCodeLessThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeCodeLessThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attributes starts with passed text. (case-sensitive) [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-starts-with) */
  attributeCodeStartsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeNameBetween?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute contains part of passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-contains) */
  attributeNameContains?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute ends with passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-ends-with) */
  attributeNameEndsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeNameEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeNameGreaterThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeNameGreaterThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeNameInSet?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeNameIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeNameLessThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeNameLessThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attributes starts with passed text. (case-sensitive) [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-starts-with) */
  attributeNameStartsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributePickUpBranchMethodSelectBetween?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute contains part of passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-contains) */
  attributePickUpBranchMethodSelectContains?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute ends with passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-ends-with) */
  attributePickUpBranchMethodSelectEndsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributePickUpBranchMethodSelectEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributePickUpBranchMethodSelectGreaterThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributePickUpBranchMethodSelectGreaterThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributePickUpBranchMethodSelectInSet?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributePickUpBranchMethodSelectIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributePickUpBranchMethodSelectLessThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributePickUpBranchMethodSelectLessThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attributes starts with passed text. (case-sensitive) [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-starts-with) */
  attributePickUpBranchMethodSelectStartsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributePublishedBetween?: InputMaybe<Array<InputMaybe<Scalars['OffsetDateTime']['input']>>>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributePublishedEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributePublishedGreaterThan?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributePublishedGreaterThanEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributePublishedInSet?: InputMaybe<Array<Scalars['OffsetDateTime']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributePublishedIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributePublishedLessThan?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributePublishedLessThanEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeShippingTypeBetween?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute contains part of passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-contains) */
  attributeShippingTypeContains?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute ends with passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-ends-with) */
  attributeShippingTypeEndsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeShippingTypeEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeShippingTypeGreaterThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeShippingTypeGreaterThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeShippingTypeInSet?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeShippingTypeIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeShippingTypeLessThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeShippingTypeLessThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attributes starts with passed text. (case-sensitive) [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-starts-with) */
  attributeShippingTypeStartsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeStatusBetween?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute contains part of passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-contains) */
  attributeStatusContains?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute ends with passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-ends-with) */
  attributeStatusEndsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeStatusEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeStatusGreaterThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeStatusGreaterThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeStatusInSet?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeStatusIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeStatusLessThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeStatusLessThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attributes starts with passed text. (case-sensitive) [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-starts-with) */
  attributeStatusStartsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeUrlBetween?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute contains part of passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-contains) */
  attributeUrlContains?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute ends with passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-ends-with) */
  attributeUrlEndsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeUrlEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeUrlGreaterThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeUrlGreaterThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeUrlInSet?: InputMaybe<Array<Scalars['String']['input']>>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeUrlInactiveBetween?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute contains part of passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-contains) */
  attributeUrlInactiveContains?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute ends with passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-ends-with) */
  attributeUrlInactiveEndsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeUrlInactiveEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeUrlInactiveGreaterThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeUrlInactiveGreaterThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeUrlInactiveInSet?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeUrlInactiveIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeUrlInactiveLessThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeUrlInactiveLessThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attributes starts with passed text. (case-sensitive) [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-starts-with) */
  attributeUrlInactiveStartsWith?: InputMaybe<Scalars['String']['input']>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeUrlIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeUrlLessThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeUrlLessThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attributes starts with passed text. (case-sensitive) [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-starts-with) */
  attributeUrlStartsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeValidityBetween?: InputMaybe<Array<InputMaybe<Scalars['OffsetDateTime']['input']>>>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeValidityEquals?: InputMaybe<Scalars['DateTimeRange']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeValidityGreaterThan?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeValidityGreaterThanEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the range value of that attribute contains the passed value within its limits (both ends are inclusive). The constraint can be used only for Range data type values. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/range#attribute-in-range) */
  attributeValidityInRange?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeValidityInSet?: InputMaybe<Array<Scalars['DateTimeRange']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeValidityIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeValidityLessThan?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeValidityLessThanEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeVisibilityBetween?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute contains part of passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-contains) */
  attributeVisibilityContains?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute ends with passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-ends-with) */
  attributeVisibilityEndsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeVisibilityEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeVisibilityGreaterThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeVisibilityGreaterThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeVisibilityInSet?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeVisibilityIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeVisibilityLessThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeVisibilityLessThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attributes starts with passed text. (case-sensitive) [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-starts-with) */
  attributeVisibilityStartsWith?: InputMaybe<Scalars['String']['input']>;
  /** The constraint checks if primary key of the entity equals to at least one of the passed values. The constraint is equivalent to one or more `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/constant#entity-primary-key-in-set) */
  entityPrimaryKeyInSet?: InputMaybe<Array<Scalars['Int']['input']>>;
  /** The container allowing to filter entities by having references to entities managed by evitaDB that match the inner filter constraint. This container resembles the SQL inner join clauses and works in cooperation with facet summary requirement. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/references#facet-having) */
  facetTagsHaving?: InputMaybe<Array<FilterContainer8036eb0fa0d4b8bb>>;
  /** The container that behaves as [logical NOT](https://en.wikipedia.org/wiki/Negation) for the inner constraint. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/logical#not) */
  not?: InputMaybe<FilterContainer21f42768fb89b5d4>;
  /** The container that combines inner constraints with [logical OR](https://en.wikipedia.org/wiki/Logical_disjunction). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/logical#or) */
  or?: InputMaybe<Array<FilterContainer21f42768fb89b5d4>>;
  /** The constraint checks if entity has price for sale within the passed range of prices (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/price#price-between) */
  priceBetween?: InputMaybe<Array<InputMaybe<Scalars['BigDecimal']['input']>>>;
};

export type FilterContainer9d94254852a34cc4 = {
  /** The container that combines inner constraints with [logical AND](https://en.wikipedia.org/wiki/Logical_conjunction). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/logical#and) */
  and?: InputMaybe<Array<FilterContainerc183dce568fe08c7>>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeChangedBetween?: InputMaybe<Array<InputMaybe<Scalars['OffsetDateTime']['input']>>>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeChangedEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeChangedGreaterThan?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeChangedGreaterThanEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeChangedInSet?: InputMaybe<Array<Scalars['OffsetDateTime']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeChangedIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeChangedLessThan?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeChangedLessThanEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeCodeBetween?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute contains part of passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-contains) */
  attributeCodeContains?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute ends with passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-ends-with) */
  attributeCodeEndsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeCodeEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeCodeGreaterThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeCodeGreaterThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeCodeInSet?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeCodeIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeCodeLessThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeCodeLessThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attributes starts with passed text. (case-sensitive) [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-starts-with) */
  attributeCodeStartsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeNameBetween?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute contains part of passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-contains) */
  attributeNameContains?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute ends with passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-ends-with) */
  attributeNameEndsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeNameEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeNameGreaterThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeNameGreaterThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeNameInSet?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeNameIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeNameLessThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeNameLessThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attributes starts with passed text. (case-sensitive) [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-starts-with) */
  attributeNameStartsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributePublishedBetween?: InputMaybe<Array<InputMaybe<Scalars['OffsetDateTime']['input']>>>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributePublishedEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributePublishedGreaterThan?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributePublishedGreaterThanEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributePublishedInSet?: InputMaybe<Array<Scalars['OffsetDateTime']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributePublishedIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributePublishedLessThan?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributePublishedLessThanEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeStatusBetween?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute contains part of passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-contains) */
  attributeStatusContains?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute ends with passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-ends-with) */
  attributeStatusEndsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeStatusEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeStatusGreaterThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeStatusGreaterThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeStatusInSet?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeStatusIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeStatusLessThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeStatusLessThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attributes starts with passed text. (case-sensitive) [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-starts-with) */
  attributeStatusStartsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeUrlBetween?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute contains part of passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-contains) */
  attributeUrlContains?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute ends with passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-ends-with) */
  attributeUrlEndsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeUrlEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeUrlGreaterThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeUrlGreaterThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeUrlInSet?: InputMaybe<Array<Scalars['String']['input']>>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeUrlInactiveBetween?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute contains part of passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-contains) */
  attributeUrlInactiveContains?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute ends with passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-ends-with) */
  attributeUrlInactiveEndsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeUrlInactiveEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeUrlInactiveGreaterThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeUrlInactiveGreaterThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeUrlInactiveInSet?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeUrlInactiveIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeUrlInactiveLessThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeUrlInactiveLessThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attributes starts with passed text. (case-sensitive) [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-starts-with) */
  attributeUrlInactiveStartsWith?: InputMaybe<Scalars['String']['input']>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeUrlIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeUrlLessThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeUrlLessThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attributes starts with passed text. (case-sensitive) [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-starts-with) */
  attributeUrlStartsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeValidityBetween?: InputMaybe<Array<InputMaybe<Scalars['OffsetDateTime']['input']>>>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeValidityEquals?: InputMaybe<Scalars['DateTimeRange']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeValidityGreaterThan?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeValidityGreaterThanEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the range value of that attribute contains the passed value within its limits (both ends are inclusive). The constraint can be used only for Range data type values. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/range#attribute-in-range) */
  attributeValidityInRange?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeValidityInSet?: InputMaybe<Array<Scalars['DateTimeRange']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeValidityIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeValidityLessThan?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeValidityLessThanEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeVisibilityBetween?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute contains part of passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-contains) */
  attributeVisibilityContains?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute ends with passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-ends-with) */
  attributeVisibilityEndsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeVisibilityEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeVisibilityGreaterThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeVisibilityGreaterThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeVisibilityInSet?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeVisibilityIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeVisibilityLessThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeVisibilityLessThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attributes starts with passed text. (case-sensitive) [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-starts-with) */
  attributeVisibilityStartsWith?: InputMaybe<Scalars['String']['input']>;
  /** The constraint checks if primary key of the entity equals to at least one of the passed values. The constraint is equivalent to one or more `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/constant#entity-primary-key-in-set) */
  entityPrimaryKeyInSet?: InputMaybe<Array<Scalars['Int']['input']>>;
  /** The container allowing to filter entities by having references to entities managed by evitaDB that match the inner filter constraint. This container resembles the SQL inner join clauses and works in cooperation with facet summary requirement. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/references#facet-having) */
  facetTagsHaving?: InputMaybe<Array<FilterContainera8a85d9a060ac1e6>>;
  /** The container that behaves as [logical NOT](https://en.wikipedia.org/wiki/Negation) for the inner constraint. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/logical#not) */
  not?: InputMaybe<FilterContainerc183dce568fe08c7>;
  /** The container that combines inner constraints with [logical OR](https://en.wikipedia.org/wiki/Logical_disjunction). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/logical#or) */
  or?: InputMaybe<Array<FilterContainerc183dce568fe08c7>>;
};

export type FilterContainer9db3ee38192a376c = {
  /** The container that combines inner constraints with [logical AND](https://en.wikipedia.org/wiki/Logical_conjunction). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/logical#and) */
  and?: InputMaybe<Array<FilterContainerb29777b6620f8b8d>>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeChangedBetween?: InputMaybe<Array<InputMaybe<Scalars['OffsetDateTime']['input']>>>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeChangedEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeChangedGreaterThan?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeChangedGreaterThanEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeChangedInSet?: InputMaybe<Array<Scalars['OffsetDateTime']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeChangedIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeChangedLessThan?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeChangedLessThanEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeCodeBetween?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute contains part of passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-contains) */
  attributeCodeContains?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute ends with passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-ends-with) */
  attributeCodeEndsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeCodeEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeCodeGreaterThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeCodeGreaterThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeCodeInSet?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeCodeIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeCodeLessThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeCodeLessThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attributes starts with passed text. (case-sensitive) [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-starts-with) */
  attributeCodeStartsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeNameBetween?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute contains part of passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-contains) */
  attributeNameContains?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute ends with passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-ends-with) */
  attributeNameEndsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeNameEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeNameGreaterThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeNameGreaterThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeNameInSet?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeNameIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeNameLessThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeNameLessThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attributes starts with passed text. (case-sensitive) [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-starts-with) */
  attributeNameStartsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributePublishedBetween?: InputMaybe<Array<InputMaybe<Scalars['OffsetDateTime']['input']>>>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributePublishedEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributePublishedGreaterThan?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributePublishedGreaterThanEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributePublishedInSet?: InputMaybe<Array<Scalars['OffsetDateTime']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributePublishedIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributePublishedLessThan?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributePublishedLessThanEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeStatusBetween?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute contains part of passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-contains) */
  attributeStatusContains?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute ends with passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-ends-with) */
  attributeStatusEndsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeStatusEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeStatusGreaterThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeStatusGreaterThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeStatusInSet?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeStatusIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeStatusLessThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeStatusLessThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attributes starts with passed text. (case-sensitive) [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-starts-with) */
  attributeStatusStartsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeUrlBetween?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute contains part of passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-contains) */
  attributeUrlContains?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute ends with passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-ends-with) */
  attributeUrlEndsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeUrlEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeUrlGreaterThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeUrlGreaterThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeUrlInSet?: InputMaybe<Array<Scalars['String']['input']>>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeUrlInactiveBetween?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute contains part of passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-contains) */
  attributeUrlInactiveContains?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute ends with passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-ends-with) */
  attributeUrlInactiveEndsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeUrlInactiveEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeUrlInactiveGreaterThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeUrlInactiveGreaterThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeUrlInactiveInSet?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeUrlInactiveIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeUrlInactiveLessThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeUrlInactiveLessThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attributes starts with passed text. (case-sensitive) [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-starts-with) */
  attributeUrlInactiveStartsWith?: InputMaybe<Scalars['String']['input']>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeUrlIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeUrlLessThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeUrlLessThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attributes starts with passed text. (case-sensitive) [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-starts-with) */
  attributeUrlStartsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeUsageConditionBetween?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute contains part of passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-contains) */
  attributeUsageConditionContains?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute ends with passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-ends-with) */
  attributeUsageConditionEndsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeUsageConditionEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeUsageConditionGreaterThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeUsageConditionGreaterThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeUsageConditionInSet?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeUsageConditionIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeUsageConditionLessThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeUsageConditionLessThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attributes starts with passed text. (case-sensitive) [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-starts-with) */
  attributeUsageConditionStartsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeValidityBetween?: InputMaybe<Array<InputMaybe<Scalars['OffsetDateTime']['input']>>>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeValidityEquals?: InputMaybe<Scalars['DateTimeRange']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeValidityGreaterThan?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeValidityGreaterThanEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the range value of that attribute contains the passed value within its limits (both ends are inclusive). The constraint can be used only for Range data type values. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/range#attribute-in-range) */
  attributeValidityInRange?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeValidityInSet?: InputMaybe<Array<Scalars['DateTimeRange']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeValidityIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeValidityLessThan?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeValidityLessThanEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** The constraint checks if primary key of the entity equals to at least one of the passed values. The constraint is equivalent to one or more `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/constant#entity-primary-key-in-set) */
  entityPrimaryKeyInSet?: InputMaybe<Array<Scalars['Int']['input']>>;
  /** The container that behaves as [logical NOT](https://en.wikipedia.org/wiki/Negation) for the inner constraint. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/logical#not) */
  not?: InputMaybe<FilterContainerb29777b6620f8b8d>;
  /** The container that combines inner constraints with [logical OR](https://en.wikipedia.org/wiki/Logical_disjunction). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/logical#or) */
  or?: InputMaybe<Array<FilterContainerb29777b6620f8b8d>>;
};

export type FilterContainer9df8ecf165a46846 = {
  /** The container that combines inner constraints with [logical AND](https://en.wikipedia.org/wiki/Logical_conjunction). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/logical#and) */
  and?: InputMaybe<Array<FilterContainer9df8ecf165a46846>>;
  /** The container allowing to filter entities by having references to entities managed by evitaDB that match inner filtering constraints. This container resembles the SQL inner join clauses where the `entityHaving`contains the filtering condition on particular join. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/references#entity-having) */
  entityHaving?: InputMaybe<FilterContainer3ff4be886c39a0e>;
  /** The constraint checks if primary key of the entity equals to at least one of the passed values. The constraint is equivalent to one or more `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/constant#entity-primary-key-in-set) */
  entityPrimaryKeyInSet?: InputMaybe<Array<Scalars['Int']['input']>>;
  /** The container that behaves as [logical NOT](https://en.wikipedia.org/wiki/Negation) for the inner constraint. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/logical#not) */
  not?: InputMaybe<FilterContainer9df8ecf165a46846>;
  /** The container that combines inner constraints with [logical OR](https://en.wikipedia.org/wiki/Logical_disjunction). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/logical#or) */
  or?: InputMaybe<Array<FilterContainer9df8ecf165a46846>>;
};

export type FilterContainer13b6513537be4a96 = {
  /** The container that combines inner constraints with [logical AND](https://en.wikipedia.org/wiki/Logical_conjunction). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/logical#and) */
  and?: InputMaybe<Array<FilterContainer13b6513537be4a96>>;
  /** The container allowing to filter entities by having references to entities managed by evitaDB that match inner filtering constraints. This container resembles the SQL inner join clauses where the `entityHaving`contains the filtering condition on particular join. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/references#entity-having) */
  entityHaving?: InputMaybe<FilterContainer517d1d8ea5c4e742>;
  /** The constraint checks if primary key of the entity equals to at least one of the passed values. The constraint is equivalent to one or more `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/constant#entity-primary-key-in-set) */
  entityPrimaryKeyInSet?: InputMaybe<Array<Scalars['Int']['input']>>;
  /** The container that behaves as [logical NOT](https://en.wikipedia.org/wiki/Negation) for the inner constraint. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/logical#not) */
  not?: InputMaybe<FilterContainer13b6513537be4a96>;
  /** The container that combines inner constraints with [logical OR](https://en.wikipedia.org/wiki/Logical_disjunction). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/logical#or) */
  or?: InputMaybe<Array<FilterContainer13b6513537be4a96>>;
};

export type FilterContainer17d91b200f6104a3 = {
  /** The container that combines inner constraints with [logical AND](https://en.wikipedia.org/wiki/Logical_conjunction). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/logical#and) */
  and?: InputMaybe<Array<FilterContainer11895e8d40db8091>>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeChangedBetween?: InputMaybe<Array<InputMaybe<Scalars['OffsetDateTime']['input']>>>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeChangedEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeChangedGreaterThan?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeChangedGreaterThanEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeChangedInSet?: InputMaybe<Array<Scalars['OffsetDateTime']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeChangedIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeChangedLessThan?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeChangedLessThanEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeCodeBetween?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute contains part of passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-contains) */
  attributeCodeContains?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute ends with passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-ends-with) */
  attributeCodeEndsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeCodeEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeCodeGreaterThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeCodeGreaterThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeCodeInSet?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeCodeIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeCodeLessThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeCodeLessThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attributes starts with passed text. (case-sensitive) [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-starts-with) */
  attributeCodeStartsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeNameBetween?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute contains part of passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-contains) */
  attributeNameContains?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute ends with passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-ends-with) */
  attributeNameEndsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeNameEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeNameGreaterThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeNameGreaterThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeNameInSet?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeNameIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeNameLessThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeNameLessThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attributes starts with passed text. (case-sensitive) [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-starts-with) */
  attributeNameStartsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributePublishedBetween?: InputMaybe<Array<InputMaybe<Scalars['OffsetDateTime']['input']>>>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributePublishedEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributePublishedGreaterThan?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributePublishedGreaterThanEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributePublishedInSet?: InputMaybe<Array<Scalars['OffsetDateTime']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributePublishedIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributePublishedLessThan?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributePublishedLessThanEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeStatusBetween?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute contains part of passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-contains) */
  attributeStatusContains?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute ends with passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-ends-with) */
  attributeStatusEndsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeStatusEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeStatusGreaterThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeStatusGreaterThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeStatusInSet?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeStatusIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeStatusLessThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeStatusLessThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attributes starts with passed text. (case-sensitive) [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-starts-with) */
  attributeStatusStartsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeUrlBetween?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute contains part of passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-contains) */
  attributeUrlContains?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute ends with passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-ends-with) */
  attributeUrlEndsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeUrlEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeUrlGreaterThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeUrlGreaterThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeUrlInSet?: InputMaybe<Array<Scalars['String']['input']>>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeUrlInactiveBetween?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute contains part of passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-contains) */
  attributeUrlInactiveContains?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute ends with passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-ends-with) */
  attributeUrlInactiveEndsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeUrlInactiveEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeUrlInactiveGreaterThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeUrlInactiveGreaterThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeUrlInactiveInSet?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeUrlInactiveIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeUrlInactiveLessThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeUrlInactiveLessThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attributes starts with passed text. (case-sensitive) [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-starts-with) */
  attributeUrlInactiveStartsWith?: InputMaybe<Scalars['String']['input']>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeUrlIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeUrlLessThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeUrlLessThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attributes starts with passed text. (case-sensitive) [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-starts-with) */
  attributeUrlStartsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeValidityBetween?: InputMaybe<Array<InputMaybe<Scalars['OffsetDateTime']['input']>>>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeValidityEquals?: InputMaybe<Scalars['DateTimeRange']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeValidityGreaterThan?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeValidityGreaterThanEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the range value of that attribute contains the passed value within its limits (both ends are inclusive). The constraint can be used only for Range data type values. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/range#attribute-in-range) */
  attributeValidityInRange?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeValidityInSet?: InputMaybe<Array<Scalars['DateTimeRange']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeValidityIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeValidityLessThan?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeValidityLessThanEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeVisibilityBetween?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute contains part of passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-contains) */
  attributeVisibilityContains?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute ends with passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-ends-with) */
  attributeVisibilityEndsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeVisibilityEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeVisibilityGreaterThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeVisibilityGreaterThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeVisibilityInSet?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeVisibilityIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeVisibilityLessThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeVisibilityLessThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attributes starts with passed text. (case-sensitive) [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-starts-with) */
  attributeVisibilityStartsWith?: InputMaybe<Scalars['String']['input']>;
  /** The constraint checks if primary key of the entity equals to at least one of the passed values. The constraint is equivalent to one or more `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/constant#entity-primary-key-in-set) */
  entityPrimaryKeyInSet?: InputMaybe<Array<Scalars['Int']['input']>>;
  /** The container that behaves as [logical NOT](https://en.wikipedia.org/wiki/Negation) for the inner constraint. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/logical#not) */
  not?: InputMaybe<FilterContainer11895e8d40db8091>;
  /** The container that combines inner constraints with [logical OR](https://en.wikipedia.org/wiki/Logical_disjunction). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/logical#or) */
  or?: InputMaybe<Array<FilterContainer11895e8d40db8091>>;
};

export type FilterContainer18e363c46192dd8b = {
  /** The container that combines inner constraints with [logical AND](https://en.wikipedia.org/wiki/Logical_conjunction). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/logical#and) */
  and?: InputMaybe<Array<FilterContainer18e363c46192dd8b>>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeCategoryBetween?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute contains part of passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-contains) */
  attributeCategoryContains?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute ends with passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-ends-with) */
  attributeCategoryEndsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeCategoryEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeCategoryGreaterThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeCategoryGreaterThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeCategoryInSet?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeCategoryIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeCategoryLessThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeCategoryLessThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attributes starts with passed text. (case-sensitive) [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-starts-with) */
  attributeCategoryStartsWith?: InputMaybe<Scalars['String']['input']>;
  /** The container allowing to filter entities by having references to entities managed by evitaDB that match inner filtering constraints. This container resembles the SQL inner join clauses where the `entityHaving`contains the filtering condition on particular join. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/references#entity-having) */
  entityHaving?: InputMaybe<FilterContainer585fda0640662fe0>;
  /** The constraint checks if primary key of the entity equals to at least one of the passed values. The constraint is equivalent to one or more `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/constant#entity-primary-key-in-set) */
  entityPrimaryKeyInSet?: InputMaybe<Array<Scalars['Int']['input']>>;
  /** The container that behaves as [logical NOT](https://en.wikipedia.org/wiki/Negation) for the inner constraint. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/logical#not) */
  not?: InputMaybe<FilterContainer18e363c46192dd8b>;
  /** The container that combines inner constraints with [logical OR](https://en.wikipedia.org/wiki/Logical_disjunction). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/logical#or) */
  or?: InputMaybe<Array<FilterContainer18e363c46192dd8b>>;
};

export type FilterContainer21f42768fb89b5d4 = {
  /** The container that combines inner constraints with [logical AND](https://en.wikipedia.org/wiki/Logical_conjunction). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/logical#and) */
  and?: InputMaybe<Array<FilterContainer21f42768fb89b5d4>>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeChangedBetween?: InputMaybe<Array<InputMaybe<Scalars['OffsetDateTime']['input']>>>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeChangedEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeChangedGreaterThan?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeChangedGreaterThanEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeChangedInSet?: InputMaybe<Array<Scalars['OffsetDateTime']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeChangedIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeChangedLessThan?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeChangedLessThanEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeCodeBetween?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute contains part of passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-contains) */
  attributeCodeContains?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute ends with passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-ends-with) */
  attributeCodeEndsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeCodeEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeCodeGreaterThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeCodeGreaterThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeCodeInSet?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeCodeIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeCodeLessThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeCodeLessThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attributes starts with passed text. (case-sensitive) [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-starts-with) */
  attributeCodeStartsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeNameBetween?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute contains part of passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-contains) */
  attributeNameContains?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute ends with passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-ends-with) */
  attributeNameEndsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeNameEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeNameGreaterThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeNameGreaterThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeNameInSet?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeNameIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeNameLessThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeNameLessThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attributes starts with passed text. (case-sensitive) [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-starts-with) */
  attributeNameStartsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributePickUpBranchMethodSelectBetween?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute contains part of passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-contains) */
  attributePickUpBranchMethodSelectContains?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute ends with passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-ends-with) */
  attributePickUpBranchMethodSelectEndsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributePickUpBranchMethodSelectEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributePickUpBranchMethodSelectGreaterThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributePickUpBranchMethodSelectGreaterThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributePickUpBranchMethodSelectInSet?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributePickUpBranchMethodSelectIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributePickUpBranchMethodSelectLessThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributePickUpBranchMethodSelectLessThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attributes starts with passed text. (case-sensitive) [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-starts-with) */
  attributePickUpBranchMethodSelectStartsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributePublishedBetween?: InputMaybe<Array<InputMaybe<Scalars['OffsetDateTime']['input']>>>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributePublishedEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributePublishedGreaterThan?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributePublishedGreaterThanEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributePublishedInSet?: InputMaybe<Array<Scalars['OffsetDateTime']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributePublishedIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributePublishedLessThan?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributePublishedLessThanEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeShippingTypeBetween?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute contains part of passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-contains) */
  attributeShippingTypeContains?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute ends with passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-ends-with) */
  attributeShippingTypeEndsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeShippingTypeEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeShippingTypeGreaterThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeShippingTypeGreaterThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeShippingTypeInSet?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeShippingTypeIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeShippingTypeLessThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeShippingTypeLessThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attributes starts with passed text. (case-sensitive) [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-starts-with) */
  attributeShippingTypeStartsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeStatusBetween?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute contains part of passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-contains) */
  attributeStatusContains?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute ends with passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-ends-with) */
  attributeStatusEndsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeStatusEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeStatusGreaterThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeStatusGreaterThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeStatusInSet?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeStatusIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeStatusLessThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeStatusLessThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attributes starts with passed text. (case-sensitive) [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-starts-with) */
  attributeStatusStartsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeUrlBetween?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute contains part of passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-contains) */
  attributeUrlContains?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute ends with passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-ends-with) */
  attributeUrlEndsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeUrlEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeUrlGreaterThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeUrlGreaterThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeUrlInSet?: InputMaybe<Array<Scalars['String']['input']>>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeUrlInactiveBetween?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute contains part of passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-contains) */
  attributeUrlInactiveContains?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute ends with passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-ends-with) */
  attributeUrlInactiveEndsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeUrlInactiveEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeUrlInactiveGreaterThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeUrlInactiveGreaterThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeUrlInactiveInSet?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeUrlInactiveIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeUrlInactiveLessThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeUrlInactiveLessThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attributes starts with passed text. (case-sensitive) [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-starts-with) */
  attributeUrlInactiveStartsWith?: InputMaybe<Scalars['String']['input']>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeUrlIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeUrlLessThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeUrlLessThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attributes starts with passed text. (case-sensitive) [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-starts-with) */
  attributeUrlStartsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeValidityBetween?: InputMaybe<Array<InputMaybe<Scalars['OffsetDateTime']['input']>>>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeValidityEquals?: InputMaybe<Scalars['DateTimeRange']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeValidityGreaterThan?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeValidityGreaterThanEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the range value of that attribute contains the passed value within its limits (both ends are inclusive). The constraint can be used only for Range data type values. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/range#attribute-in-range) */
  attributeValidityInRange?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeValidityInSet?: InputMaybe<Array<Scalars['DateTimeRange']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeValidityIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeValidityLessThan?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeValidityLessThanEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeVisibilityBetween?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute contains part of passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-contains) */
  attributeVisibilityContains?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute ends with passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-ends-with) */
  attributeVisibilityEndsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeVisibilityEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeVisibilityGreaterThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeVisibilityGreaterThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeVisibilityInSet?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeVisibilityIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeVisibilityLessThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeVisibilityLessThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attributes starts with passed text. (case-sensitive) [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-starts-with) */
  attributeVisibilityStartsWith?: InputMaybe<Scalars['String']['input']>;
  /** The constraint if at least one of entity locales (derived from entity attributes or associated data) equals to the passed one. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/locale#entity-locale-equals) */
  entityLocaleEquals?: InputMaybe<CatalogLocale>;
  /** The constraint checks if primary key of the entity equals to at least one of the passed values. The constraint is equivalent to one or more `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/constant#entity-primary-key-in-set) */
  entityPrimaryKeyInSet?: InputMaybe<Array<Scalars['Int']['input']>>;
  /** The container allowing to filter entities by having references to entities managed by evitaDB that match the inner filter constraint. This container resembles the SQL inner join clauses and works in cooperation with facet summary requirement. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/references#facet-having) */
  facetTagsHaving?: InputMaybe<Array<FilterContainer8036eb0fa0d4b8bb>>;
  /** The container that behaves as [logical NOT](https://en.wikipedia.org/wiki/Negation) for the inner constraint. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/logical#not) */
  not?: InputMaybe<FilterContainer21f42768fb89b5d4>;
  /** The container that combines inner constraints with [logical OR](https://en.wikipedia.org/wiki/Logical_disjunction). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/logical#or) */
  or?: InputMaybe<Array<FilterContainer21f42768fb89b5d4>>;
  /** The constraint checks if entity has price for sale within the passed range of prices (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/price#price-between) */
  priceBetween?: InputMaybe<Array<InputMaybe<Scalars['BigDecimal']['input']>>>;
  /** The constraint filters out all entities that lack selling price in specified currency. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/price#price-in-currency) */
  priceInCurrency?: InputMaybe<CatalogCurrency>;
  /** The constraint filters out all entities that lack selling price in specified price lists. Order of price lists also defines priority for selecting the entity selling price - the price from first price list in the list will be used as a selling price for the entire entity. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/price#price-in-price-lists) */
  priceInPriceLists?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint checks if entity has selling price valid at the passed moment. [Check detailed documentation](https://evitadb.io/documentation/filtering/price#price-valid-in) */
  priceValidIn?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** The constraint checks if entity has selling price valid at the passed moment. [Check detailed documentation](https://evitadb.io/documentation/filtering/price#price-valid-in) */
  priceValidInNow?: InputMaybe<Scalars['Boolean']['input']>;
  /** The container allowing to filter entities by having references to entities managed by evitaDB that match the inner filter constraint. This container resembles the SQL inner join clauses. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/references#reference-having) */
  referenceCalculationTagsHaving?: InputMaybe<Array<FilterContainere9cd3f187046f5d6>>;
  /** The container allowing to filter entities by having references to entities managed by evitaDB that match the inner filter constraint. This container resembles the SQL inner join clauses. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/references#reference-having) */
  referenceRestrictedPaymentMethodsHaving?: InputMaybe<Array<FilterContainer9df8ecf165a46846>>;
  /** The container allowing to filter entities by having references to entities managed by evitaDB that match the inner filter constraint. This container resembles the SQL inner join clauses. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/references#reference-having) */
  referenceTagsHaving?: InputMaybe<Array<FilterContainer8036eb0fa0d4b8bb>>;
  /** The container for constraints that are controlled by the user (client UI widgets). It is used mainly to distinguish between user constraint (refining the search) and program defined constraints (considered mandatory), when the extra results are computed. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/behavioral#user-filter) */
  userFilter?: InputMaybe<Array<FilterContainer8ca9770ee59185ab>>;
};

export type FilterContainer21fbcdb63b6665fb = {
  /** The container that combines inner constraints with [logical AND](https://en.wikipedia.org/wiki/Logical_conjunction). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/logical#and) */
  and?: InputMaybe<Array<FilterContainer21fbcdb63b6665fb>>;
  /** The container allowing to filter entities by having references to entities managed by evitaDB that match inner filtering constraints. This container resembles the SQL inner join clauses where the `entityHaving`contains the filtering condition on particular join. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/references#entity-having) */
  entityHaving?: InputMaybe<FilterContainer3a2a9890a875d4bd>;
  /** The constraint checks if primary key of the entity equals to at least one of the passed values. The constraint is equivalent to one or more `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/constant#entity-primary-key-in-set) */
  entityPrimaryKeyInSet?: InputMaybe<Array<Scalars['Int']['input']>>;
  /** The container that behaves as [logical NOT](https://en.wikipedia.org/wiki/Negation) for the inner constraint. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/logical#not) */
  not?: InputMaybe<FilterContainer21fbcdb63b6665fb>;
  /** The container that combines inner constraints with [logical OR](https://en.wikipedia.org/wiki/Logical_disjunction). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/logical#or) */
  or?: InputMaybe<Array<FilterContainer21fbcdb63b6665fb>>;
};

export type FilterContainer25ca64b5a7fd295d = {
  /** The container that combines inner constraints with [logical AND](https://en.wikipedia.org/wiki/Logical_conjunction). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/logical#and) */
  and?: InputMaybe<Array<FilterContainer25ca64b5a7fd295d>>;
  /** The container allowing to filter entities by having references to entities managed by evitaDB that match inner filtering constraints. This container resembles the SQL inner join clauses where the `entityHaving`contains the filtering condition on particular join. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/references#entity-having) */
  entityHaving?: InputMaybe<FilterContainer585fda0640662fe0>;
  /** The constraint checks if primary key of the entity equals to at least one of the passed values. The constraint is equivalent to one or more `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/constant#entity-primary-key-in-set) */
  entityPrimaryKeyInSet?: InputMaybe<Array<Scalars['Int']['input']>>;
  /** The container that behaves as [logical NOT](https://en.wikipedia.org/wiki/Negation) for the inner constraint. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/logical#not) */
  not?: InputMaybe<FilterContainer25ca64b5a7fd295d>;
  /** The container that combines inner constraints with [logical OR](https://en.wikipedia.org/wiki/Logical_disjunction). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/logical#or) */
  or?: InputMaybe<Array<FilterContainer25ca64b5a7fd295d>>;
};

export type FilterContainer80acaa2de31d0173 = {
  /** The constraint limits hierarchy within parent constraint to take only directly related entities into an account. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/hierarchy#direct-relation) */
  directRelation?: InputMaybe<Scalars['Boolean']['input']>;
  /** The constraint narrows hierarchy within parent constraint to exclude specified hierarchy subtrees from search. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/hierarchy#excluding) */
  excluding?: InputMaybe<Array<FilterContainerf812d9f8dc0269a4>>;
  /** The constraint limits hierarchy within parent constraint to exclude the entities directly related to the searched root node. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/hierarchy#excluding-root) */
  excludingRoot?: InputMaybe<Scalars['Boolean']['input']>;
  /** The constraint narrows hierarchy within parent constraint to include specified hierarchy subtrees from search. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/hierarchy#having) */
  having?: InputMaybe<Array<FilterContainerf812d9f8dc0269a4>>;
};

export type FilterContainer84ed5a3faed889d8 = {
  /** The constraint limits hierarchy within parent constraint to take only directly related entities into an account. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/hierarchy#direct-relation) */
  directRelation?: InputMaybe<Scalars['Boolean']['input']>;
  /** The constraint narrows hierarchy within parent constraint to exclude specified hierarchy subtrees from search. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/hierarchy#excluding) */
  excluding?: InputMaybe<Array<FilterContainerf812d9f8dc0269a4>>;
  /** The constraint limits hierarchy within parent constraint to exclude the entities directly related to the searched root node. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/hierarchy#excluding-root) */
  excludingRoot?: InputMaybe<Scalars['Boolean']['input']>;
  /** The constraint narrows hierarchy within parent constraint to include specified hierarchy subtrees from search. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/hierarchy#having) */
  having?: InputMaybe<Array<FilterContainerf812d9f8dc0269a4>>;
};

export type FilterContainer85f4f936fdd44ff0 = {
  /** The container that combines inner constraints with [logical AND](https://en.wikipedia.org/wiki/Logical_conjunction). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/logical#and) */
  and?: InputMaybe<Array<FilterContainerd1ed0dd289b39bb5>>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeCardPaymentAllowedBetween?: InputMaybe<Array<InputMaybe<Scalars['Boolean']['input']>>>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeCardPaymentAllowedEquals?: InputMaybe<Scalars['Boolean']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeCardPaymentAllowedGreaterThan?: InputMaybe<Scalars['Boolean']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeCardPaymentAllowedGreaterThanEquals?: InputMaybe<Scalars['Boolean']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeCardPaymentAllowedInSet?: InputMaybe<Array<Scalars['Boolean']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeCardPaymentAllowedIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeCardPaymentAllowedLessThan?: InputMaybe<Scalars['Boolean']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeCardPaymentAllowedLessThanEquals?: InputMaybe<Scalars['Boolean']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeChangedBetween?: InputMaybe<Array<InputMaybe<Scalars['OffsetDateTime']['input']>>>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeChangedEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeChangedGreaterThan?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeChangedGreaterThanEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeChangedInSet?: InputMaybe<Array<Scalars['OffsetDateTime']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeChangedIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeChangedLessThan?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeChangedLessThanEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeCityBetween?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute contains part of passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-contains) */
  attributeCityContains?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute ends with passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-ends-with) */
  attributeCityEndsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeCityEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeCityGreaterThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeCityGreaterThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeCityInSet?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeCityIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeCityLessThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeCityLessThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeCityPartBetween?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute contains part of passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-contains) */
  attributeCityPartContains?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute ends with passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-ends-with) */
  attributeCityPartEndsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeCityPartEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeCityPartGreaterThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeCityPartGreaterThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeCityPartInSet?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeCityPartIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeCityPartLessThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeCityPartLessThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attributes starts with passed text. (case-sensitive) [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-starts-with) */
  attributeCityPartStartsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attributes starts with passed text. (case-sensitive) [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-starts-with) */
  attributeCityStartsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeCodeBetween?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute contains part of passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-contains) */
  attributeCodeContains?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute ends with passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-ends-with) */
  attributeCodeEndsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeCodeEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeCodeGreaterThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeCodeGreaterThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeCodeInSet?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeCodeIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeCodeLessThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeCodeLessThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attributes starts with passed text. (case-sensitive) [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-starts-with) */
  attributeCodeStartsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeCountryCodeBetween?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute contains part of passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-contains) */
  attributeCountryCodeContains?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute ends with passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-ends-with) */
  attributeCountryCodeEndsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeCountryCodeEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeCountryCodeGreaterThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeCountryCodeGreaterThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeCountryCodeInSet?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeCountryCodeIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeCountryCodeLessThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeCountryCodeLessThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attributes starts with passed text. (case-sensitive) [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-starts-with) */
  attributeCountryCodeStartsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeExternalCodeBetween?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute contains part of passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-contains) */
  attributeExternalCodeContains?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute ends with passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-ends-with) */
  attributeExternalCodeEndsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeExternalCodeEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeExternalCodeGreaterThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeExternalCodeGreaterThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeExternalCodeInSet?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeExternalCodeIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeExternalCodeLessThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeExternalCodeLessThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attributes starts with passed text. (case-sensitive) [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-starts-with) */
  attributeExternalCodeStartsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeLatitudeBetween?: InputMaybe<Array<InputMaybe<Scalars['BigDecimal']['input']>>>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeLatitudeEquals?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeLatitudeGreaterThan?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeLatitudeGreaterThanEquals?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeLatitudeInSet?: InputMaybe<Array<Scalars['BigDecimal']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeLatitudeIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeLatitudeLessThan?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeLatitudeLessThanEquals?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeLongitudeBetween?: InputMaybe<Array<InputMaybe<Scalars['BigDecimal']['input']>>>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeLongitudeEquals?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeLongitudeGreaterThan?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeLongitudeGreaterThanEquals?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeLongitudeInSet?: InputMaybe<Array<Scalars['BigDecimal']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeLongitudeIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeLongitudeLessThan?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeLongitudeLessThanEquals?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeNameBetween?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute contains part of passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-contains) */
  attributeNameContains?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute ends with passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-ends-with) */
  attributeNameEndsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeNameEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeNameGreaterThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeNameGreaterThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeNameInSet?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeNameIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeNameLessThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeNameLessThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attributes starts with passed text. (case-sensitive) [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-starts-with) */
  attributeNameStartsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributePostalCodeBetween?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute contains part of passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-contains) */
  attributePostalCodeContains?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute ends with passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-ends-with) */
  attributePostalCodeEndsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributePostalCodeEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributePostalCodeGreaterThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributePostalCodeGreaterThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributePostalCodeInSet?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributePostalCodeIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributePostalCodeLessThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributePostalCodeLessThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attributes starts with passed text. (case-sensitive) [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-starts-with) */
  attributePostalCodeStartsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributePublishedBetween?: InputMaybe<Array<InputMaybe<Scalars['OffsetDateTime']['input']>>>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributePublishedEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributePublishedGreaterThan?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributePublishedGreaterThanEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributePublishedInSet?: InputMaybe<Array<Scalars['OffsetDateTime']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributePublishedIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributePublishedLessThan?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributePublishedLessThanEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeShippingTypeBetween?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute contains part of passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-contains) */
  attributeShippingTypeContains?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute ends with passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-ends-with) */
  attributeShippingTypeEndsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeShippingTypeEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeShippingTypeGreaterThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeShippingTypeGreaterThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeShippingTypeInSet?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeShippingTypeIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeShippingTypeLessThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeShippingTypeLessThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attributes starts with passed text. (case-sensitive) [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-starts-with) */
  attributeShippingTypeStartsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeStatusBetween?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute contains part of passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-contains) */
  attributeStatusContains?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute ends with passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-ends-with) */
  attributeStatusEndsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeStatusEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeStatusGreaterThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeStatusGreaterThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeStatusInSet?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeStatusIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeStatusLessThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeStatusLessThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attributes starts with passed text. (case-sensitive) [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-starts-with) */
  attributeStatusStartsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeStreetBetween?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute contains part of passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-contains) */
  attributeStreetContains?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute ends with passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-ends-with) */
  attributeStreetEndsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeStreetEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeStreetGreaterThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeStreetGreaterThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeStreetInSet?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeStreetIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeStreetLessThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeStreetLessThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attributes starts with passed text. (case-sensitive) [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-starts-with) */
  attributeStreetStartsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeTypeBetween?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute contains part of passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-contains) */
  attributeTypeContains?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute ends with passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-ends-with) */
  attributeTypeEndsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeTypeEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeTypeGreaterThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeTypeGreaterThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeTypeInSet?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeTypeIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeTypeLessThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeTypeLessThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attributes starts with passed text. (case-sensitive) [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-starts-with) */
  attributeTypeStartsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeUrlBetween?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute contains part of passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-contains) */
  attributeUrlContains?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute ends with passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-ends-with) */
  attributeUrlEndsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeUrlEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeUrlGreaterThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeUrlGreaterThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeUrlInSet?: InputMaybe<Array<Scalars['String']['input']>>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeUrlInactiveBetween?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute contains part of passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-contains) */
  attributeUrlInactiveContains?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute ends with passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-ends-with) */
  attributeUrlInactiveEndsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeUrlInactiveEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeUrlInactiveGreaterThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeUrlInactiveGreaterThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeUrlInactiveInSet?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeUrlInactiveIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeUrlInactiveLessThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeUrlInactiveLessThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attributes starts with passed text. (case-sensitive) [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-starts-with) */
  attributeUrlInactiveStartsWith?: InputMaybe<Scalars['String']['input']>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeUrlIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeUrlLessThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeUrlLessThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attributes starts with passed text. (case-sensitive) [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-starts-with) */
  attributeUrlStartsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeValidityBetween?: InputMaybe<Array<InputMaybe<Scalars['OffsetDateTime']['input']>>>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeValidityEquals?: InputMaybe<Scalars['DateTimeRange']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeValidityGreaterThan?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeValidityGreaterThanEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the range value of that attribute contains the passed value within its limits (both ends are inclusive). The constraint can be used only for Range data type values. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/range#attribute-in-range) */
  attributeValidityInRange?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeValidityInSet?: InputMaybe<Array<Scalars['DateTimeRange']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeValidityIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeValidityLessThan?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeValidityLessThanEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeVisibilityBetween?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute contains part of passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-contains) */
  attributeVisibilityContains?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute ends with passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-ends-with) */
  attributeVisibilityEndsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeVisibilityEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeVisibilityGreaterThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeVisibilityGreaterThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeVisibilityInSet?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeVisibilityIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeVisibilityLessThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeVisibilityLessThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attributes starts with passed text. (case-sensitive) [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-starts-with) */
  attributeVisibilityStartsWith?: InputMaybe<Scalars['String']['input']>;
  /** The constraint checks if primary key of the entity equals to at least one of the passed values. The constraint is equivalent to one or more `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/constant#entity-primary-key-in-set) */
  entityPrimaryKeyInSet?: InputMaybe<Array<Scalars['Int']['input']>>;
  /** The container that behaves as [logical NOT](https://en.wikipedia.org/wiki/Negation) for the inner constraint. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/logical#not) */
  not?: InputMaybe<FilterContainerd1ed0dd289b39bb5>;
  /** The container that combines inner constraints with [logical OR](https://en.wikipedia.org/wiki/Logical_disjunction). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/logical#or) */
  or?: InputMaybe<Array<FilterContainerd1ed0dd289b39bb5>>;
};

export type FilterContainer86dfabccfd23aa32 = {
  /** The container that combines inner constraints with [logical AND](https://en.wikipedia.org/wiki/Logical_conjunction). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/logical#and) */
  and?: InputMaybe<Array<FilterContainer86dfabccfd23aa32>>;
  /** The container allowing to filter entities by having references to entities managed by evitaDB that match inner filtering constraints. This container resembles the SQL inner join clauses where the `entityHaving`contains the filtering condition on particular join. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/references#entity-having) */
  entityHaving?: InputMaybe<FilterContainerf812d9f8dc0269a4>;
  /** The constraint checks if primary key of the entity equals to at least one of the passed values. The constraint is equivalent to one or more `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/constant#entity-primary-key-in-set) */
  entityPrimaryKeyInSet?: InputMaybe<Array<Scalars['Int']['input']>>;
  /** The container that behaves as [logical NOT](https://en.wikipedia.org/wiki/Negation) for the inner constraint. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/logical#not) */
  not?: InputMaybe<FilterContainer86dfabccfd23aa32>;
  /** The container that combines inner constraints with [logical OR](https://en.wikipedia.org/wiki/Logical_disjunction). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/logical#or) */
  or?: InputMaybe<Array<FilterContainer86dfabccfd23aa32>>;
};

export type FilterContainer114b400452e41fc1 = {
  /** The container that combines inner constraints with [logical AND](https://en.wikipedia.org/wiki/Logical_conjunction). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/logical#and) */
  and?: InputMaybe<Array<FilterContainer114b400452e41fc1>>;
  /** The container allowing to filter entities by having references to entities managed by evitaDB that match inner filtering constraints. This container resembles the SQL inner join clauses where the `entityHaving`contains the filtering condition on particular join. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/references#entity-having) */
  entityHaving?: InputMaybe<FilterContainer21f42768fb89b5d4>;
  /** The constraint checks if primary key of the entity equals to at least one of the passed values. The constraint is equivalent to one or more `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/constant#entity-primary-key-in-set) */
  entityPrimaryKeyInSet?: InputMaybe<Array<Scalars['Int']['input']>>;
  /** The container that behaves as [logical NOT](https://en.wikipedia.org/wiki/Negation) for the inner constraint. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/logical#not) */
  not?: InputMaybe<FilterContainer114b400452e41fc1>;
  /** The container that combines inner constraints with [logical OR](https://en.wikipedia.org/wiki/Logical_disjunction). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/logical#or) */
  or?: InputMaybe<Array<FilterContainer114b400452e41fc1>>;
};

export type FilterContainer150edb03f6a8549a = {
  /** The container that combines inner constraints with [logical AND](https://en.wikipedia.org/wiki/Logical_conjunction). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/logical#and) */
  and?: InputMaybe<Array<FilterContainer150edb03f6a8549a>>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeChangedBetween?: InputMaybe<Array<InputMaybe<Scalars['OffsetDateTime']['input']>>>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeChangedEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeChangedGreaterThan?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeChangedGreaterThanEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeChangedInSet?: InputMaybe<Array<Scalars['OffsetDateTime']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeChangedIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeChangedLessThan?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeChangedLessThanEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeCodeBetween?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute contains part of passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-contains) */
  attributeCodeContains?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute ends with passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-ends-with) */
  attributeCodeEndsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeCodeEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeCodeGreaterThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeCodeGreaterThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeCodeInSet?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeCodeIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeCodeLessThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeCodeLessThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attributes starts with passed text. (case-sensitive) [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-starts-with) */
  attributeCodeStartsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeCurrencyBetween?: InputMaybe<Array<InputMaybe<Scalars['Currency']['input']>>>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeCurrencyEquals?: InputMaybe<Scalars['Currency']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeCurrencyGreaterThan?: InputMaybe<Scalars['Currency']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeCurrencyGreaterThanEquals?: InputMaybe<Scalars['Currency']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeCurrencyInSet?: InputMaybe<Array<Scalars['Currency']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeCurrencyIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeCurrencyLessThan?: InputMaybe<Scalars['Currency']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeCurrencyLessThanEquals?: InputMaybe<Scalars['Currency']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeNameBetween?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute contains part of passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-contains) */
  attributeNameContains?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute ends with passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-ends-with) */
  attributeNameEndsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeNameEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeNameGreaterThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeNameGreaterThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeNameInSet?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeNameIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeNameLessThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeNameLessThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attributes starts with passed text. (case-sensitive) [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-starts-with) */
  attributeNameStartsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributePublishedBetween?: InputMaybe<Array<InputMaybe<Scalars['OffsetDateTime']['input']>>>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributePublishedEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributePublishedGreaterThan?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributePublishedGreaterThanEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributePublishedInSet?: InputMaybe<Array<Scalars['OffsetDateTime']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributePublishedIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributePublishedLessThan?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributePublishedLessThanEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeStatusBetween?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute contains part of passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-contains) */
  attributeStatusContains?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute ends with passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-ends-with) */
  attributeStatusEndsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeStatusEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeStatusGreaterThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeStatusGreaterThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeStatusInSet?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeStatusIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeStatusLessThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeStatusLessThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attributes starts with passed text. (case-sensitive) [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-starts-with) */
  attributeStatusStartsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeUrlBetween?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute contains part of passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-contains) */
  attributeUrlContains?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute ends with passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-ends-with) */
  attributeUrlEndsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeUrlEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeUrlGreaterThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeUrlGreaterThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeUrlInSet?: InputMaybe<Array<Scalars['String']['input']>>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeUrlInactiveBetween?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute contains part of passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-contains) */
  attributeUrlInactiveContains?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute ends with passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-ends-with) */
  attributeUrlInactiveEndsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeUrlInactiveEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeUrlInactiveGreaterThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeUrlInactiveGreaterThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeUrlInactiveInSet?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeUrlInactiveIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeUrlInactiveLessThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeUrlInactiveLessThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attributes starts with passed text. (case-sensitive) [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-starts-with) */
  attributeUrlInactiveStartsWith?: InputMaybe<Scalars['String']['input']>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeUrlIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeUrlLessThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeUrlLessThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attributes starts with passed text. (case-sensitive) [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-starts-with) */
  attributeUrlStartsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeUsageConditionBetween?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute contains part of passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-contains) */
  attributeUsageConditionContains?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute ends with passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-ends-with) */
  attributeUsageConditionEndsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeUsageConditionEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeUsageConditionGreaterThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeUsageConditionGreaterThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeUsageConditionInSet?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeUsageConditionIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeUsageConditionLessThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeUsageConditionLessThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attributes starts with passed text. (case-sensitive) [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-starts-with) */
  attributeUsageConditionStartsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeValidityBetween?: InputMaybe<Array<InputMaybe<Scalars['OffsetDateTime']['input']>>>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeValidityEquals?: InputMaybe<Scalars['DateTimeRange']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeValidityGreaterThan?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeValidityGreaterThanEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the range value of that attribute contains the passed value within its limits (both ends are inclusive). The constraint can be used only for Range data type values. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/range#attribute-in-range) */
  attributeValidityInRange?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeValidityInSet?: InputMaybe<Array<Scalars['DateTimeRange']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeValidityIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeValidityLessThan?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeValidityLessThanEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeVisibleOnDetailBetween?: InputMaybe<Array<InputMaybe<Scalars['Boolean']['input']>>>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeVisibleOnDetailEquals?: InputMaybe<Scalars['Boolean']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeVisibleOnDetailGreaterThan?: InputMaybe<Scalars['Boolean']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeVisibleOnDetailGreaterThanEquals?: InputMaybe<Scalars['Boolean']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeVisibleOnDetailInSet?: InputMaybe<Array<Scalars['Boolean']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeVisibleOnDetailIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeVisibleOnDetailLessThan?: InputMaybe<Scalars['Boolean']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeVisibleOnDetailLessThanEquals?: InputMaybe<Scalars['Boolean']['input']>;
  /** The constraint if at least one of entity locales (derived from entity attributes or associated data) equals to the passed one. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/locale#entity-locale-equals) */
  entityLocaleEquals?: InputMaybe<CatalogLocale>;
  /** The constraint checks if primary key of the entity equals to at least one of the passed values. The constraint is equivalent to one or more `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/constant#entity-primary-key-in-set) */
  entityPrimaryKeyInSet?: InputMaybe<Array<Scalars['Int']['input']>>;
  /** The container that behaves as [logical NOT](https://en.wikipedia.org/wiki/Negation) for the inner constraint. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/logical#not) */
  not?: InputMaybe<FilterContainer150edb03f6a8549a>;
  /** The container that combines inner constraints with [logical OR](https://en.wikipedia.org/wiki/Logical_disjunction). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/logical#or) */
  or?: InputMaybe<Array<FilterContainer150edb03f6a8549a>>;
  /** The container allowing to filter entities by having references to entities managed by evitaDB that match the inner filter constraint. This container resembles the SQL inner join clauses. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/references#reference-having) */
  referenceBonusItemsHaving?: InputMaybe<Array<FilterContaineree87efab1fb06f>>;
  /** The container for constraints that are controlled by the user (client UI widgets). It is used mainly to distinguish between user constraint (refining the search) and program defined constraints (considered mandatory), when the extra results are computed. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/behavioral#user-filter) */
  userFilter?: InputMaybe<Array<FilterContainer39625b717408ab5f>>;
};

export type FilterContainer155ce1a8713f11f = {
  /** The container that combines inner constraints with [logical AND](https://en.wikipedia.org/wiki/Logical_conjunction). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/logical#and) */
  and?: InputMaybe<Array<FilterContainer155ce1a8713f11f>>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeVariantBetween?: InputMaybe<Array<InputMaybe<Scalars['Boolean']['input']>>>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeVariantEquals?: InputMaybe<Scalars['Boolean']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeVariantGreaterThan?: InputMaybe<Scalars['Boolean']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeVariantGreaterThanEquals?: InputMaybe<Scalars['Boolean']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeVariantInSet?: InputMaybe<Array<Scalars['Boolean']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeVariantIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeVariantLessThan?: InputMaybe<Scalars['Boolean']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeVariantLessThanEquals?: InputMaybe<Scalars['Boolean']['input']>;
  /** The container allowing to filter entities by having references to entities managed by evitaDB that match inner filtering constraints. This container resembles the SQL inner join clauses where the `entityHaving`contains the filtering condition on particular join. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/references#entity-having) */
  entityHaving?: InputMaybe<FilterContainer744027555f798cbb>;
  /** The constraint checks if primary key of the entity equals to at least one of the passed values. The constraint is equivalent to one or more `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/constant#entity-primary-key-in-set) */
  entityPrimaryKeyInSet?: InputMaybe<Array<Scalars['Int']['input']>>;
  /** The container that behaves as [logical NOT](https://en.wikipedia.org/wiki/Negation) for the inner constraint. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/logical#not) */
  not?: InputMaybe<FilterContainer155ce1a8713f11f>;
  /** The container that combines inner constraints with [logical OR](https://en.wikipedia.org/wiki/Logical_disjunction). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/logical#or) */
  or?: InputMaybe<Array<FilterContainer155ce1a8713f11f>>;
};

export type FilterContainer206bcd749d60c71d = {
  /** The constraint limits hierarchy within parent constraint to take only directly related entities into an account. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/hierarchy#direct-relation) */
  directRelation?: InputMaybe<Scalars['Boolean']['input']>;
  /** The constraint narrows hierarchy within parent constraint to exclude specified hierarchy subtrees from search. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/hierarchy#excluding) */
  excluding?: InputMaybe<Array<FilterContainerf812d9f8dc0269a4>>;
  /** The constraint limits hierarchy within parent constraint to exclude the entities directly related to the searched root node. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/hierarchy#excluding-root) */
  excludingRoot?: InputMaybe<Scalars['Boolean']['input']>;
  /** The constraint narrows hierarchy within parent constraint to include specified hierarchy subtrees from search. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/hierarchy#having) */
  having?: InputMaybe<Array<FilterContainerf812d9f8dc0269a4>>;
};

export type FilterContainer218d07b1e68074c9 = {
  /** The container that combines inner constraints with [logical AND](https://en.wikipedia.org/wiki/Logical_conjunction). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/logical#and) */
  and?: InputMaybe<Array<FilterContainer218d07b1e68074c9>>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeMinRequiredQuantityBetween?: InputMaybe<Array<InputMaybe<Scalars['BigDecimal']['input']>>>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeMinRequiredQuantityEquals?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeMinRequiredQuantityGreaterThan?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeMinRequiredQuantityGreaterThanEquals?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeMinRequiredQuantityInSet?: InputMaybe<Array<Scalars['BigDecimal']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeMinRequiredQuantityIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeMinRequiredQuantityLessThan?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeMinRequiredQuantityLessThanEquals?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeRequiredProductIdBetween?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeRequiredProductIdEquals?: InputMaybe<Scalars['Int']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeRequiredProductIdGreaterThan?: InputMaybe<Scalars['Int']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeRequiredProductIdGreaterThanEquals?: InputMaybe<Scalars['Int']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeRequiredProductIdInSet?: InputMaybe<Array<Scalars['Int']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeRequiredProductIdIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeRequiredProductIdLessThan?: InputMaybe<Scalars['Int']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeRequiredProductIdLessThanEquals?: InputMaybe<Scalars['Int']['input']>;
  /** The container allowing to filter entities by having references to entities managed by evitaDB that match inner filtering constraints. This container resembles the SQL inner join clauses where the `entityHaving`contains the filtering condition on particular join. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/references#entity-having) */
  entityHaving?: InputMaybe<FilterContainer150edb03f6a8549a>;
  /** The constraint checks if primary key of the entity equals to at least one of the passed values. The constraint is equivalent to one or more `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/constant#entity-primary-key-in-set) */
  entityPrimaryKeyInSet?: InputMaybe<Array<Scalars['Int']['input']>>;
  /** The container that behaves as [logical NOT](https://en.wikipedia.org/wiki/Negation) for the inner constraint. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/logical#not) */
  not?: InputMaybe<FilterContainer218d07b1e68074c9>;
  /** The container that combines inner constraints with [logical OR](https://en.wikipedia.org/wiki/Logical_disjunction). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/logical#or) */
  or?: InputMaybe<Array<FilterContainer218d07b1e68074c9>>;
};

export type FilterContainer231fb6d3716a4ce6 = {
  /** The container that combines inner constraints with [logical AND](https://en.wikipedia.org/wiki/Logical_conjunction). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/logical#and) */
  and?: InputMaybe<Array<FilterContainer585fda0640662fe0>>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeBatteryCapacityBetween?: InputMaybe<Array<InputMaybe<Scalars['BigDecimal']['input']>>>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeBatteryCapacityEquals?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeBatteryCapacityGreaterThan?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeBatteryCapacityGreaterThanEquals?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeBatteryCapacityInSet?: InputMaybe<Array<Scalars['BigDecimal']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeBatteryCapacityIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeBatteryCapacityLessThan?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeBatteryCapacityLessThanEquals?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeBatteryLifeBetween?: InputMaybe<Array<InputMaybe<Scalars['BigDecimal']['input']>>>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeBatteryLifeCaseBetween?: InputMaybe<Array<InputMaybe<Scalars['BigDecimal']['input']>>>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeBatteryLifeCaseEquals?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeBatteryLifeCaseGreaterThan?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeBatteryLifeCaseGreaterThanEquals?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeBatteryLifeCaseInSet?: InputMaybe<Array<Scalars['BigDecimal']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeBatteryLifeCaseIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeBatteryLifeCaseLessThan?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeBatteryLifeCaseLessThanEquals?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeBatteryLifeEquals?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeBatteryLifeGreaterThan?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeBatteryLifeGreaterThanEquals?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeBatteryLifeHeadsetBetween?: InputMaybe<Array<InputMaybe<Scalars['BigDecimal']['input']>>>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeBatteryLifeHeadsetEquals?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeBatteryLifeHeadsetGreaterThan?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeBatteryLifeHeadsetGreaterThanEquals?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeBatteryLifeHeadsetInSet?: InputMaybe<Array<Scalars['BigDecimal']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeBatteryLifeHeadsetIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeBatteryLifeHeadsetLessThan?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeBatteryLifeHeadsetLessThanEquals?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeBatteryLifeInSet?: InputMaybe<Array<Scalars['BigDecimal']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeBatteryLifeIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeBatteryLifeLessThan?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeBatteryLifeLessThanEquals?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeCatalogNumberBetween?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute contains part of passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-contains) */
  attributeCatalogNumberContains?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute ends with passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-ends-with) */
  attributeCatalogNumberEndsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeCatalogNumberEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeCatalogNumberGreaterThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeCatalogNumberGreaterThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeCatalogNumberInSet?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeCatalogNumberIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeCatalogNumberLessThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeCatalogNumberLessThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attributes starts with passed text. (case-sensitive) [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-starts-with) */
  attributeCatalogNumberStartsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeChangedBetween?: InputMaybe<Array<InputMaybe<Scalars['OffsetDateTime']['input']>>>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeChangedEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeChangedGreaterThan?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeChangedGreaterThanEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeChangedInSet?: InputMaybe<Array<Scalars['OffsetDateTime']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeChangedIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeChangedLessThan?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeChangedLessThanEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeCodeBetween?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute contains part of passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-contains) */
  attributeCodeContains?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute ends with passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-ends-with) */
  attributeCodeEndsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeCodeEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeCodeGreaterThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeCodeGreaterThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeCodeInSet?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeCodeIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeCodeLessThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeCodeLessThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeCodeShortBetween?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute contains part of passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-contains) */
  attributeCodeShortContains?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute ends with passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-ends-with) */
  attributeCodeShortEndsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeCodeShortEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeCodeShortGreaterThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeCodeShortGreaterThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeCodeShortInSet?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeCodeShortIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeCodeShortLessThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeCodeShortLessThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attributes starts with passed text. (case-sensitive) [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-starts-with) */
  attributeCodeShortStartsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attributes starts with passed text. (case-sensitive) [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-starts-with) */
  attributeCodeStartsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeConnectionLengthBetween?: InputMaybe<Array<InputMaybe<Scalars['BigDecimal']['input']>>>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeConnectionLengthEquals?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeConnectionLengthGreaterThan?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeConnectionLengthGreaterThanEquals?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeConnectionLengthInSet?: InputMaybe<Array<Scalars['BigDecimal']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeConnectionLengthIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeConnectionLengthLessThan?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeConnectionLengthLessThanEquals?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeCpuFrequencyBetween?: InputMaybe<Array<InputMaybe<Scalars['BigDecimal']['input']>>>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeCpuFrequencyEquals?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeCpuFrequencyGreaterThan?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeCpuFrequencyGreaterThanEquals?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeCpuFrequencyInSet?: InputMaybe<Array<Scalars['BigDecimal']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeCpuFrequencyIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeCpuFrequencyLessThan?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeCpuFrequencyLessThanEquals?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeDepthBetween?: InputMaybe<Array<InputMaybe<Scalars['BigDecimal']['input']>>>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeDepthEquals?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeDepthGreaterThan?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeDepthGreaterThanEquals?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeDepthInMmBetween?: InputMaybe<Array<InputMaybe<Scalars['BigDecimal']['input']>>>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeDepthInMmEquals?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeDepthInMmGreaterThan?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeDepthInMmGreaterThanEquals?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeDepthInMmInSet?: InputMaybe<Array<Scalars['BigDecimal']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeDepthInMmIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeDepthInMmLessThan?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeDepthInMmLessThanEquals?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeDepthInSet?: InputMaybe<Array<Scalars['BigDecimal']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeDepthIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeDepthLessThan?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeDepthLessThanEquals?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeDepthSourceAbetween?: InputMaybe<Array<InputMaybe<Scalars['BigDecimal']['input']>>>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeDepthSourceAequals?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeDepthSourceAgreaterThan?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeDepthSourceAgreaterThanEquals?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeDepthSourceAinSet?: InputMaybe<Array<Scalars['BigDecimal']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeDepthSourceAis?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeDepthSourceAlessThan?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeDepthSourceAlessThanEquals?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeDisplaySizeBetween?: InputMaybe<Array<InputMaybe<Scalars['BigDecimal']['input']>>>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeDisplaySizeEquals?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeDisplaySizeGreaterThan?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeDisplaySizeGreaterThanEquals?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeDisplaySizeInSet?: InputMaybe<Array<Scalars['BigDecimal']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeDisplaySizeIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeDisplaySizeLessThan?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeDisplaySizeLessThanEquals?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeEanBetween?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute contains part of passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-contains) */
  attributeEanContains?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute ends with passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-ends-with) */
  attributeEanEndsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeEanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeEanGreaterThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeEanGreaterThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeEanInSet?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeEanIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeEanLessThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeEanLessThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attributes starts with passed text. (case-sensitive) [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-starts-with) */
  attributeEanStartsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeFrequencyFromBetween?: InputMaybe<Array<InputMaybe<Scalars['BigDecimal']['input']>>>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeFrequencyFromEquals?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeFrequencyFromGreaterThan?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeFrequencyFromGreaterThanEquals?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeFrequencyFromInSet?: InputMaybe<Array<Scalars['BigDecimal']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeFrequencyFromIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeFrequencyFromLessThan?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeFrequencyFromLessThanEquals?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeFrequencyToBetween?: InputMaybe<Array<InputMaybe<Scalars['BigDecimal']['input']>>>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeFrequencyToEquals?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeFrequencyToGreaterThan?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeFrequencyToGreaterThanEquals?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeFrequencyToInSet?: InputMaybe<Array<Scalars['BigDecimal']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeFrequencyToIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeFrequencyToLessThan?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeFrequencyToLessThanEquals?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeFrontCameraResolutBetween?: InputMaybe<Array<InputMaybe<Scalars['BigDecimal']['input']>>>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeFrontCameraResolutEquals?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeFrontCameraResolutGreaterThan?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeFrontCameraResolutGreaterThanEquals?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeFrontCameraResolutInSet?: InputMaybe<Array<Scalars['BigDecimal']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeFrontCameraResolutIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeFrontCameraResolutLessThan?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeFrontCameraResolutLessThanEquals?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeHeightBetween?: InputMaybe<Array<InputMaybe<Scalars['BigDecimal']['input']>>>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeHeightEquals?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeHeightGreaterThan?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeHeightGreaterThanEquals?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeHeightInMmBetween?: InputMaybe<Array<InputMaybe<Scalars['BigDecimal']['input']>>>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeHeightInMmEquals?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeHeightInMmGreaterThan?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeHeightInMmGreaterThanEquals?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeHeightInMmInSet?: InputMaybe<Array<Scalars['BigDecimal']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeHeightInMmIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeHeightInMmLessThan?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeHeightInMmLessThanEquals?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeHeightInSet?: InputMaybe<Array<Scalars['BigDecimal']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeHeightIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeHeightLessThan?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeHeightLessThanEquals?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeHeightMergeBetween?: InputMaybe<Array<InputMaybe<Scalars['BigDecimal']['input']>>>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeHeightMergeEquals?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeHeightMergeGreaterThan?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeHeightMergeGreaterThanEquals?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeHeightMergeInSet?: InputMaybe<Array<Scalars['BigDecimal']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeHeightMergeIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeHeightMergeLessThan?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeHeightMergeLessThanEquals?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeHeightSourceAbetween?: InputMaybe<Array<InputMaybe<Scalars['BigDecimal']['input']>>>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeHeightSourceAequals?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeHeightSourceAgreaterThan?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeHeightSourceAgreaterThanEquals?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeHeightSourceAinSet?: InputMaybe<Array<Scalars['BigDecimal']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeHeightSourceAis?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeHeightSourceAlessThan?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeHeightSourceAlessThanEquals?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeIsBookAsSetBetween?: InputMaybe<Array<InputMaybe<Scalars['Boolean']['input']>>>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeIsBookAsSetEquals?: InputMaybe<Scalars['Boolean']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeIsBookAsSetGreaterThan?: InputMaybe<Scalars['Boolean']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeIsBookAsSetGreaterThanEquals?: InputMaybe<Scalars['Boolean']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeIsBookAsSetInSet?: InputMaybe<Array<Scalars['Boolean']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeIsBookAsSetIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeIsBookAsSetLessThan?: InputMaybe<Scalars['Boolean']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeIsBookAsSetLessThanEquals?: InputMaybe<Scalars['Boolean']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeLengthBetween?: InputMaybe<Array<InputMaybe<Scalars['BigDecimal']['input']>>>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeLengthEquals?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeLengthGreaterThan?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeLengthGreaterThanEquals?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeLengthInSet?: InputMaybe<Array<Scalars['BigDecimal']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeLengthIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeLengthLessThan?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeLengthLessThanEquals?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeNameBetween?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute contains part of passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-contains) */
  attributeNameContains?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute ends with passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-ends-with) */
  attributeNameEndsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeNameEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeNameGreaterThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeNameGreaterThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeNameInSet?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeNameIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeNameLessThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeNameLessThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attributes starts with passed text. (case-sensitive) [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-starts-with) */
  attributeNameStartsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeProductTypeBetween?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute contains part of passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-contains) */
  attributeProductTypeContains?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute ends with passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-ends-with) */
  attributeProductTypeEndsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeProductTypeEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeProductTypeGreaterThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeProductTypeGreaterThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeProductTypeInSet?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeProductTypeIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeProductTypeLessThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeProductTypeLessThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attributes starts with passed text. (case-sensitive) [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-starts-with) */
  attributeProductTypeStartsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributePublishedBetween?: InputMaybe<Array<InputMaybe<Scalars['OffsetDateTime']['input']>>>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributePublishedEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributePublishedGreaterThan?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributePublishedGreaterThanEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributePublishedInSet?: InputMaybe<Array<Scalars['OffsetDateTime']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributePublishedIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributePublishedLessThan?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributePublishedLessThanEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeRatingUsersBetween?: InputMaybe<Array<InputMaybe<Scalars['UUID']['input']>>>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeRatingUsersEquals?: InputMaybe<Scalars['UUID']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeRatingUsersGreaterThan?: InputMaybe<Scalars['UUID']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeRatingUsersGreaterThanEquals?: InputMaybe<Scalars['UUID']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeRatingUsersInSet?: InputMaybe<Array<Scalars['UUID']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeRatingUsersIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeRatingUsersLessThan?: InputMaybe<Scalars['UUID']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeRatingUsersLessThanEquals?: InputMaybe<Scalars['UUID']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeRearCameraResolutiBetween?: InputMaybe<Array<InputMaybe<Scalars['BigDecimal']['input']>>>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeRearCameraResolutiEquals?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeRearCameraResolutiGreaterThan?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeRearCameraResolutiGreaterThanEquals?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeRearCameraResolutiInSet?: InputMaybe<Array<Scalars['BigDecimal']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeRearCameraResolutiIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeRearCameraResolutiLessThan?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeRearCameraResolutiLessThanEquals?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeRefreshRateBetween?: InputMaybe<Array<InputMaybe<Scalars['BigDecimal']['input']>>>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeRefreshRateEquals?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeRefreshRateGreaterThan?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeRefreshRateGreaterThanEquals?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeRefreshRateInSet?: InputMaybe<Array<Scalars['BigDecimal']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeRefreshRateIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeRefreshRateLessThan?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeRefreshRateLessThanEquals?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeResponseTimeBetween?: InputMaybe<Array<InputMaybe<Scalars['BigDecimal']['input']>>>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeResponseTimeEquals?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeResponseTimeGreaterThan?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeResponseTimeGreaterThanEquals?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeResponseTimeInSet?: InputMaybe<Array<Scalars['BigDecimal']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeResponseTimeIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeResponseTimeLessThan?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeResponseTimeLessThanEquals?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeSnrBetween?: InputMaybe<Array<InputMaybe<Scalars['BigDecimal']['input']>>>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeSnrEquals?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeSnrGreaterThan?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeSnrGreaterThanEquals?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeSnrInSet?: InputMaybe<Array<Scalars['BigDecimal']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeSnrIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeSnrLessThan?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeSnrLessThanEquals?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeStatusBetween?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute contains part of passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-contains) */
  attributeStatusContains?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute ends with passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-ends-with) */
  attributeStatusEndsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeStatusEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeStatusGreaterThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeStatusGreaterThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeStatusInSet?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeStatusIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeStatusLessThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeStatusLessThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attributes starts with passed text. (case-sensitive) [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-starts-with) */
  attributeStatusStartsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeSupplierCodeBetween?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute contains part of passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-contains) */
  attributeSupplierCodeContains?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute ends with passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-ends-with) */
  attributeSupplierCodeEndsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeSupplierCodeEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeSupplierCodeGreaterThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeSupplierCodeGreaterThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeSupplierCodeInSet?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeSupplierCodeIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeSupplierCodeLessThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeSupplierCodeLessThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attributes starts with passed text. (case-sensitive) [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-starts-with) */
  attributeSupplierCodeStartsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeThicknessBetween?: InputMaybe<Array<InputMaybe<Scalars['BigDecimal']['input']>>>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeThicknessEquals?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeThicknessGreaterThan?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeThicknessGreaterThanEquals?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeThicknessInSet?: InputMaybe<Array<Scalars['BigDecimal']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeThicknessIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeThicknessLessThan?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeThicknessLessThanEquals?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeTotalBatteryLifeBetween?: InputMaybe<Array<InputMaybe<Scalars['BigDecimal']['input']>>>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeTotalBatteryLifeEquals?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeTotalBatteryLifeGreaterThan?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeTotalBatteryLifeGreaterThanEquals?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeTotalBatteryLifeInSet?: InputMaybe<Array<Scalars['BigDecimal']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeTotalBatteryLifeIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeTotalBatteryLifeLessThan?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeTotalBatteryLifeLessThanEquals?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeTotalPerformanceSetBetween?: InputMaybe<Array<InputMaybe<Scalars['BigDecimal']['input']>>>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeTotalPerformanceSetEquals?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeTotalPerformanceSetGreaterThan?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeTotalPerformanceSetGreaterThanEquals?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeTotalPerformanceSetInSet?: InputMaybe<Array<Scalars['BigDecimal']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeTotalPerformanceSetIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeTotalPerformanceSetLessThan?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeTotalPerformanceSetLessThanEquals?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeTotalWeightBetween?: InputMaybe<Array<InputMaybe<Scalars['BigDecimal']['input']>>>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeTotalWeightEquals?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeTotalWeightGreaterThan?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeTotalWeightGreaterThanEquals?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeTotalWeightInSet?: InputMaybe<Array<Scalars['BigDecimal']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeTotalWeightIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeTotalWeightLessThan?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeTotalWeightLessThanEquals?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeUrlBetween?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute contains part of passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-contains) */
  attributeUrlContains?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute ends with passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-ends-with) */
  attributeUrlEndsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeUrlEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeUrlGreaterThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeUrlGreaterThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeUrlInSet?: InputMaybe<Array<Scalars['String']['input']>>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeUrlInactiveBetween?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute contains part of passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-contains) */
  attributeUrlInactiveContains?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute ends with passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-ends-with) */
  attributeUrlInactiveEndsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeUrlInactiveEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeUrlInactiveGreaterThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeUrlInactiveGreaterThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeUrlInactiveInSet?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeUrlInactiveIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeUrlInactiveLessThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeUrlInactiveLessThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attributes starts with passed text. (case-sensitive) [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-starts-with) */
  attributeUrlInactiveStartsWith?: InputMaybe<Scalars['String']['input']>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeUrlIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeUrlLessThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeUrlLessThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attributes starts with passed text. (case-sensitive) [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-starts-with) */
  attributeUrlStartsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeValidityBetween?: InputMaybe<Array<InputMaybe<Scalars['OffsetDateTime']['input']>>>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeValidityEquals?: InputMaybe<Scalars['DateTimeRange']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeValidityGreaterThan?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeValidityGreaterThanEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the range value of that attribute contains the passed value within its limits (both ends are inclusive). The constraint can be used only for Range data type values. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/range#attribute-in-range) */
  attributeValidityInRange?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeValidityInSet?: InputMaybe<Array<Scalars['DateTimeRange']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeValidityIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeValidityLessThan?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeValidityLessThanEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeWeightBetween?: InputMaybe<Array<InputMaybe<Scalars['BigDecimal']['input']>>>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeWeightEquals?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeWeightGreaterThan?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeWeightGreaterThanEquals?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeWeightInKgBetween?: InputMaybe<Array<InputMaybe<Scalars['BigDecimal']['input']>>>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeWeightInKgEquals?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeWeightInKgGreaterThan?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeWeightInKgGreaterThanEquals?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeWeightInKgInSet?: InputMaybe<Array<Scalars['BigDecimal']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeWeightInKgIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeWeightInKgLessThan?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeWeightInKgLessThanEquals?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeWeightInSet?: InputMaybe<Array<Scalars['BigDecimal']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeWeightIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeWeightLessThan?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeWeightLessThanEquals?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeWeightMergeBetween?: InputMaybe<Array<InputMaybe<Scalars['BigDecimal']['input']>>>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeWeightMergeEquals?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeWeightMergeGreaterThan?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeWeightMergeGreaterThanEquals?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeWeightMergeInSet?: InputMaybe<Array<Scalars['BigDecimal']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeWeightMergeIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeWeightMergeLessThan?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeWeightMergeLessThanEquals?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeWeightSourceAbetween?: InputMaybe<Array<InputMaybe<Scalars['BigDecimal']['input']>>>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeWeightSourceAequals?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeWeightSourceAgreaterThan?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeWeightSourceAgreaterThanEquals?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeWeightSourceAinSet?: InputMaybe<Array<Scalars['BigDecimal']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeWeightSourceAis?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeWeightSourceAlessThan?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeWeightSourceAlessThanEquals?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeWidthBetween?: InputMaybe<Array<InputMaybe<Scalars['BigDecimal']['input']>>>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeWidthEquals?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeWidthGreaterThan?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeWidthGreaterThanEquals?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeWidthInMmBetween?: InputMaybe<Array<InputMaybe<Scalars['BigDecimal']['input']>>>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeWidthInMmEquals?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeWidthInMmGreaterThan?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeWidthInMmGreaterThanEquals?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeWidthInMmInSet?: InputMaybe<Array<Scalars['BigDecimal']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeWidthInMmIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeWidthInMmLessThan?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeWidthInMmLessThanEquals?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeWidthInSet?: InputMaybe<Array<Scalars['BigDecimal']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeWidthIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeWidthLessThan?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeWidthLessThanEquals?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeWidthMergeBetween?: InputMaybe<Array<InputMaybe<Scalars['BigDecimal']['input']>>>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeWidthMergeEquals?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeWidthMergeGreaterThan?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeWidthMergeGreaterThanEquals?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeWidthMergeInSet?: InputMaybe<Array<Scalars['BigDecimal']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeWidthMergeIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeWidthMergeLessThan?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeWidthMergeLessThanEquals?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeWidthSourceAbetween?: InputMaybe<Array<InputMaybe<Scalars['BigDecimal']['input']>>>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeWidthSourceAequals?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeWidthSourceAgreaterThan?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeWidthSourceAgreaterThanEquals?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeWidthSourceAinSet?: InputMaybe<Array<Scalars['BigDecimal']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeWidthSourceAis?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeWidthSourceAlessThan?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeWidthSourceAlessThanEquals?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** The constraint checks if primary key of the entity equals to at least one of the passed values. The constraint is equivalent to one or more `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/constant#entity-primary-key-in-set) */
  entityPrimaryKeyInSet?: InputMaybe<Array<Scalars['Int']['input']>>;
  /** The container allowing to filter entities by having references to entities managed by evitaDB that match the inner filter constraint. This container resembles the SQL inner join clauses and works in cooperation with facet summary requirement. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/references#facet-having) */
  facetBrandHaving?: InputMaybe<Array<FilterContainer13b6513537be4a96>>;
  /** The container allowing to filter entities by having references to entities managed by evitaDB that match the inner filter constraint. This container resembles the SQL inner join clauses and works in cooperation with facet summary requirement. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/references#facet-having) */
  facetCategoriesHaving?: InputMaybe<Array<FilterContainerd7c10f54d105b2f6>>;
  /** The container allowing to filter entities by having references to entities managed by evitaDB that match the inner filter constraint. This container resembles the SQL inner join clauses and works in cooperation with facet summary requirement. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/references#facet-having) */
  facetGroupsHaving?: InputMaybe<Array<FilterContainer1623f55fb0c57182>>;
  /** The container allowing to filter entities by having references to entities managed by evitaDB that match the inner filter constraint. This container resembles the SQL inner join clauses and works in cooperation with facet summary requirement. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/references#facet-having) */
  facetParameterValuesHaving?: InputMaybe<Array<FilterContainere3982a3d02ff904d>>;
  /** The container allowing to filter entities by having references to entities managed by evitaDB that match the inner filter constraint. This container resembles the SQL inner join clauses and works in cooperation with facet summary requirement. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/references#facet-having) */
  facetStocksHaving?: InputMaybe<Array<FilterContainer3e7971791f10624>>;
  /** The container allowing to filter entities by having references to entities managed by evitaDB that match the inner filter constraint. This container resembles the SQL inner join clauses and works in cooperation with facet summary requirement. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/references#facet-having) */
  facetTagsHaving?: InputMaybe<Array<FilterContainer7c02d16043ca92f>>;
  /** The container allowing to filter entities by having references to entities managed by evitaDB that match the inner filter constraint. This container resembles the SQL inner join clauses and works in cooperation with facet summary requirement. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/references#facet-having) */
  facetVariantParametersHaving?: InputMaybe<Array<FilterContainerf8ed17494a215fd4>>;
  /** The container that behaves as [logical NOT](https://en.wikipedia.org/wiki/Negation) for the inner constraint. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/logical#not) */
  not?: InputMaybe<FilterContainer585fda0640662fe0>;
  /** The container that combines inner constraints with [logical OR](https://en.wikipedia.org/wiki/Logical_disjunction). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/logical#or) */
  or?: InputMaybe<Array<FilterContainer585fda0640662fe0>>;
  /** The constraint checks if entity has price for sale within the passed range of prices (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/price#price-between) */
  priceBetween?: InputMaybe<Array<InputMaybe<Scalars['BigDecimal']['input']>>>;
};

export type FilterContainer393f9b1899cbf3ee = {
  /** The container that combines inner constraints with [logical AND](https://en.wikipedia.org/wiki/Logical_conjunction). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/logical#and) */
  and?: InputMaybe<Array<FilterContainer744027555f798cbb>>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeChangedBetween?: InputMaybe<Array<InputMaybe<Scalars['OffsetDateTime']['input']>>>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeChangedEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeChangedGreaterThan?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeChangedGreaterThanEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeChangedInSet?: InputMaybe<Array<Scalars['OffsetDateTime']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeChangedIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeChangedLessThan?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeChangedLessThanEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeCodeBetween?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute contains part of passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-contains) */
  attributeCodeContains?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute ends with passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-ends-with) */
  attributeCodeEndsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeCodeEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeCodeGreaterThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeCodeGreaterThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeCodeInSet?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeCodeIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeCodeLessThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeCodeLessThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attributes starts with passed text. (case-sensitive) [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-starts-with) */
  attributeCodeStartsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeNameBetween?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute contains part of passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-contains) */
  attributeNameContains?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute ends with passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-ends-with) */
  attributeNameEndsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeNameEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeNameGreaterThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeNameGreaterThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeNameInSet?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeNameIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeNameLessThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeNameLessThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attributes starts with passed text. (case-sensitive) [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-starts-with) */
  attributeNameStartsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributePublishedBetween?: InputMaybe<Array<InputMaybe<Scalars['OffsetDateTime']['input']>>>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributePublishedEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributePublishedGreaterThan?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributePublishedGreaterThanEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributePublishedInSet?: InputMaybe<Array<Scalars['OffsetDateTime']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributePublishedIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributePublishedLessThan?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributePublishedLessThanEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeStatusBetween?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute contains part of passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-contains) */
  attributeStatusContains?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute ends with passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-ends-with) */
  attributeStatusEndsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeStatusEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeStatusGreaterThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeStatusGreaterThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeStatusInSet?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeStatusIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeStatusLessThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeStatusLessThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attributes starts with passed text. (case-sensitive) [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-starts-with) */
  attributeStatusStartsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeUrlBetween?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute contains part of passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-contains) */
  attributeUrlContains?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute ends with passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-ends-with) */
  attributeUrlEndsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeUrlEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeUrlGreaterThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeUrlGreaterThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeUrlInSet?: InputMaybe<Array<Scalars['String']['input']>>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeUrlInactiveBetween?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute contains part of passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-contains) */
  attributeUrlInactiveContains?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute ends with passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-ends-with) */
  attributeUrlInactiveEndsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeUrlInactiveEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeUrlInactiveGreaterThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeUrlInactiveGreaterThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeUrlInactiveInSet?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeUrlInactiveIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeUrlInactiveLessThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeUrlInactiveLessThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attributes starts with passed text. (case-sensitive) [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-starts-with) */
  attributeUrlInactiveStartsWith?: InputMaybe<Scalars['String']['input']>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeUrlIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeUrlLessThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeUrlLessThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attributes starts with passed text. (case-sensitive) [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-starts-with) */
  attributeUrlStartsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeValidityBetween?: InputMaybe<Array<InputMaybe<Scalars['OffsetDateTime']['input']>>>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeValidityEquals?: InputMaybe<Scalars['DateTimeRange']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeValidityGreaterThan?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeValidityGreaterThanEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the range value of that attribute contains the passed value within its limits (both ends are inclusive). The constraint can be used only for Range data type values. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/range#attribute-in-range) */
  attributeValidityInRange?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeValidityInSet?: InputMaybe<Array<Scalars['DateTimeRange']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeValidityIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeValidityLessThan?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeValidityLessThanEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeVisibilityBetween?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute contains part of passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-contains) */
  attributeVisibilityContains?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute ends with passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-ends-with) */
  attributeVisibilityEndsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeVisibilityEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeVisibilityGreaterThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeVisibilityGreaterThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeVisibilityInSet?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeVisibilityIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeVisibilityLessThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeVisibilityLessThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attributes starts with passed text. (case-sensitive) [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-starts-with) */
  attributeVisibilityStartsWith?: InputMaybe<Scalars['String']['input']>;
  /** The constraint checks if primary key of the entity equals to at least one of the passed values. The constraint is equivalent to one or more `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/constant#entity-primary-key-in-set) */
  entityPrimaryKeyInSet?: InputMaybe<Array<Scalars['Int']['input']>>;
  /** The container allowing to filter entities by having references to entities managed by evitaDB that match the inner filter constraint. This container resembles the SQL inner join clauses and works in cooperation with facet summary requirement. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/references#facet-having) */
  facetSyntheticParameterHaving?: InputMaybe<Array<FilterContainerde14524bdc4e7315>>;
  /** The container that behaves as [logical NOT](https://en.wikipedia.org/wiki/Negation) for the inner constraint. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/logical#not) */
  not?: InputMaybe<FilterContainer744027555f798cbb>;
  /** The container that combines inner constraints with [logical OR](https://en.wikipedia.org/wiki/Logical_disjunction). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/logical#or) */
  or?: InputMaybe<Array<FilterContainer744027555f798cbb>>;
};

export type FilterContainer489a26b56eb3e8f0 = {
  /** The container that combines inner constraints with [logical AND](https://en.wikipedia.org/wiki/Logical_conjunction). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/logical#and) */
  and?: InputMaybe<Array<FilterContainerf812d9f8dc0269a4>>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeCategoryTypeBetween?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute contains part of passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-contains) */
  attributeCategoryTypeContains?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute ends with passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-ends-with) */
  attributeCategoryTypeEndsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeCategoryTypeEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeCategoryTypeGreaterThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeCategoryTypeGreaterThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeCategoryTypeInSet?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeCategoryTypeIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeCategoryTypeLessThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeCategoryTypeLessThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attributes starts with passed text. (case-sensitive) [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-starts-with) */
  attributeCategoryTypeStartsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeChangedBetween?: InputMaybe<Array<InputMaybe<Scalars['OffsetDateTime']['input']>>>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeChangedEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeChangedGreaterThan?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeChangedGreaterThanEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeChangedInSet?: InputMaybe<Array<Scalars['OffsetDateTime']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeChangedIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeChangedLessThan?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeChangedLessThanEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeCodeBetween?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute contains part of passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-contains) */
  attributeCodeContains?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute ends with passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-ends-with) */
  attributeCodeEndsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeCodeEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeCodeGreaterThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeCodeGreaterThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeCodeInSet?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeCodeIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeCodeLessThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeCodeLessThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attributes starts with passed text. (case-sensitive) [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-starts-with) */
  attributeCodeStartsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeLevelBetween?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeLevelEquals?: InputMaybe<Scalars['Int']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeLevelGreaterThan?: InputMaybe<Scalars['Int']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeLevelGreaterThanEquals?: InputMaybe<Scalars['Int']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeLevelInSet?: InputMaybe<Array<Scalars['Int']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeLevelIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeLevelLessThan?: InputMaybe<Scalars['Int']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeLevelLessThanEquals?: InputMaybe<Scalars['Int']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeNameBetween?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute contains part of passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-contains) */
  attributeNameContains?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute ends with passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-ends-with) */
  attributeNameEndsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeNameEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeNameGreaterThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeNameGreaterThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeNameInSet?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeNameIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeNameLessThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeNameLessThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attributes starts with passed text. (case-sensitive) [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-starts-with) */
  attributeNameStartsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributePublishedBetween?: InputMaybe<Array<InputMaybe<Scalars['OffsetDateTime']['input']>>>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributePublishedEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributePublishedGreaterThan?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributePublishedGreaterThanEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributePublishedInSet?: InputMaybe<Array<Scalars['OffsetDateTime']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributePublishedIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributePublishedLessThan?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributePublishedLessThanEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeStatusBetween?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute contains part of passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-contains) */
  attributeStatusContains?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute ends with passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-ends-with) */
  attributeStatusEndsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeStatusEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeStatusGreaterThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeStatusGreaterThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeStatusInSet?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeStatusIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeStatusLessThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeStatusLessThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attributes starts with passed text. (case-sensitive) [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-starts-with) */
  attributeStatusStartsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeUrlBetween?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute contains part of passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-contains) */
  attributeUrlContains?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute ends with passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-ends-with) */
  attributeUrlEndsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeUrlEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeUrlGreaterThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeUrlGreaterThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeUrlInSet?: InputMaybe<Array<Scalars['String']['input']>>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeUrlInactiveBetween?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute contains part of passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-contains) */
  attributeUrlInactiveContains?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute ends with passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-ends-with) */
  attributeUrlInactiveEndsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeUrlInactiveEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeUrlInactiveGreaterThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeUrlInactiveGreaterThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeUrlInactiveInSet?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeUrlInactiveIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeUrlInactiveLessThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeUrlInactiveLessThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attributes starts with passed text. (case-sensitive) [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-starts-with) */
  attributeUrlInactiveStartsWith?: InputMaybe<Scalars['String']['input']>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeUrlIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeUrlLessThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeUrlLessThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attributes starts with passed text. (case-sensitive) [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-starts-with) */
  attributeUrlStartsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeValidityBetween?: InputMaybe<Array<InputMaybe<Scalars['OffsetDateTime']['input']>>>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeValidityEquals?: InputMaybe<Scalars['DateTimeRange']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeValidityGreaterThan?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeValidityGreaterThanEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the range value of that attribute contains the passed value within its limits (both ends are inclusive). The constraint can be used only for Range data type values. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/range#attribute-in-range) */
  attributeValidityInRange?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeValidityInSet?: InputMaybe<Array<Scalars['DateTimeRange']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeValidityIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeValidityLessThan?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeValidityLessThanEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeVisibilityBetween?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute contains part of passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-contains) */
  attributeVisibilityContains?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute ends with passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-ends-with) */
  attributeVisibilityEndsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeVisibilityEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeVisibilityGreaterThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeVisibilityGreaterThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeVisibilityInSet?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeVisibilityIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeVisibilityLessThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeVisibilityLessThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attributes starts with passed text. (case-sensitive) [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-starts-with) */
  attributeVisibilityStartsWith?: InputMaybe<Scalars['String']['input']>;
  /** The constraint checks if primary key of the entity equals to at least one of the passed values. The constraint is equivalent to one or more `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/constant#entity-primary-key-in-set) */
  entityPrimaryKeyInSet?: InputMaybe<Array<Scalars['Int']['input']>>;
  /** The container allowing to filter entities by having references to entities managed by evitaDB that match the inner filter constraint. This container resembles the SQL inner join clauses and works in cooperation with facet summary requirement. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/references#facet-having) */
  facetTagsHaving?: InputMaybe<Array<FilterContainer4aed9dcb3b5a8033>>;
  /** The container that behaves as [logical NOT](https://en.wikipedia.org/wiki/Negation) for the inner constraint. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/logical#not) */
  not?: InputMaybe<FilterContainerf812d9f8dc0269a4>;
  /** The container that combines inner constraints with [logical OR](https://en.wikipedia.org/wiki/Logical_disjunction). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/logical#or) */
  or?: InputMaybe<Array<FilterContainerf812d9f8dc0269a4>>;
};

export type FilterContainer517d1d8ea5c4e742 = {
  /** The container that combines inner constraints with [logical AND](https://en.wikipedia.org/wiki/Logical_conjunction). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/logical#and) */
  and?: InputMaybe<Array<FilterContainer517d1d8ea5c4e742>>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeChangedBetween?: InputMaybe<Array<InputMaybe<Scalars['OffsetDateTime']['input']>>>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeChangedEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeChangedGreaterThan?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeChangedGreaterThanEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeChangedInSet?: InputMaybe<Array<Scalars['OffsetDateTime']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeChangedIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeChangedLessThan?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeChangedLessThanEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeCodeBetween?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute contains part of passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-contains) */
  attributeCodeContains?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute ends with passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-ends-with) */
  attributeCodeEndsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeCodeEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeCodeGreaterThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeCodeGreaterThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeCodeInSet?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeCodeIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeCodeLessThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeCodeLessThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attributes starts with passed text. (case-sensitive) [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-starts-with) */
  attributeCodeStartsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeNameBetween?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute contains part of passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-contains) */
  attributeNameContains?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute ends with passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-ends-with) */
  attributeNameEndsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeNameEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeNameGreaterThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeNameGreaterThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeNameInSet?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeNameIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeNameLessThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeNameLessThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attributes starts with passed text. (case-sensitive) [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-starts-with) */
  attributeNameStartsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributePublishedBetween?: InputMaybe<Array<InputMaybe<Scalars['OffsetDateTime']['input']>>>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributePublishedEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributePublishedGreaterThan?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributePublishedGreaterThanEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributePublishedInSet?: InputMaybe<Array<Scalars['OffsetDateTime']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributePublishedIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributePublishedLessThan?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributePublishedLessThanEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeStatusBetween?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute contains part of passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-contains) */
  attributeStatusContains?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute ends with passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-ends-with) */
  attributeStatusEndsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeStatusEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeStatusGreaterThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeStatusGreaterThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeStatusInSet?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeStatusIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeStatusLessThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeStatusLessThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attributes starts with passed text. (case-sensitive) [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-starts-with) */
  attributeStatusStartsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeUrlBetween?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute contains part of passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-contains) */
  attributeUrlContains?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute ends with passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-ends-with) */
  attributeUrlEndsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeUrlEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeUrlGreaterThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeUrlGreaterThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeUrlInSet?: InputMaybe<Array<Scalars['String']['input']>>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeUrlInactiveBetween?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute contains part of passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-contains) */
  attributeUrlInactiveContains?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute ends with passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-ends-with) */
  attributeUrlInactiveEndsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeUrlInactiveEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeUrlInactiveGreaterThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeUrlInactiveGreaterThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeUrlInactiveInSet?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeUrlInactiveIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeUrlInactiveLessThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeUrlInactiveLessThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attributes starts with passed text. (case-sensitive) [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-starts-with) */
  attributeUrlInactiveStartsWith?: InputMaybe<Scalars['String']['input']>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeUrlIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeUrlLessThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeUrlLessThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attributes starts with passed text. (case-sensitive) [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-starts-with) */
  attributeUrlStartsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeValidityBetween?: InputMaybe<Array<InputMaybe<Scalars['OffsetDateTime']['input']>>>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeValidityEquals?: InputMaybe<Scalars['DateTimeRange']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeValidityGreaterThan?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeValidityGreaterThanEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the range value of that attribute contains the passed value within its limits (both ends are inclusive). The constraint can be used only for Range data type values. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/range#attribute-in-range) */
  attributeValidityInRange?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeValidityInSet?: InputMaybe<Array<Scalars['DateTimeRange']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeValidityIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeValidityLessThan?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeValidityLessThanEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeVisibilityBetween?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute contains part of passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-contains) */
  attributeVisibilityContains?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute ends with passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-ends-with) */
  attributeVisibilityEndsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeVisibilityEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeVisibilityGreaterThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeVisibilityGreaterThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeVisibilityInSet?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeVisibilityIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeVisibilityLessThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeVisibilityLessThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attributes starts with passed text. (case-sensitive) [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-starts-with) */
  attributeVisibilityStartsWith?: InputMaybe<Scalars['String']['input']>;
  /** The constraint if at least one of entity locales (derived from entity attributes or associated data) equals to the passed one. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/locale#entity-locale-equals) */
  entityLocaleEquals?: InputMaybe<CatalogLocale>;
  /** The constraint checks if primary key of the entity equals to at least one of the passed values. The constraint is equivalent to one or more `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/constant#entity-primary-key-in-set) */
  entityPrimaryKeyInSet?: InputMaybe<Array<Scalars['Int']['input']>>;
  /** The container allowing to filter entities by having references to entities managed by evitaDB that match the inner filter constraint. This container resembles the SQL inner join clauses and works in cooperation with facet summary requirement. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/references#facet-having) */
  facetTagsHaving?: InputMaybe<Array<FilterContainer1f0678ef1ed202e4>>;
  /** The container that behaves as [logical NOT](https://en.wikipedia.org/wiki/Negation) for the inner constraint. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/logical#not) */
  not?: InputMaybe<FilterContainer517d1d8ea5c4e742>;
  /** The container that combines inner constraints with [logical OR](https://en.wikipedia.org/wiki/Logical_disjunction). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/logical#or) */
  or?: InputMaybe<Array<FilterContainer517d1d8ea5c4e742>>;
  /** The container allowing to filter entities by having references to entities managed by evitaDB that match the inner filter constraint. This container resembles the SQL inner join clauses. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/references#reference-having) */
  referenceTagsHaving?: InputMaybe<Array<FilterContainer1f0678ef1ed202e4>>;
  /** The container for constraints that are controlled by the user (client UI widgets). It is used mainly to distinguish between user constraint (refining the search) and program defined constraints (considered mandatory), when the extra results are computed. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/behavioral#user-filter) */
  userFilter?: InputMaybe<Array<FilterContainer8b3382e70149a029>>;
};

export type FilterContainer585fda0640662fe0 = {
  /** The container that combines inner constraints with [logical AND](https://en.wikipedia.org/wiki/Logical_conjunction). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/logical#and) */
  and?: InputMaybe<Array<FilterContainer585fda0640662fe0>>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeBatteryCapacityBetween?: InputMaybe<Array<InputMaybe<Scalars['BigDecimal']['input']>>>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeBatteryCapacityEquals?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeBatteryCapacityGreaterThan?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeBatteryCapacityGreaterThanEquals?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeBatteryCapacityInSet?: InputMaybe<Array<Scalars['BigDecimal']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeBatteryCapacityIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeBatteryCapacityLessThan?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeBatteryCapacityLessThanEquals?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeBatteryLifeBetween?: InputMaybe<Array<InputMaybe<Scalars['BigDecimal']['input']>>>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeBatteryLifeCaseBetween?: InputMaybe<Array<InputMaybe<Scalars['BigDecimal']['input']>>>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeBatteryLifeCaseEquals?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeBatteryLifeCaseGreaterThan?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeBatteryLifeCaseGreaterThanEquals?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeBatteryLifeCaseInSet?: InputMaybe<Array<Scalars['BigDecimal']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeBatteryLifeCaseIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeBatteryLifeCaseLessThan?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeBatteryLifeCaseLessThanEquals?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeBatteryLifeEquals?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeBatteryLifeGreaterThan?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeBatteryLifeGreaterThanEquals?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeBatteryLifeHeadsetBetween?: InputMaybe<Array<InputMaybe<Scalars['BigDecimal']['input']>>>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeBatteryLifeHeadsetEquals?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeBatteryLifeHeadsetGreaterThan?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeBatteryLifeHeadsetGreaterThanEquals?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeBatteryLifeHeadsetInSet?: InputMaybe<Array<Scalars['BigDecimal']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeBatteryLifeHeadsetIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeBatteryLifeHeadsetLessThan?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeBatteryLifeHeadsetLessThanEquals?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeBatteryLifeInSet?: InputMaybe<Array<Scalars['BigDecimal']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeBatteryLifeIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeBatteryLifeLessThan?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeBatteryLifeLessThanEquals?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeCatalogNumberBetween?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute contains part of passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-contains) */
  attributeCatalogNumberContains?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute ends with passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-ends-with) */
  attributeCatalogNumberEndsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeCatalogNumberEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeCatalogNumberGreaterThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeCatalogNumberGreaterThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeCatalogNumberInSet?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeCatalogNumberIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeCatalogNumberLessThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeCatalogNumberLessThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attributes starts with passed text. (case-sensitive) [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-starts-with) */
  attributeCatalogNumberStartsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeChangedBetween?: InputMaybe<Array<InputMaybe<Scalars['OffsetDateTime']['input']>>>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeChangedEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeChangedGreaterThan?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeChangedGreaterThanEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeChangedInSet?: InputMaybe<Array<Scalars['OffsetDateTime']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeChangedIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeChangedLessThan?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeChangedLessThanEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeCodeBetween?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute contains part of passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-contains) */
  attributeCodeContains?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute ends with passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-ends-with) */
  attributeCodeEndsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeCodeEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeCodeGreaterThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeCodeGreaterThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeCodeInSet?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeCodeIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeCodeLessThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeCodeLessThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeCodeShortBetween?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute contains part of passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-contains) */
  attributeCodeShortContains?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute ends with passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-ends-with) */
  attributeCodeShortEndsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeCodeShortEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeCodeShortGreaterThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeCodeShortGreaterThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeCodeShortInSet?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeCodeShortIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeCodeShortLessThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeCodeShortLessThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attributes starts with passed text. (case-sensitive) [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-starts-with) */
  attributeCodeShortStartsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attributes starts with passed text. (case-sensitive) [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-starts-with) */
  attributeCodeStartsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeConnectionLengthBetween?: InputMaybe<Array<InputMaybe<Scalars['BigDecimal']['input']>>>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeConnectionLengthEquals?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeConnectionLengthGreaterThan?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeConnectionLengthGreaterThanEquals?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeConnectionLengthInSet?: InputMaybe<Array<Scalars['BigDecimal']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeConnectionLengthIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeConnectionLengthLessThan?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeConnectionLengthLessThanEquals?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeCpuFrequencyBetween?: InputMaybe<Array<InputMaybe<Scalars['BigDecimal']['input']>>>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeCpuFrequencyEquals?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeCpuFrequencyGreaterThan?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeCpuFrequencyGreaterThanEquals?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeCpuFrequencyInSet?: InputMaybe<Array<Scalars['BigDecimal']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeCpuFrequencyIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeCpuFrequencyLessThan?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeCpuFrequencyLessThanEquals?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeDepthBetween?: InputMaybe<Array<InputMaybe<Scalars['BigDecimal']['input']>>>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeDepthEquals?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeDepthGreaterThan?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeDepthGreaterThanEquals?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeDepthInMmBetween?: InputMaybe<Array<InputMaybe<Scalars['BigDecimal']['input']>>>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeDepthInMmEquals?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeDepthInMmGreaterThan?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeDepthInMmGreaterThanEquals?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeDepthInMmInSet?: InputMaybe<Array<Scalars['BigDecimal']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeDepthInMmIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeDepthInMmLessThan?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeDepthInMmLessThanEquals?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeDepthInSet?: InputMaybe<Array<Scalars['BigDecimal']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeDepthIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeDepthLessThan?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeDepthLessThanEquals?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeDepthSourceAbetween?: InputMaybe<Array<InputMaybe<Scalars['BigDecimal']['input']>>>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeDepthSourceAequals?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeDepthSourceAgreaterThan?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeDepthSourceAgreaterThanEquals?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeDepthSourceAinSet?: InputMaybe<Array<Scalars['BigDecimal']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeDepthSourceAis?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeDepthSourceAlessThan?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeDepthSourceAlessThanEquals?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeDisplaySizeBetween?: InputMaybe<Array<InputMaybe<Scalars['BigDecimal']['input']>>>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeDisplaySizeEquals?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeDisplaySizeGreaterThan?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeDisplaySizeGreaterThanEquals?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeDisplaySizeInSet?: InputMaybe<Array<Scalars['BigDecimal']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeDisplaySizeIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeDisplaySizeLessThan?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeDisplaySizeLessThanEquals?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeEanBetween?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute contains part of passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-contains) */
  attributeEanContains?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute ends with passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-ends-with) */
  attributeEanEndsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeEanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeEanGreaterThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeEanGreaterThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeEanInSet?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeEanIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeEanLessThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeEanLessThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attributes starts with passed text. (case-sensitive) [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-starts-with) */
  attributeEanStartsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeFrequencyFromBetween?: InputMaybe<Array<InputMaybe<Scalars['BigDecimal']['input']>>>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeFrequencyFromEquals?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeFrequencyFromGreaterThan?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeFrequencyFromGreaterThanEquals?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeFrequencyFromInSet?: InputMaybe<Array<Scalars['BigDecimal']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeFrequencyFromIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeFrequencyFromLessThan?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeFrequencyFromLessThanEquals?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeFrequencyToBetween?: InputMaybe<Array<InputMaybe<Scalars['BigDecimal']['input']>>>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeFrequencyToEquals?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeFrequencyToGreaterThan?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeFrequencyToGreaterThanEquals?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeFrequencyToInSet?: InputMaybe<Array<Scalars['BigDecimal']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeFrequencyToIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeFrequencyToLessThan?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeFrequencyToLessThanEquals?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeFrontCameraResolutBetween?: InputMaybe<Array<InputMaybe<Scalars['BigDecimal']['input']>>>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeFrontCameraResolutEquals?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeFrontCameraResolutGreaterThan?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeFrontCameraResolutGreaterThanEquals?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeFrontCameraResolutInSet?: InputMaybe<Array<Scalars['BigDecimal']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeFrontCameraResolutIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeFrontCameraResolutLessThan?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeFrontCameraResolutLessThanEquals?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeHeightBetween?: InputMaybe<Array<InputMaybe<Scalars['BigDecimal']['input']>>>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeHeightEquals?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeHeightGreaterThan?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeHeightGreaterThanEquals?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeHeightInMmBetween?: InputMaybe<Array<InputMaybe<Scalars['BigDecimal']['input']>>>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeHeightInMmEquals?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeHeightInMmGreaterThan?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeHeightInMmGreaterThanEquals?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeHeightInMmInSet?: InputMaybe<Array<Scalars['BigDecimal']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeHeightInMmIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeHeightInMmLessThan?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeHeightInMmLessThanEquals?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeHeightInSet?: InputMaybe<Array<Scalars['BigDecimal']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeHeightIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeHeightLessThan?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeHeightLessThanEquals?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeHeightMergeBetween?: InputMaybe<Array<InputMaybe<Scalars['BigDecimal']['input']>>>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeHeightMergeEquals?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeHeightMergeGreaterThan?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeHeightMergeGreaterThanEquals?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeHeightMergeInSet?: InputMaybe<Array<Scalars['BigDecimal']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeHeightMergeIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeHeightMergeLessThan?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeHeightMergeLessThanEquals?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeHeightSourceAbetween?: InputMaybe<Array<InputMaybe<Scalars['BigDecimal']['input']>>>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeHeightSourceAequals?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeHeightSourceAgreaterThan?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeHeightSourceAgreaterThanEquals?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeHeightSourceAinSet?: InputMaybe<Array<Scalars['BigDecimal']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeHeightSourceAis?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeHeightSourceAlessThan?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeHeightSourceAlessThanEquals?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeIsBookAsSetBetween?: InputMaybe<Array<InputMaybe<Scalars['Boolean']['input']>>>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeIsBookAsSetEquals?: InputMaybe<Scalars['Boolean']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeIsBookAsSetGreaterThan?: InputMaybe<Scalars['Boolean']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeIsBookAsSetGreaterThanEquals?: InputMaybe<Scalars['Boolean']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeIsBookAsSetInSet?: InputMaybe<Array<Scalars['Boolean']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeIsBookAsSetIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeIsBookAsSetLessThan?: InputMaybe<Scalars['Boolean']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeIsBookAsSetLessThanEquals?: InputMaybe<Scalars['Boolean']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeLengthBetween?: InputMaybe<Array<InputMaybe<Scalars['BigDecimal']['input']>>>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeLengthEquals?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeLengthGreaterThan?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeLengthGreaterThanEquals?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeLengthInSet?: InputMaybe<Array<Scalars['BigDecimal']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeLengthIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeLengthLessThan?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeLengthLessThanEquals?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeNameBetween?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute contains part of passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-contains) */
  attributeNameContains?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute ends with passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-ends-with) */
  attributeNameEndsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeNameEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeNameGreaterThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeNameGreaterThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeNameInSet?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeNameIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeNameLessThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeNameLessThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attributes starts with passed text. (case-sensitive) [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-starts-with) */
  attributeNameStartsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeProductTypeBetween?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute contains part of passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-contains) */
  attributeProductTypeContains?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute ends with passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-ends-with) */
  attributeProductTypeEndsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeProductTypeEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeProductTypeGreaterThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeProductTypeGreaterThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeProductTypeInSet?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeProductTypeIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeProductTypeLessThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeProductTypeLessThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attributes starts with passed text. (case-sensitive) [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-starts-with) */
  attributeProductTypeStartsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributePublishedBetween?: InputMaybe<Array<InputMaybe<Scalars['OffsetDateTime']['input']>>>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributePublishedEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributePublishedGreaterThan?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributePublishedGreaterThanEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributePublishedInSet?: InputMaybe<Array<Scalars['OffsetDateTime']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributePublishedIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributePublishedLessThan?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributePublishedLessThanEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeRatingUsersBetween?: InputMaybe<Array<InputMaybe<Scalars['UUID']['input']>>>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeRatingUsersEquals?: InputMaybe<Scalars['UUID']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeRatingUsersGreaterThan?: InputMaybe<Scalars['UUID']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeRatingUsersGreaterThanEquals?: InputMaybe<Scalars['UUID']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeRatingUsersInSet?: InputMaybe<Array<Scalars['UUID']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeRatingUsersIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeRatingUsersLessThan?: InputMaybe<Scalars['UUID']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeRatingUsersLessThanEquals?: InputMaybe<Scalars['UUID']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeRearCameraResolutiBetween?: InputMaybe<Array<InputMaybe<Scalars['BigDecimal']['input']>>>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeRearCameraResolutiEquals?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeRearCameraResolutiGreaterThan?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeRearCameraResolutiGreaterThanEquals?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeRearCameraResolutiInSet?: InputMaybe<Array<Scalars['BigDecimal']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeRearCameraResolutiIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeRearCameraResolutiLessThan?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeRearCameraResolutiLessThanEquals?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeRefreshRateBetween?: InputMaybe<Array<InputMaybe<Scalars['BigDecimal']['input']>>>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeRefreshRateEquals?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeRefreshRateGreaterThan?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeRefreshRateGreaterThanEquals?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeRefreshRateInSet?: InputMaybe<Array<Scalars['BigDecimal']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeRefreshRateIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeRefreshRateLessThan?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeRefreshRateLessThanEquals?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeResponseTimeBetween?: InputMaybe<Array<InputMaybe<Scalars['BigDecimal']['input']>>>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeResponseTimeEquals?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeResponseTimeGreaterThan?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeResponseTimeGreaterThanEquals?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeResponseTimeInSet?: InputMaybe<Array<Scalars['BigDecimal']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeResponseTimeIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeResponseTimeLessThan?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeResponseTimeLessThanEquals?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeSnrBetween?: InputMaybe<Array<InputMaybe<Scalars['BigDecimal']['input']>>>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeSnrEquals?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeSnrGreaterThan?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeSnrGreaterThanEquals?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeSnrInSet?: InputMaybe<Array<Scalars['BigDecimal']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeSnrIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeSnrLessThan?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeSnrLessThanEquals?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeStatusBetween?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute contains part of passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-contains) */
  attributeStatusContains?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute ends with passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-ends-with) */
  attributeStatusEndsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeStatusEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeStatusGreaterThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeStatusGreaterThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeStatusInSet?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeStatusIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeStatusLessThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeStatusLessThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attributes starts with passed text. (case-sensitive) [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-starts-with) */
  attributeStatusStartsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeSupplierCodeBetween?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute contains part of passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-contains) */
  attributeSupplierCodeContains?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute ends with passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-ends-with) */
  attributeSupplierCodeEndsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeSupplierCodeEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeSupplierCodeGreaterThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeSupplierCodeGreaterThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeSupplierCodeInSet?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeSupplierCodeIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeSupplierCodeLessThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeSupplierCodeLessThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attributes starts with passed text. (case-sensitive) [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-starts-with) */
  attributeSupplierCodeStartsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeThicknessBetween?: InputMaybe<Array<InputMaybe<Scalars['BigDecimal']['input']>>>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeThicknessEquals?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeThicknessGreaterThan?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeThicknessGreaterThanEquals?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeThicknessInSet?: InputMaybe<Array<Scalars['BigDecimal']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeThicknessIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeThicknessLessThan?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeThicknessLessThanEquals?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeTotalBatteryLifeBetween?: InputMaybe<Array<InputMaybe<Scalars['BigDecimal']['input']>>>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeTotalBatteryLifeEquals?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeTotalBatteryLifeGreaterThan?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeTotalBatteryLifeGreaterThanEquals?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeTotalBatteryLifeInSet?: InputMaybe<Array<Scalars['BigDecimal']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeTotalBatteryLifeIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeTotalBatteryLifeLessThan?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeTotalBatteryLifeLessThanEquals?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeTotalPerformanceSetBetween?: InputMaybe<Array<InputMaybe<Scalars['BigDecimal']['input']>>>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeTotalPerformanceSetEquals?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeTotalPerformanceSetGreaterThan?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeTotalPerformanceSetGreaterThanEquals?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeTotalPerformanceSetInSet?: InputMaybe<Array<Scalars['BigDecimal']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeTotalPerformanceSetIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeTotalPerformanceSetLessThan?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeTotalPerformanceSetLessThanEquals?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeTotalWeightBetween?: InputMaybe<Array<InputMaybe<Scalars['BigDecimal']['input']>>>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeTotalWeightEquals?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeTotalWeightGreaterThan?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeTotalWeightGreaterThanEquals?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeTotalWeightInSet?: InputMaybe<Array<Scalars['BigDecimal']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeTotalWeightIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeTotalWeightLessThan?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeTotalWeightLessThanEquals?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeUrlBetween?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute contains part of passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-contains) */
  attributeUrlContains?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute ends with passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-ends-with) */
  attributeUrlEndsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeUrlEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeUrlGreaterThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeUrlGreaterThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeUrlInSet?: InputMaybe<Array<Scalars['String']['input']>>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeUrlInactiveBetween?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute contains part of passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-contains) */
  attributeUrlInactiveContains?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute ends with passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-ends-with) */
  attributeUrlInactiveEndsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeUrlInactiveEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeUrlInactiveGreaterThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeUrlInactiveGreaterThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeUrlInactiveInSet?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeUrlInactiveIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeUrlInactiveLessThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeUrlInactiveLessThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attributes starts with passed text. (case-sensitive) [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-starts-with) */
  attributeUrlInactiveStartsWith?: InputMaybe<Scalars['String']['input']>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeUrlIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeUrlLessThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeUrlLessThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attributes starts with passed text. (case-sensitive) [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-starts-with) */
  attributeUrlStartsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeValidityBetween?: InputMaybe<Array<InputMaybe<Scalars['OffsetDateTime']['input']>>>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeValidityEquals?: InputMaybe<Scalars['DateTimeRange']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeValidityGreaterThan?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeValidityGreaterThanEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the range value of that attribute contains the passed value within its limits (both ends are inclusive). The constraint can be used only for Range data type values. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/range#attribute-in-range) */
  attributeValidityInRange?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeValidityInSet?: InputMaybe<Array<Scalars['DateTimeRange']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeValidityIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeValidityLessThan?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeValidityLessThanEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeWeightBetween?: InputMaybe<Array<InputMaybe<Scalars['BigDecimal']['input']>>>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeWeightEquals?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeWeightGreaterThan?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeWeightGreaterThanEquals?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeWeightInKgBetween?: InputMaybe<Array<InputMaybe<Scalars['BigDecimal']['input']>>>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeWeightInKgEquals?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeWeightInKgGreaterThan?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeWeightInKgGreaterThanEquals?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeWeightInKgInSet?: InputMaybe<Array<Scalars['BigDecimal']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeWeightInKgIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeWeightInKgLessThan?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeWeightInKgLessThanEquals?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeWeightInSet?: InputMaybe<Array<Scalars['BigDecimal']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeWeightIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeWeightLessThan?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeWeightLessThanEquals?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeWeightMergeBetween?: InputMaybe<Array<InputMaybe<Scalars['BigDecimal']['input']>>>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeWeightMergeEquals?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeWeightMergeGreaterThan?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeWeightMergeGreaterThanEquals?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeWeightMergeInSet?: InputMaybe<Array<Scalars['BigDecimal']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeWeightMergeIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeWeightMergeLessThan?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeWeightMergeLessThanEquals?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeWeightSourceAbetween?: InputMaybe<Array<InputMaybe<Scalars['BigDecimal']['input']>>>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeWeightSourceAequals?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeWeightSourceAgreaterThan?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeWeightSourceAgreaterThanEquals?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeWeightSourceAinSet?: InputMaybe<Array<Scalars['BigDecimal']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeWeightSourceAis?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeWeightSourceAlessThan?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeWeightSourceAlessThanEquals?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeWidthBetween?: InputMaybe<Array<InputMaybe<Scalars['BigDecimal']['input']>>>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeWidthEquals?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeWidthGreaterThan?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeWidthGreaterThanEquals?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeWidthInMmBetween?: InputMaybe<Array<InputMaybe<Scalars['BigDecimal']['input']>>>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeWidthInMmEquals?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeWidthInMmGreaterThan?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeWidthInMmGreaterThanEquals?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeWidthInMmInSet?: InputMaybe<Array<Scalars['BigDecimal']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeWidthInMmIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeWidthInMmLessThan?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeWidthInMmLessThanEquals?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeWidthInSet?: InputMaybe<Array<Scalars['BigDecimal']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeWidthIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeWidthLessThan?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeWidthLessThanEquals?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeWidthMergeBetween?: InputMaybe<Array<InputMaybe<Scalars['BigDecimal']['input']>>>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeWidthMergeEquals?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeWidthMergeGreaterThan?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeWidthMergeGreaterThanEquals?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeWidthMergeInSet?: InputMaybe<Array<Scalars['BigDecimal']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeWidthMergeIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeWidthMergeLessThan?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeWidthMergeLessThanEquals?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeWidthSourceAbetween?: InputMaybe<Array<InputMaybe<Scalars['BigDecimal']['input']>>>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeWidthSourceAequals?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeWidthSourceAgreaterThan?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeWidthSourceAgreaterThanEquals?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeWidthSourceAinSet?: InputMaybe<Array<Scalars['BigDecimal']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeWidthSourceAis?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeWidthSourceAlessThan?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeWidthSourceAlessThanEquals?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** The constraint if at least one of entity locales (derived from entity attributes or associated data) equals to the passed one. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/locale#entity-locale-equals) */
  entityLocaleEquals?: InputMaybe<CatalogLocale>;
  /** The constraint checks if primary key of the entity equals to at least one of the passed values. The constraint is equivalent to one or more `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/constant#entity-primary-key-in-set) */
  entityPrimaryKeyInSet?: InputMaybe<Array<Scalars['Int']['input']>>;
  /** The container allowing to filter entities by having references to entities managed by evitaDB that match the inner filter constraint. This container resembles the SQL inner join clauses and works in cooperation with facet summary requirement. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/references#facet-having) */
  facetBrandHaving?: InputMaybe<Array<FilterContainer13b6513537be4a96>>;
  /** The container allowing to filter entities by having references to entities managed by evitaDB that match the inner filter constraint. This container resembles the SQL inner join clauses and works in cooperation with facet summary requirement. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/references#facet-having) */
  facetCategoriesHaving?: InputMaybe<Array<FilterContainerd7c10f54d105b2f6>>;
  /** The container allowing to filter entities by having references to entities managed by evitaDB that match the inner filter constraint. This container resembles the SQL inner join clauses and works in cooperation with facet summary requirement. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/references#facet-having) */
  facetGroupsHaving?: InputMaybe<Array<FilterContainer1623f55fb0c57182>>;
  /** The container allowing to filter entities by having references to entities managed by evitaDB that match the inner filter constraint. This container resembles the SQL inner join clauses and works in cooperation with facet summary requirement. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/references#facet-having) */
  facetParameterValuesHaving?: InputMaybe<Array<FilterContainere3982a3d02ff904d>>;
  /** The container allowing to filter entities by having references to entities managed by evitaDB that match the inner filter constraint. This container resembles the SQL inner join clauses and works in cooperation with facet summary requirement. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/references#facet-having) */
  facetStocksHaving?: InputMaybe<Array<FilterContainer3e7971791f10624>>;
  /** The container allowing to filter entities by having references to entities managed by evitaDB that match the inner filter constraint. This container resembles the SQL inner join clauses and works in cooperation with facet summary requirement. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/references#facet-having) */
  facetTagsHaving?: InputMaybe<Array<FilterContainer7c02d16043ca92f>>;
  /** The container allowing to filter entities by having references to entities managed by evitaDB that match the inner filter constraint. This container resembles the SQL inner join clauses and works in cooperation with facet summary requirement. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/references#facet-having) */
  facetVariantParametersHaving?: InputMaybe<Array<FilterContainerf8ed17494a215fd4>>;
  /** The constraint if entity is placed inside the defined hierarchy tree (or has reference to any hierarchical entity in the tree). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/hierarchy#hierarchy-within) */
  hierarchyCategoriesWithin?: InputMaybe<WrapperObjectae82c6317277b833>;
  /** The constraint if entity is placed inside the defined hierarchy tree starting at the root of the tree (or has reference to any hierarchical entity in the tree). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/hierarchy#hierarchy-within-root) */
  hierarchyCategoriesWithinRoot?: InputMaybe<FilterContainer80acaa2de31d0173>;
  /** The container that behaves as [logical NOT](https://en.wikipedia.org/wiki/Negation) for the inner constraint. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/logical#not) */
  not?: InputMaybe<FilterContainer585fda0640662fe0>;
  /** The container that combines inner constraints with [logical OR](https://en.wikipedia.org/wiki/Logical_disjunction). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/logical#or) */
  or?: InputMaybe<Array<FilterContainer585fda0640662fe0>>;
  /** The constraint checks if entity has price for sale within the passed range of prices (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/price#price-between) */
  priceBetween?: InputMaybe<Array<InputMaybe<Scalars['BigDecimal']['input']>>>;
  /** The constraint filters out all entities that lack selling price in specified currency. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/price#price-in-currency) */
  priceInCurrency?: InputMaybe<CatalogCurrency>;
  /** The constraint filters out all entities that lack selling price in specified price lists. Order of price lists also defines priority for selecting the entity selling price - the price from first price list in the list will be used as a selling price for the entire entity. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/price#price-in-price-lists) */
  priceInPriceLists?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint checks if entity has selling price valid at the passed moment. [Check detailed documentation](https://evitadb.io/documentation/filtering/price#price-valid-in) */
  priceValidIn?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** The constraint checks if entity has selling price valid at the passed moment. [Check detailed documentation](https://evitadb.io/documentation/filtering/price#price-valid-in) */
  priceValidInNow?: InputMaybe<Scalars['Boolean']['input']>;
  /** The container allowing to filter entities by having references to entities managed by evitaDB that match the inner filter constraint. This container resembles the SQL inner join clauses. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/references#reference-having) */
  referenceBrandHaving?: InputMaybe<Array<FilterContainer13b6513537be4a96>>;
  /** The container allowing to filter entities by having references to entities managed by evitaDB that match the inner filter constraint. This container resembles the SQL inner join clauses. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/references#reference-having) */
  referenceBundlesHaving?: InputMaybe<Array<FilterContainer2cf89daeb4f0d064>>;
  /** The container allowing to filter entities by having references to entities managed by evitaDB that match the inner filter constraint. This container resembles the SQL inner join clauses. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/references#reference-having) */
  referenceCategoriesHaving?: InputMaybe<Array<FilterContainerd7c10f54d105b2f6>>;
  /** The container allowing to filter entities by having references to entities managed by evitaDB that match the inner filter constraint. This container resembles the SQL inner join clauses. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/references#reference-having) */
  referenceGroupsHaving?: InputMaybe<Array<FilterContainer1623f55fb0c57182>>;
  /** The container allowing to filter entities by having references to entities managed by evitaDB that match the inner filter constraint. This container resembles the SQL inner join clauses. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/references#reference-having) */
  referenceMasterHaving?: InputMaybe<Array<FilterContainer5762c3a66bdc6e2c>>;
  /** The container allowing to filter entities by having references to entities managed by evitaDB that match the inner filter constraint. This container resembles the SQL inner join clauses. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/references#reference-having) */
  referenceParameterValuesHaving?: InputMaybe<Array<FilterContainere3982a3d02ff904d>>;
  /** The container allowing to filter entities by having references to entities managed by evitaDB that match the inner filter constraint. This container resembles the SQL inner join clauses. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/references#reference-having) */
  referenceProductSetItemsHaving?: InputMaybe<Array<FilterContainer903f3e153cb1e6fb>>;
  /** The container allowing to filter entities by having references to entities managed by evitaDB that match the inner filter constraint. This container resembles the SQL inner join clauses. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/references#reference-having) */
  referenceRelatedProductsHaving?: InputMaybe<Array<FilterContainer18e363c46192dd8b>>;
  /** The container allowing to filter entities by having references to entities managed by evitaDB that match the inner filter constraint. This container resembles the SQL inner join clauses. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/references#reference-having) */
  referenceStockVisibilitiesHaving?: InputMaybe<Array<FilterContainerf4d19f02cdced8b0>>;
  /** The container allowing to filter entities by having references to entities managed by evitaDB that match the inner filter constraint. This container resembles the SQL inner join clauses. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/references#reference-having) */
  referenceStocksHaving?: InputMaybe<Array<FilterContainer3e7971791f10624>>;
  /** The container allowing to filter entities by having references to entities managed by evitaDB that match the inner filter constraint. This container resembles the SQL inner join clauses. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/references#reference-having) */
  referenceTagsHaving?: InputMaybe<Array<FilterContainer7c02d16043ca92f>>;
  /** The container allowing to filter entities by having references to entities managed by evitaDB that match the inner filter constraint. This container resembles the SQL inner join clauses. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/references#reference-having) */
  referenceVariantParametersHaving?: InputMaybe<Array<FilterContainerf8ed17494a215fd4>>;
  /** The container for constraints that are controlled by the user (client UI widgets). It is used mainly to distinguish between user constraint (refining the search) and program defined constraints (considered mandatory), when the extra results are computed. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/behavioral#user-filter) */
  userFilter?: InputMaybe<Array<FilterContainer231fb6d3716a4ce6>>;
};

export type FilterContainer757b56df09748967 = {
  /** The container that combines inner constraints with [logical AND](https://en.wikipedia.org/wiki/Logical_conjunction). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/logical#and) */
  and?: InputMaybe<Array<FilterContainer757b56df09748967>>;
  /** The container allowing to filter entities by having references to entities managed by evitaDB that match inner filtering constraints. This container resembles the SQL inner join clauses where the `entityHaving`contains the filtering condition on particular join. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/references#entity-having) */
  entityHaving?: InputMaybe<FilterContainer21f42768fb89b5d4>;
  /** The constraint checks if primary key of the entity equals to at least one of the passed values. The constraint is equivalent to one or more `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/constant#entity-primary-key-in-set) */
  entityPrimaryKeyInSet?: InputMaybe<Array<Scalars['Int']['input']>>;
  /** The container that behaves as [logical NOT](https://en.wikipedia.org/wiki/Negation) for the inner constraint. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/logical#not) */
  not?: InputMaybe<FilterContainer757b56df09748967>;
  /** The container that combines inner constraints with [logical OR](https://en.wikipedia.org/wiki/Logical_disjunction). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/logical#or) */
  or?: InputMaybe<Array<FilterContainer757b56df09748967>>;
};

export type FilterContainer901a13b707d5d55 = {
  /** The container that combines inner constraints with [logical AND](https://en.wikipedia.org/wiki/Logical_conjunction). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/logical#and) */
  and?: InputMaybe<Array<FilterContainer967c71ead6465215>>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeChangedBetween?: InputMaybe<Array<InputMaybe<Scalars['OffsetDateTime']['input']>>>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeChangedEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeChangedGreaterThan?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeChangedGreaterThanEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeChangedInSet?: InputMaybe<Array<Scalars['OffsetDateTime']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeChangedIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeChangedLessThan?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeChangedLessThanEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeCodeBetween?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute contains part of passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-contains) */
  attributeCodeContains?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute ends with passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-ends-with) */
  attributeCodeEndsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeCodeEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeCodeGreaterThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeCodeGreaterThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeCodeInSet?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeCodeIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeCodeLessThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeCodeLessThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attributes starts with passed text. (case-sensitive) [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-starts-with) */
  attributeCodeStartsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeIsVisibleInDetailBetween?: InputMaybe<Array<InputMaybe<Scalars['Boolean']['input']>>>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeIsVisibleInDetailEquals?: InputMaybe<Scalars['Boolean']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeIsVisibleInDetailGreaterThan?: InputMaybe<Scalars['Boolean']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeIsVisibleInDetailGreaterThanEquals?: InputMaybe<Scalars['Boolean']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeIsVisibleInDetailInSet?: InputMaybe<Array<Scalars['Boolean']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeIsVisibleInDetailIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeIsVisibleInDetailLessThan?: InputMaybe<Scalars['Boolean']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeIsVisibleInDetailLessThanEquals?: InputMaybe<Scalars['Boolean']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeIsVisibleInFilterBetween?: InputMaybe<Array<InputMaybe<Scalars['Boolean']['input']>>>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeIsVisibleInFilterEquals?: InputMaybe<Scalars['Boolean']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeIsVisibleInFilterGreaterThan?: InputMaybe<Scalars['Boolean']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeIsVisibleInFilterGreaterThanEquals?: InputMaybe<Scalars['Boolean']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeIsVisibleInFilterInSet?: InputMaybe<Array<Scalars['Boolean']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeIsVisibleInFilterIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeIsVisibleInFilterLessThan?: InputMaybe<Scalars['Boolean']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeIsVisibleInFilterLessThanEquals?: InputMaybe<Scalars['Boolean']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeIsVisibleInListingBetween?: InputMaybe<Array<InputMaybe<Scalars['Boolean']['input']>>>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeIsVisibleInListingEquals?: InputMaybe<Scalars['Boolean']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeIsVisibleInListingGreaterThan?: InputMaybe<Scalars['Boolean']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeIsVisibleInListingGreaterThanEquals?: InputMaybe<Scalars['Boolean']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeIsVisibleInListingInSet?: InputMaybe<Array<Scalars['Boolean']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeIsVisibleInListingIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeIsVisibleInListingLessThan?: InputMaybe<Scalars['Boolean']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeIsVisibleInListingLessThanEquals?: InputMaybe<Scalars['Boolean']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeNameBetween?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute contains part of passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-contains) */
  attributeNameContains?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute ends with passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-ends-with) */
  attributeNameEndsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeNameEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeNameGreaterThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeNameGreaterThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeNameInSet?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeNameIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeNameLessThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeNameLessThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attributes starts with passed text. (case-sensitive) [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-starts-with) */
  attributeNameStartsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributePublishedBetween?: InputMaybe<Array<InputMaybe<Scalars['OffsetDateTime']['input']>>>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributePublishedEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributePublishedGreaterThan?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributePublishedGreaterThanEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributePublishedInSet?: InputMaybe<Array<Scalars['OffsetDateTime']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributePublishedIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributePublishedLessThan?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributePublishedLessThanEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeStatusBetween?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute contains part of passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-contains) */
  attributeStatusContains?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute ends with passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-ends-with) */
  attributeStatusEndsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeStatusEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeStatusGreaterThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeStatusGreaterThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeStatusInSet?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeStatusIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeStatusLessThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeStatusLessThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attributes starts with passed text. (case-sensitive) [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-starts-with) */
  attributeStatusStartsWith?: InputMaybe<Scalars['String']['input']>;
  /** The constraint checks if primary key of the entity equals to at least one of the passed values. The constraint is equivalent to one or more `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/constant#entity-primary-key-in-set) */
  entityPrimaryKeyInSet?: InputMaybe<Array<Scalars['Int']['input']>>;
  /** The container that behaves as [logical NOT](https://en.wikipedia.org/wiki/Negation) for the inner constraint. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/logical#not) */
  not?: InputMaybe<FilterContainer967c71ead6465215>;
  /** The container that combines inner constraints with [logical OR](https://en.wikipedia.org/wiki/Logical_disjunction). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/logical#or) */
  or?: InputMaybe<Array<FilterContainer967c71ead6465215>>;
};

export type FilterContainer903f3e153cb1e6fb = {
  /** The container that combines inner constraints with [logical AND](https://en.wikipedia.org/wiki/Logical_conjunction). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/logical#and) */
  and?: InputMaybe<Array<FilterContainer903f3e153cb1e6fb>>;
  /** The container allowing to filter entities by having references to entities managed by evitaDB that match inner filtering constraints. This container resembles the SQL inner join clauses where the `entityHaving`contains the filtering condition on particular join. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/references#entity-having) */
  entityHaving?: InputMaybe<FilterContainer585fda0640662fe0>;
  /** The constraint checks if primary key of the entity equals to at least one of the passed values. The constraint is equivalent to one or more `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/constant#entity-primary-key-in-set) */
  entityPrimaryKeyInSet?: InputMaybe<Array<Scalars['Int']['input']>>;
  /** The container that behaves as [logical NOT](https://en.wikipedia.org/wiki/Negation) for the inner constraint. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/logical#not) */
  not?: InputMaybe<FilterContainer903f3e153cb1e6fb>;
  /** The container that combines inner constraints with [logical OR](https://en.wikipedia.org/wiki/Logical_disjunction). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/logical#or) */
  or?: InputMaybe<Array<FilterContainer903f3e153cb1e6fb>>;
};

export type FilterContainer967c71ead6465215 = {
  /** The container that combines inner constraints with [logical AND](https://en.wikipedia.org/wiki/Logical_conjunction). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/logical#and) */
  and?: InputMaybe<Array<FilterContainer967c71ead6465215>>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeChangedBetween?: InputMaybe<Array<InputMaybe<Scalars['OffsetDateTime']['input']>>>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeChangedEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeChangedGreaterThan?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeChangedGreaterThanEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeChangedInSet?: InputMaybe<Array<Scalars['OffsetDateTime']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeChangedIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeChangedLessThan?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeChangedLessThanEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeCodeBetween?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute contains part of passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-contains) */
  attributeCodeContains?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute ends with passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-ends-with) */
  attributeCodeEndsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeCodeEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeCodeGreaterThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeCodeGreaterThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeCodeInSet?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeCodeIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeCodeLessThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeCodeLessThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attributes starts with passed text. (case-sensitive) [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-starts-with) */
  attributeCodeStartsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeIsVisibleInDetailBetween?: InputMaybe<Array<InputMaybe<Scalars['Boolean']['input']>>>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeIsVisibleInDetailEquals?: InputMaybe<Scalars['Boolean']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeIsVisibleInDetailGreaterThan?: InputMaybe<Scalars['Boolean']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeIsVisibleInDetailGreaterThanEquals?: InputMaybe<Scalars['Boolean']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeIsVisibleInDetailInSet?: InputMaybe<Array<Scalars['Boolean']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeIsVisibleInDetailIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeIsVisibleInDetailLessThan?: InputMaybe<Scalars['Boolean']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeIsVisibleInDetailLessThanEquals?: InputMaybe<Scalars['Boolean']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeIsVisibleInFilterBetween?: InputMaybe<Array<InputMaybe<Scalars['Boolean']['input']>>>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeIsVisibleInFilterEquals?: InputMaybe<Scalars['Boolean']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeIsVisibleInFilterGreaterThan?: InputMaybe<Scalars['Boolean']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeIsVisibleInFilterGreaterThanEquals?: InputMaybe<Scalars['Boolean']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeIsVisibleInFilterInSet?: InputMaybe<Array<Scalars['Boolean']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeIsVisibleInFilterIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeIsVisibleInFilterLessThan?: InputMaybe<Scalars['Boolean']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeIsVisibleInFilterLessThanEquals?: InputMaybe<Scalars['Boolean']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeIsVisibleInListingBetween?: InputMaybe<Array<InputMaybe<Scalars['Boolean']['input']>>>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeIsVisibleInListingEquals?: InputMaybe<Scalars['Boolean']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeIsVisibleInListingGreaterThan?: InputMaybe<Scalars['Boolean']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeIsVisibleInListingGreaterThanEquals?: InputMaybe<Scalars['Boolean']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeIsVisibleInListingInSet?: InputMaybe<Array<Scalars['Boolean']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeIsVisibleInListingIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeIsVisibleInListingLessThan?: InputMaybe<Scalars['Boolean']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeIsVisibleInListingLessThanEquals?: InputMaybe<Scalars['Boolean']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeNameBetween?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute contains part of passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-contains) */
  attributeNameContains?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute ends with passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-ends-with) */
  attributeNameEndsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeNameEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeNameGreaterThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeNameGreaterThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeNameInSet?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeNameIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeNameLessThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeNameLessThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attributes starts with passed text. (case-sensitive) [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-starts-with) */
  attributeNameStartsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributePublishedBetween?: InputMaybe<Array<InputMaybe<Scalars['OffsetDateTime']['input']>>>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributePublishedEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributePublishedGreaterThan?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributePublishedGreaterThanEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributePublishedInSet?: InputMaybe<Array<Scalars['OffsetDateTime']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributePublishedIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributePublishedLessThan?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributePublishedLessThanEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeStatusBetween?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute contains part of passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-contains) */
  attributeStatusContains?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute ends with passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-ends-with) */
  attributeStatusEndsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeStatusEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeStatusGreaterThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeStatusGreaterThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeStatusInSet?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeStatusIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeStatusLessThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeStatusLessThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attributes starts with passed text. (case-sensitive) [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-starts-with) */
  attributeStatusStartsWith?: InputMaybe<Scalars['String']['input']>;
  /** The constraint if at least one of entity locales (derived from entity attributes or associated data) equals to the passed one. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/locale#entity-locale-equals) */
  entityLocaleEquals?: InputMaybe<CatalogLocale>;
  /** The constraint checks if primary key of the entity equals to at least one of the passed values. The constraint is equivalent to one or more `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/constant#entity-primary-key-in-set) */
  entityPrimaryKeyInSet?: InputMaybe<Array<Scalars['Int']['input']>>;
  /** The container that behaves as [logical NOT](https://en.wikipedia.org/wiki/Negation) for the inner constraint. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/logical#not) */
  not?: InputMaybe<FilterContainer967c71ead6465215>;
  /** The container that combines inner constraints with [logical OR](https://en.wikipedia.org/wiki/Logical_disjunction). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/logical#or) */
  or?: InputMaybe<Array<FilterContainer967c71ead6465215>>;
  /** The container allowing to filter entities by having references to entities managed by evitaDB that match the inner filter constraint. This container resembles the SQL inner join clauses. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/references#reference-having) */
  referenceCategoriesHaving?: InputMaybe<Array<FilterContainer21fbcdb63b6665fb>>;
  /** The container for constraints that are controlled by the user (client UI widgets). It is used mainly to distinguish between user constraint (refining the search) and program defined constraints (considered mandatory), when the extra results are computed. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/behavioral#user-filter) */
  userFilter?: InputMaybe<Array<FilterContainer901a13b707d5d55>>;
};

export type FilterContainer1623f55fb0c57182 = {
  /** The container that combines inner constraints with [logical AND](https://en.wikipedia.org/wiki/Logical_conjunction). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/logical#and) */
  and?: InputMaybe<Array<FilterContainer1623f55fb0c57182>>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeAssignmentValidityBetween?: InputMaybe<Array<InputMaybe<Scalars['OffsetDateTime']['input']>>>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeAssignmentValidityEquals?: InputMaybe<Scalars['DateTimeRange']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeAssignmentValidityGreaterThan?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeAssignmentValidityGreaterThanEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the range value of that attribute contains the passed value within its limits (both ends are inclusive). The constraint can be used only for Range data type values. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/range#attribute-in-range) */
  attributeAssignmentValidityInRange?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeAssignmentValidityInSet?: InputMaybe<Array<Scalars['DateTimeRange']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeAssignmentValidityIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeAssignmentValidityLessThan?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeAssignmentValidityLessThanEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** The container allowing to filter entities by having references to entities managed by evitaDB that match inner filtering constraints. This container resembles the SQL inner join clauses where the `entityHaving`contains the filtering condition on particular join. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/references#entity-having) */
  entityHaving?: InputMaybe<FilterContainerc183dce568fe08c7>;
  /** The constraint checks if primary key of the entity equals to at least one of the passed values. The constraint is equivalent to one or more `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/constant#entity-primary-key-in-set) */
  entityPrimaryKeyInSet?: InputMaybe<Array<Scalars['Int']['input']>>;
  /** The container that behaves as [logical NOT](https://en.wikipedia.org/wiki/Negation) for the inner constraint. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/logical#not) */
  not?: InputMaybe<FilterContainer1623f55fb0c57182>;
  /** The container that combines inner constraints with [logical OR](https://en.wikipedia.org/wiki/Logical_disjunction). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/logical#or) */
  or?: InputMaybe<Array<FilterContainer1623f55fb0c57182>>;
};

export type FilterContainer5762c3a66bdc6e2c = {
  /** The container that combines inner constraints with [logical AND](https://en.wikipedia.org/wiki/Logical_conjunction). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/logical#and) */
  and?: InputMaybe<Array<FilterContainer5762c3a66bdc6e2c>>;
  /** The container allowing to filter entities by having references to entities managed by evitaDB that match inner filtering constraints. This container resembles the SQL inner join clauses where the `entityHaving`contains the filtering condition on particular join. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/references#entity-having) */
  entityHaving?: InputMaybe<FilterContainer585fda0640662fe0>;
  /** The constraint checks if primary key of the entity equals to at least one of the passed values. The constraint is equivalent to one or more `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/constant#entity-primary-key-in-set) */
  entityPrimaryKeyInSet?: InputMaybe<Array<Scalars['Int']['input']>>;
  /** The container that behaves as [logical NOT](https://en.wikipedia.org/wiki/Negation) for the inner constraint. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/logical#not) */
  not?: InputMaybe<FilterContainer5762c3a66bdc6e2c>;
  /** The container that combines inner constraints with [logical OR](https://en.wikipedia.org/wiki/Logical_disjunction). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/logical#or) */
  or?: InputMaybe<Array<FilterContainer5762c3a66bdc6e2c>>;
};

export type FilterContainer8036eb0fa0d4b8bb = {
  /** The container that combines inner constraints with [logical AND](https://en.wikipedia.org/wiki/Logical_conjunction). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/logical#and) */
  and?: InputMaybe<Array<FilterContainer8036eb0fa0d4b8bb>>;
  /** The container allowing to filter entities by having references to entities managed by evitaDB that match inner filtering constraints. This container resembles the SQL inner join clauses where the `entityHaving`contains the filtering condition on particular join. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/references#entity-having) */
  entityHaving?: InputMaybe<FilterContainer967c71ead6465215>;
  /** The constraint checks if primary key of the entity equals to at least one of the passed values. The constraint is equivalent to one or more `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/constant#entity-primary-key-in-set) */
  entityPrimaryKeyInSet?: InputMaybe<Array<Scalars['Int']['input']>>;
  /** The container that behaves as [logical NOT](https://en.wikipedia.org/wiki/Negation) for the inner constraint. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/logical#not) */
  not?: InputMaybe<FilterContainer8036eb0fa0d4b8bb>;
  /** The container that combines inner constraints with [logical OR](https://en.wikipedia.org/wiki/Logical_disjunction). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/logical#or) */
  or?: InputMaybe<Array<FilterContainer8036eb0fa0d4b8bb>>;
};

export type FilterContainer9151b3bab054ab55 = {
  /** The container that combines inner constraints with [logical AND](https://en.wikipedia.org/wiki/Logical_conjunction). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/logical#and) */
  and?: InputMaybe<Array<FilterContainer9151b3bab054ab55>>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeChangedBetween?: InputMaybe<Array<InputMaybe<Scalars['OffsetDateTime']['input']>>>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeChangedEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeChangedGreaterThan?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeChangedGreaterThanEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeChangedInSet?: InputMaybe<Array<Scalars['OffsetDateTime']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeChangedIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeChangedLessThan?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeChangedLessThanEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeCodeBetween?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute contains part of passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-contains) */
  attributeCodeContains?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute ends with passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-ends-with) */
  attributeCodeEndsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeCodeEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeCodeGreaterThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeCodeGreaterThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeCodeInSet?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeCodeIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeCodeLessThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeCodeLessThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attributes starts with passed text. (case-sensitive) [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-starts-with) */
  attributeCodeStartsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeIsNegativeInFilterBetween?: InputMaybe<Array<InputMaybe<Scalars['Boolean']['input']>>>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeIsNegativeInFilterEquals?: InputMaybe<Scalars['Boolean']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeIsNegativeInFilterGreaterThan?: InputMaybe<Scalars['Boolean']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeIsNegativeInFilterGreaterThanEquals?: InputMaybe<Scalars['Boolean']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeIsNegativeInFilterInSet?: InputMaybe<Array<Scalars['Boolean']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeIsNegativeInFilterIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeIsNegativeInFilterLessThan?: InputMaybe<Scalars['Boolean']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeIsNegativeInFilterLessThanEquals?: InputMaybe<Scalars['Boolean']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeIsVisibleInDetailBetween?: InputMaybe<Array<InputMaybe<Scalars['Boolean']['input']>>>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeIsVisibleInDetailEquals?: InputMaybe<Scalars['Boolean']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeIsVisibleInDetailGreaterThan?: InputMaybe<Scalars['Boolean']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeIsVisibleInDetailGreaterThanEquals?: InputMaybe<Scalars['Boolean']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeIsVisibleInDetailInSet?: InputMaybe<Array<Scalars['Boolean']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeIsVisibleInDetailIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeIsVisibleInDetailLessThan?: InputMaybe<Scalars['Boolean']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeIsVisibleInDetailLessThanEquals?: InputMaybe<Scalars['Boolean']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeIsVisibleInFilterBetween?: InputMaybe<Array<InputMaybe<Scalars['Boolean']['input']>>>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeIsVisibleInFilterEquals?: InputMaybe<Scalars['Boolean']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeIsVisibleInFilterGreaterThan?: InputMaybe<Scalars['Boolean']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeIsVisibleInFilterGreaterThanEquals?: InputMaybe<Scalars['Boolean']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeIsVisibleInFilterInSet?: InputMaybe<Array<Scalars['Boolean']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeIsVisibleInFilterIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeIsVisibleInFilterLessThan?: InputMaybe<Scalars['Boolean']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeIsVisibleInFilterLessThanEquals?: InputMaybe<Scalars['Boolean']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeNameBetween?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute contains part of passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-contains) */
  attributeNameContains?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute ends with passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-ends-with) */
  attributeNameEndsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeNameEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeNameGreaterThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeNameGreaterThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeNameInSet?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeNameIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeNameLessThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeNameLessThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attributes starts with passed text. (case-sensitive) [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-starts-with) */
  attributeNameStartsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributePublishedBetween?: InputMaybe<Array<InputMaybe<Scalars['OffsetDateTime']['input']>>>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributePublishedEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributePublishedGreaterThan?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributePublishedGreaterThanEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributePublishedInSet?: InputMaybe<Array<Scalars['OffsetDateTime']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributePublishedIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributePublishedLessThan?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributePublishedLessThanEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeStatusBetween?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute contains part of passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-contains) */
  attributeStatusContains?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute ends with passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-ends-with) */
  attributeStatusEndsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeStatusEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeStatusGreaterThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeStatusGreaterThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeStatusInSet?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeStatusIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeStatusLessThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeStatusLessThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attributes starts with passed text. (case-sensitive) [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-starts-with) */
  attributeStatusStartsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeSubTypeBetween?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute contains part of passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-contains) */
  attributeSubTypeContains?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute ends with passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-ends-with) */
  attributeSubTypeEndsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeSubTypeEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeSubTypeGreaterThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeSubTypeGreaterThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeSubTypeInSet?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeSubTypeIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeSubTypeLessThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeSubTypeLessThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attributes starts with passed text. (case-sensitive) [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-starts-with) */
  attributeSubTypeStartsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeUrlBetween?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute contains part of passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-contains) */
  attributeUrlContains?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute ends with passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-ends-with) */
  attributeUrlEndsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeUrlEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeUrlGreaterThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeUrlGreaterThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeUrlInSet?: InputMaybe<Array<Scalars['String']['input']>>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeUrlInactiveBetween?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute contains part of passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-contains) */
  attributeUrlInactiveContains?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute ends with passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-ends-with) */
  attributeUrlInactiveEndsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeUrlInactiveEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeUrlInactiveGreaterThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeUrlInactiveGreaterThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeUrlInactiveInSet?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeUrlInactiveIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeUrlInactiveLessThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeUrlInactiveLessThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attributes starts with passed text. (case-sensitive) [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-starts-with) */
  attributeUrlInactiveStartsWith?: InputMaybe<Scalars['String']['input']>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeUrlIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeUrlLessThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeUrlLessThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attributes starts with passed text. (case-sensitive) [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-starts-with) */
  attributeUrlStartsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeValidityBetween?: InputMaybe<Array<InputMaybe<Scalars['OffsetDateTime']['input']>>>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeValidityEquals?: InputMaybe<Scalars['DateTimeRange']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeValidityGreaterThan?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeValidityGreaterThanEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the range value of that attribute contains the passed value within its limits (both ends are inclusive). The constraint can be used only for Range data type values. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/range#attribute-in-range) */
  attributeValidityInRange?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeValidityInSet?: InputMaybe<Array<Scalars['DateTimeRange']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeValidityIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeValidityLessThan?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeValidityLessThanEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeVisibilityBetween?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute contains part of passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-contains) */
  attributeVisibilityContains?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute ends with passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-ends-with) */
  attributeVisibilityEndsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeVisibilityEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeVisibilityGreaterThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeVisibilityGreaterThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeVisibilityInSet?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeVisibilityIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeVisibilityLessThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeVisibilityLessThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attributes starts with passed text. (case-sensitive) [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-starts-with) */
  attributeVisibilityStartsWith?: InputMaybe<Scalars['String']['input']>;
  /** The constraint if at least one of entity locales (derived from entity attributes or associated data) equals to the passed one. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/locale#entity-locale-equals) */
  entityLocaleEquals?: InputMaybe<CatalogLocale>;
  /** The constraint checks if primary key of the entity equals to at least one of the passed values. The constraint is equivalent to one or more `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/constant#entity-primary-key-in-set) */
  entityPrimaryKeyInSet?: InputMaybe<Array<Scalars['Int']['input']>>;
  /** The container that behaves as [logical NOT](https://en.wikipedia.org/wiki/Negation) for the inner constraint. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/logical#not) */
  not?: InputMaybe<FilterContainer9151b3bab054ab55>;
  /** The container that combines inner constraints with [logical OR](https://en.wikipedia.org/wiki/Logical_disjunction). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/logical#or) */
  or?: InputMaybe<Array<FilterContainer9151b3bab054ab55>>;
  /** The container allowing to filter entities by having references to entities managed by evitaDB that match the inner filter constraint. This container resembles the SQL inner join clauses. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/references#reference-having) */
  referenceParameterGroupsHaving?: InputMaybe<Array<FilterContainerdada3d3e768d055c>>;
  /** The container for constraints that are controlled by the user (client UI widgets). It is used mainly to distinguish between user constraint (refining the search) and program defined constraints (considered mandatory), when the extra results are computed. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/behavioral#user-filter) */
  userFilter?: InputMaybe<Array<FilterContainerfd7b159f44637dbe>>;
};

export type FilterContainer11895e8d40db8091 = {
  /** The container that combines inner constraints with [logical AND](https://en.wikipedia.org/wiki/Logical_conjunction). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/logical#and) */
  and?: InputMaybe<Array<FilterContainer11895e8d40db8091>>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeChangedBetween?: InputMaybe<Array<InputMaybe<Scalars['OffsetDateTime']['input']>>>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeChangedEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeChangedGreaterThan?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeChangedGreaterThanEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeChangedInSet?: InputMaybe<Array<Scalars['OffsetDateTime']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeChangedIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeChangedLessThan?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeChangedLessThanEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeCodeBetween?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute contains part of passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-contains) */
  attributeCodeContains?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute ends with passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-ends-with) */
  attributeCodeEndsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeCodeEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeCodeGreaterThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeCodeGreaterThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeCodeInSet?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeCodeIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeCodeLessThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeCodeLessThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attributes starts with passed text. (case-sensitive) [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-starts-with) */
  attributeCodeStartsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeNameBetween?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute contains part of passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-contains) */
  attributeNameContains?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute ends with passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-ends-with) */
  attributeNameEndsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeNameEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeNameGreaterThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeNameGreaterThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeNameInSet?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeNameIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeNameLessThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeNameLessThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attributes starts with passed text. (case-sensitive) [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-starts-with) */
  attributeNameStartsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributePublishedBetween?: InputMaybe<Array<InputMaybe<Scalars['OffsetDateTime']['input']>>>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributePublishedEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributePublishedGreaterThan?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributePublishedGreaterThanEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributePublishedInSet?: InputMaybe<Array<Scalars['OffsetDateTime']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributePublishedIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributePublishedLessThan?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributePublishedLessThanEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeStatusBetween?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute contains part of passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-contains) */
  attributeStatusContains?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute ends with passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-ends-with) */
  attributeStatusEndsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeStatusEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeStatusGreaterThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeStatusGreaterThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeStatusInSet?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeStatusIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeStatusLessThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeStatusLessThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attributes starts with passed text. (case-sensitive) [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-starts-with) */
  attributeStatusStartsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeUrlBetween?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute contains part of passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-contains) */
  attributeUrlContains?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute ends with passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-ends-with) */
  attributeUrlEndsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeUrlEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeUrlGreaterThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeUrlGreaterThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeUrlInSet?: InputMaybe<Array<Scalars['String']['input']>>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeUrlInactiveBetween?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute contains part of passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-contains) */
  attributeUrlInactiveContains?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute ends with passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-ends-with) */
  attributeUrlInactiveEndsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeUrlInactiveEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeUrlInactiveGreaterThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeUrlInactiveGreaterThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeUrlInactiveInSet?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeUrlInactiveIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeUrlInactiveLessThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeUrlInactiveLessThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attributes starts with passed text. (case-sensitive) [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-starts-with) */
  attributeUrlInactiveStartsWith?: InputMaybe<Scalars['String']['input']>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeUrlIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeUrlLessThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeUrlLessThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attributes starts with passed text. (case-sensitive) [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-starts-with) */
  attributeUrlStartsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeValidityBetween?: InputMaybe<Array<InputMaybe<Scalars['OffsetDateTime']['input']>>>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeValidityEquals?: InputMaybe<Scalars['DateTimeRange']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeValidityGreaterThan?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeValidityGreaterThanEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the range value of that attribute contains the passed value within its limits (both ends are inclusive). The constraint can be used only for Range data type values. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/range#attribute-in-range) */
  attributeValidityInRange?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeValidityInSet?: InputMaybe<Array<Scalars['DateTimeRange']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeValidityIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeValidityLessThan?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeValidityLessThanEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeVisibilityBetween?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute contains part of passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-contains) */
  attributeVisibilityContains?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute ends with passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-ends-with) */
  attributeVisibilityEndsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeVisibilityEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeVisibilityGreaterThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeVisibilityGreaterThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeVisibilityInSet?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeVisibilityIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeVisibilityLessThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeVisibilityLessThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attributes starts with passed text. (case-sensitive) [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-starts-with) */
  attributeVisibilityStartsWith?: InputMaybe<Scalars['String']['input']>;
  /** The constraint if at least one of entity locales (derived from entity attributes or associated data) equals to the passed one. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/locale#entity-locale-equals) */
  entityLocaleEquals?: InputMaybe<CatalogLocale>;
  /** The constraint checks if primary key of the entity equals to at least one of the passed values. The constraint is equivalent to one or more `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/constant#entity-primary-key-in-set) */
  entityPrimaryKeyInSet?: InputMaybe<Array<Scalars['Int']['input']>>;
  /** The container that behaves as [logical NOT](https://en.wikipedia.org/wiki/Negation) for the inner constraint. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/logical#not) */
  not?: InputMaybe<FilterContainer11895e8d40db8091>;
  /** The container that combines inner constraints with [logical OR](https://en.wikipedia.org/wiki/Logical_disjunction). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/logical#or) */
  or?: InputMaybe<Array<FilterContainer11895e8d40db8091>>;
  /** The container for constraints that are controlled by the user (client UI widgets). It is used mainly to distinguish between user constraint (refining the search) and program defined constraints (considered mandatory), when the extra results are computed. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/behavioral#user-filter) */
  userFilter?: InputMaybe<Array<FilterContainer17d91b200f6104a3>>;
};

export type FilterContainer39625b717408ab5f = {
  /** The container that combines inner constraints with [logical AND](https://en.wikipedia.org/wiki/Logical_conjunction). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/logical#and) */
  and?: InputMaybe<Array<FilterContainer150edb03f6a8549a>>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeChangedBetween?: InputMaybe<Array<InputMaybe<Scalars['OffsetDateTime']['input']>>>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeChangedEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeChangedGreaterThan?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeChangedGreaterThanEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeChangedInSet?: InputMaybe<Array<Scalars['OffsetDateTime']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeChangedIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeChangedLessThan?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeChangedLessThanEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeCodeBetween?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute contains part of passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-contains) */
  attributeCodeContains?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute ends with passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-ends-with) */
  attributeCodeEndsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeCodeEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeCodeGreaterThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeCodeGreaterThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeCodeInSet?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeCodeIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeCodeLessThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeCodeLessThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attributes starts with passed text. (case-sensitive) [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-starts-with) */
  attributeCodeStartsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeCurrencyBetween?: InputMaybe<Array<InputMaybe<Scalars['Currency']['input']>>>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeCurrencyEquals?: InputMaybe<Scalars['Currency']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeCurrencyGreaterThan?: InputMaybe<Scalars['Currency']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeCurrencyGreaterThanEquals?: InputMaybe<Scalars['Currency']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeCurrencyInSet?: InputMaybe<Array<Scalars['Currency']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeCurrencyIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeCurrencyLessThan?: InputMaybe<Scalars['Currency']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeCurrencyLessThanEquals?: InputMaybe<Scalars['Currency']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeNameBetween?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute contains part of passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-contains) */
  attributeNameContains?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute ends with passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-ends-with) */
  attributeNameEndsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeNameEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeNameGreaterThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeNameGreaterThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeNameInSet?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeNameIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeNameLessThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeNameLessThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attributes starts with passed text. (case-sensitive) [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-starts-with) */
  attributeNameStartsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributePublishedBetween?: InputMaybe<Array<InputMaybe<Scalars['OffsetDateTime']['input']>>>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributePublishedEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributePublishedGreaterThan?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributePublishedGreaterThanEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributePublishedInSet?: InputMaybe<Array<Scalars['OffsetDateTime']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributePublishedIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributePublishedLessThan?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributePublishedLessThanEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeStatusBetween?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute contains part of passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-contains) */
  attributeStatusContains?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute ends with passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-ends-with) */
  attributeStatusEndsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeStatusEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeStatusGreaterThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeStatusGreaterThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeStatusInSet?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeStatusIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeStatusLessThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeStatusLessThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attributes starts with passed text. (case-sensitive) [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-starts-with) */
  attributeStatusStartsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeUrlBetween?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute contains part of passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-contains) */
  attributeUrlContains?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute ends with passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-ends-with) */
  attributeUrlEndsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeUrlEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeUrlGreaterThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeUrlGreaterThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeUrlInSet?: InputMaybe<Array<Scalars['String']['input']>>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeUrlInactiveBetween?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute contains part of passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-contains) */
  attributeUrlInactiveContains?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute ends with passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-ends-with) */
  attributeUrlInactiveEndsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeUrlInactiveEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeUrlInactiveGreaterThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeUrlInactiveGreaterThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeUrlInactiveInSet?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeUrlInactiveIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeUrlInactiveLessThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeUrlInactiveLessThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attributes starts with passed text. (case-sensitive) [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-starts-with) */
  attributeUrlInactiveStartsWith?: InputMaybe<Scalars['String']['input']>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeUrlIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeUrlLessThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeUrlLessThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attributes starts with passed text. (case-sensitive) [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-starts-with) */
  attributeUrlStartsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeUsageConditionBetween?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute contains part of passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-contains) */
  attributeUsageConditionContains?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute ends with passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-ends-with) */
  attributeUsageConditionEndsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeUsageConditionEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeUsageConditionGreaterThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeUsageConditionGreaterThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeUsageConditionInSet?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeUsageConditionIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeUsageConditionLessThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeUsageConditionLessThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attributes starts with passed text. (case-sensitive) [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-starts-with) */
  attributeUsageConditionStartsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeValidityBetween?: InputMaybe<Array<InputMaybe<Scalars['OffsetDateTime']['input']>>>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeValidityEquals?: InputMaybe<Scalars['DateTimeRange']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeValidityGreaterThan?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeValidityGreaterThanEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the range value of that attribute contains the passed value within its limits (both ends are inclusive). The constraint can be used only for Range data type values. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/range#attribute-in-range) */
  attributeValidityInRange?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeValidityInSet?: InputMaybe<Array<Scalars['DateTimeRange']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeValidityIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeValidityLessThan?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeValidityLessThanEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeVisibleOnDetailBetween?: InputMaybe<Array<InputMaybe<Scalars['Boolean']['input']>>>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeVisibleOnDetailEquals?: InputMaybe<Scalars['Boolean']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeVisibleOnDetailGreaterThan?: InputMaybe<Scalars['Boolean']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeVisibleOnDetailGreaterThanEquals?: InputMaybe<Scalars['Boolean']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeVisibleOnDetailInSet?: InputMaybe<Array<Scalars['Boolean']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeVisibleOnDetailIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeVisibleOnDetailLessThan?: InputMaybe<Scalars['Boolean']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeVisibleOnDetailLessThanEquals?: InputMaybe<Scalars['Boolean']['input']>;
  /** The constraint checks if primary key of the entity equals to at least one of the passed values. The constraint is equivalent to one or more `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/constant#entity-primary-key-in-set) */
  entityPrimaryKeyInSet?: InputMaybe<Array<Scalars['Int']['input']>>;
  /** The container that behaves as [logical NOT](https://en.wikipedia.org/wiki/Negation) for the inner constraint. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/logical#not) */
  not?: InputMaybe<FilterContainer150edb03f6a8549a>;
  /** The container that combines inner constraints with [logical OR](https://en.wikipedia.org/wiki/Logical_disjunction). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/logical#or) */
  or?: InputMaybe<Array<FilterContainer150edb03f6a8549a>>;
};

export type FilterContainer60712c1bd118553d = {
  /** The container that combines inner constraints with [logical AND](https://en.wikipedia.org/wiki/Logical_conjunction). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/logical#and) */
  and?: InputMaybe<Array<FilterContainer60712c1bd118553d>>;
  /** The container allowing to filter entities by having references to entities managed by evitaDB that match inner filtering constraints. This container resembles the SQL inner join clauses where the `entityHaving`contains the filtering condition on particular join. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/references#entity-having) */
  entityHaving?: InputMaybe<FilterContainer11895e8d40db8091>;
  /** The constraint checks if primary key of the entity equals to at least one of the passed values. The constraint is equivalent to one or more `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/constant#entity-primary-key-in-set) */
  entityPrimaryKeyInSet?: InputMaybe<Array<Scalars['Int']['input']>>;
  /** The container that behaves as [logical NOT](https://en.wikipedia.org/wiki/Negation) for the inner constraint. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/logical#not) */
  not?: InputMaybe<FilterContainer60712c1bd118553d>;
  /** The container that combines inner constraints with [logical OR](https://en.wikipedia.org/wiki/Logical_disjunction). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/logical#or) */
  or?: InputMaybe<Array<FilterContainer60712c1bd118553d>>;
};

export type FilterContainer464975cef7a99c2c = {
  /** The container that combines inner constraints with [logical AND](https://en.wikipedia.org/wiki/Logical_conjunction). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/logical#and) */
  and?: InputMaybe<Array<FilterContainer464975cef7a99c2c>>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeCategoryBetween?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute contains part of passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-contains) */
  attributeCategoryContains?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute ends with passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-ends-with) */
  attributeCategoryEndsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeCategoryEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeCategoryGreaterThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeCategoryGreaterThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeCategoryInSet?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeCategoryIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeCategoryLessThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeCategoryLessThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attributes starts with passed text. (case-sensitive) [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-starts-with) */
  attributeCategoryStartsWith?: InputMaybe<Scalars['String']['input']>;
  /** The container allowing to filter entities by having references to entities managed by evitaDB that match inner filtering constraints. This container resembles the SQL inner join clauses where the `entityHaving`contains the filtering condition on particular join. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/references#entity-having) */
  entityHaving?: InputMaybe<FilterContainer585fda0640662fe0>;
  /** The constraint checks if primary key of the entity equals to at least one of the passed values. The constraint is equivalent to one or more `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/constant#entity-primary-key-in-set) */
  entityPrimaryKeyInSet?: InputMaybe<Array<Scalars['Int']['input']>>;
  /** The container that behaves as [logical NOT](https://en.wikipedia.org/wiki/Negation) for the inner constraint. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/logical#not) */
  not?: InputMaybe<FilterContainer464975cef7a99c2c>;
  /** The container that combines inner constraints with [logical OR](https://en.wikipedia.org/wiki/Logical_disjunction). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/logical#or) */
  or?: InputMaybe<Array<FilterContainer464975cef7a99c2c>>;
};

export type FilterContainer744027555f798cbb = {
  /** The container that combines inner constraints with [logical AND](https://en.wikipedia.org/wiki/Logical_conjunction). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/logical#and) */
  and?: InputMaybe<Array<FilterContainer744027555f798cbb>>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeChangedBetween?: InputMaybe<Array<InputMaybe<Scalars['OffsetDateTime']['input']>>>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeChangedEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeChangedGreaterThan?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeChangedGreaterThanEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeChangedInSet?: InputMaybe<Array<Scalars['OffsetDateTime']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeChangedIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeChangedLessThan?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeChangedLessThanEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeCodeBetween?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute contains part of passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-contains) */
  attributeCodeContains?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute ends with passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-ends-with) */
  attributeCodeEndsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeCodeEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeCodeGreaterThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeCodeGreaterThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeCodeInSet?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeCodeIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeCodeLessThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeCodeLessThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attributes starts with passed text. (case-sensitive) [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-starts-with) */
  attributeCodeStartsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeNameBetween?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute contains part of passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-contains) */
  attributeNameContains?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute ends with passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-ends-with) */
  attributeNameEndsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeNameEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeNameGreaterThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeNameGreaterThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeNameInSet?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeNameIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeNameLessThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeNameLessThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attributes starts with passed text. (case-sensitive) [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-starts-with) */
  attributeNameStartsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributePublishedBetween?: InputMaybe<Array<InputMaybe<Scalars['OffsetDateTime']['input']>>>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributePublishedEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributePublishedGreaterThan?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributePublishedGreaterThanEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributePublishedInSet?: InputMaybe<Array<Scalars['OffsetDateTime']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributePublishedIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributePublishedLessThan?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributePublishedLessThanEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeStatusBetween?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute contains part of passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-contains) */
  attributeStatusContains?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute ends with passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-ends-with) */
  attributeStatusEndsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeStatusEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeStatusGreaterThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeStatusGreaterThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeStatusInSet?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeStatusIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeStatusLessThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeStatusLessThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attributes starts with passed text. (case-sensitive) [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-starts-with) */
  attributeStatusStartsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeUrlBetween?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute contains part of passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-contains) */
  attributeUrlContains?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute ends with passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-ends-with) */
  attributeUrlEndsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeUrlEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeUrlGreaterThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeUrlGreaterThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeUrlInSet?: InputMaybe<Array<Scalars['String']['input']>>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeUrlInactiveBetween?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute contains part of passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-contains) */
  attributeUrlInactiveContains?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute ends with passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-ends-with) */
  attributeUrlInactiveEndsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeUrlInactiveEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeUrlInactiveGreaterThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeUrlInactiveGreaterThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeUrlInactiveInSet?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeUrlInactiveIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeUrlInactiveLessThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeUrlInactiveLessThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attributes starts with passed text. (case-sensitive) [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-starts-with) */
  attributeUrlInactiveStartsWith?: InputMaybe<Scalars['String']['input']>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeUrlIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeUrlLessThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeUrlLessThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attributes starts with passed text. (case-sensitive) [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-starts-with) */
  attributeUrlStartsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeValidityBetween?: InputMaybe<Array<InputMaybe<Scalars['OffsetDateTime']['input']>>>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeValidityEquals?: InputMaybe<Scalars['DateTimeRange']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeValidityGreaterThan?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeValidityGreaterThanEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the range value of that attribute contains the passed value within its limits (both ends are inclusive). The constraint can be used only for Range data type values. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/range#attribute-in-range) */
  attributeValidityInRange?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeValidityInSet?: InputMaybe<Array<Scalars['DateTimeRange']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeValidityIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeValidityLessThan?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeValidityLessThanEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeVisibilityBetween?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute contains part of passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-contains) */
  attributeVisibilityContains?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute ends with passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-ends-with) */
  attributeVisibilityEndsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeVisibilityEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeVisibilityGreaterThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeVisibilityGreaterThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeVisibilityInSet?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeVisibilityIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeVisibilityLessThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeVisibilityLessThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attributes starts with passed text. (case-sensitive) [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-starts-with) */
  attributeVisibilityStartsWith?: InputMaybe<Scalars['String']['input']>;
  /** The constraint if at least one of entity locales (derived from entity attributes or associated data) equals to the passed one. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/locale#entity-locale-equals) */
  entityLocaleEquals?: InputMaybe<CatalogLocale>;
  /** The constraint checks if primary key of the entity equals to at least one of the passed values. The constraint is equivalent to one or more `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/constant#entity-primary-key-in-set) */
  entityPrimaryKeyInSet?: InputMaybe<Array<Scalars['Int']['input']>>;
  /** The container allowing to filter entities by having references to entities managed by evitaDB that match the inner filter constraint. This container resembles the SQL inner join clauses and works in cooperation with facet summary requirement. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/references#facet-having) */
  facetSyntheticParameterHaving?: InputMaybe<Array<FilterContainerde14524bdc4e7315>>;
  /** The container that behaves as [logical NOT](https://en.wikipedia.org/wiki/Negation) for the inner constraint. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/logical#not) */
  not?: InputMaybe<FilterContainer744027555f798cbb>;
  /** The container that combines inner constraints with [logical OR](https://en.wikipedia.org/wiki/Logical_disjunction). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/logical#or) */
  or?: InputMaybe<Array<FilterContainer744027555f798cbb>>;
  /** The container allowing to filter entities by having references to entities managed by evitaDB that match the inner filter constraint. This container resembles the SQL inner join clauses. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/references#reference-having) */
  referenceParameterHaving?: InputMaybe<Array<FilterContaineraf11c41d5e9f5526>>;
  /** The container allowing to filter entities by having references to entities managed by evitaDB that match the inner filter constraint. This container resembles the SQL inner join clauses. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/references#reference-having) */
  referenceSyntheticParameterHaving?: InputMaybe<Array<FilterContainerde14524bdc4e7315>>;
  /** The container for constraints that are controlled by the user (client UI widgets). It is used mainly to distinguish between user constraint (refining the search) and program defined constraints (considered mandatory), when the extra results are computed. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/behavioral#user-filter) */
  userFilter?: InputMaybe<Array<FilterContainer393f9b1899cbf3ee>>;
};

export type FilterContainera8a85d9a060ac1e6 = {
  /** The container that combines inner constraints with [logical AND](https://en.wikipedia.org/wiki/Logical_conjunction). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/logical#and) */
  and?: InputMaybe<Array<FilterContainera8a85d9a060ac1e6>>;
  /** The container allowing to filter entities by having references to entities managed by evitaDB that match inner filtering constraints. This container resembles the SQL inner join clauses where the `entityHaving`contains the filtering condition on particular join. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/references#entity-having) */
  entityHaving?: InputMaybe<FilterContainer967c71ead6465215>;
  /** The constraint checks if primary key of the entity equals to at least one of the passed values. The constraint is equivalent to one or more `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/constant#entity-primary-key-in-set) */
  entityPrimaryKeyInSet?: InputMaybe<Array<Scalars['Int']['input']>>;
  /** The container that behaves as [logical NOT](https://en.wikipedia.org/wiki/Negation) for the inner constraint. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/logical#not) */
  not?: InputMaybe<FilterContainera8a85d9a060ac1e6>;
  /** The container that combines inner constraints with [logical OR](https://en.wikipedia.org/wiki/Logical_disjunction). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/logical#or) */
  or?: InputMaybe<Array<FilterContainera8a85d9a060ac1e6>>;
};

export type FilterContainera24e57ad70b0d28e = {
  /** The container that combines inner constraints with [logical AND](https://en.wikipedia.org/wiki/Logical_conjunction). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/logical#and) */
  and?: InputMaybe<Array<FilterContainer3a2a9890a875d4bd>>;
  /** The constraint checks if primary key of the entity equals to at least one of the passed values. The constraint is equivalent to one or more `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/constant#entity-primary-key-in-set) */
  entityPrimaryKeyInSet?: InputMaybe<Array<Scalars['Int']['input']>>;
  /** The container that behaves as [logical NOT](https://en.wikipedia.org/wiki/Negation) for the inner constraint. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/logical#not) */
  not?: InputMaybe<FilterContainer3a2a9890a875d4bd>;
  /** The container that combines inner constraints with [logical OR](https://en.wikipedia.org/wiki/Logical_disjunction). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/logical#or) */
  or?: InputMaybe<Array<FilterContainer3a2a9890a875d4bd>>;
};

export type FilterContaineraf11c41d5e9f5526 = {
  /** The container that combines inner constraints with [logical AND](https://en.wikipedia.org/wiki/Logical_conjunction). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/logical#and) */
  and?: InputMaybe<Array<FilterContaineraf11c41d5e9f5526>>;
  /** The container allowing to filter entities by having references to entities managed by evitaDB that match inner filtering constraints. This container resembles the SQL inner join clauses where the `entityHaving`contains the filtering condition on particular join. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/references#entity-having) */
  entityHaving?: InputMaybe<FilterContainer9151b3bab054ab55>;
  /** The constraint checks if primary key of the entity equals to at least one of the passed values. The constraint is equivalent to one or more `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/constant#entity-primary-key-in-set) */
  entityPrimaryKeyInSet?: InputMaybe<Array<Scalars['Int']['input']>>;
  /** The container that behaves as [logical NOT](https://en.wikipedia.org/wiki/Negation) for the inner constraint. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/logical#not) */
  not?: InputMaybe<FilterContaineraf11c41d5e9f5526>;
  /** The container that combines inner constraints with [logical OR](https://en.wikipedia.org/wiki/Logical_disjunction). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/logical#or) */
  or?: InputMaybe<Array<FilterContaineraf11c41d5e9f5526>>;
};

export type FilterContainerb29777b6620f8b8d = {
  /** The container that combines inner constraints with [logical AND](https://en.wikipedia.org/wiki/Logical_conjunction). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/logical#and) */
  and?: InputMaybe<Array<FilterContainerb29777b6620f8b8d>>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeChangedBetween?: InputMaybe<Array<InputMaybe<Scalars['OffsetDateTime']['input']>>>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeChangedEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeChangedGreaterThan?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeChangedGreaterThanEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeChangedInSet?: InputMaybe<Array<Scalars['OffsetDateTime']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeChangedIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeChangedLessThan?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeChangedLessThanEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeCodeBetween?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute contains part of passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-contains) */
  attributeCodeContains?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute ends with passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-ends-with) */
  attributeCodeEndsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeCodeEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeCodeGreaterThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeCodeGreaterThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeCodeInSet?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeCodeIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeCodeLessThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeCodeLessThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attributes starts with passed text. (case-sensitive) [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-starts-with) */
  attributeCodeStartsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeNameBetween?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute contains part of passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-contains) */
  attributeNameContains?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute ends with passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-ends-with) */
  attributeNameEndsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeNameEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeNameGreaterThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeNameGreaterThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeNameInSet?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeNameIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeNameLessThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeNameLessThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attributes starts with passed text. (case-sensitive) [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-starts-with) */
  attributeNameStartsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributePublishedBetween?: InputMaybe<Array<InputMaybe<Scalars['OffsetDateTime']['input']>>>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributePublishedEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributePublishedGreaterThan?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributePublishedGreaterThanEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributePublishedInSet?: InputMaybe<Array<Scalars['OffsetDateTime']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributePublishedIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributePublishedLessThan?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributePublishedLessThanEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeStatusBetween?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute contains part of passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-contains) */
  attributeStatusContains?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute ends with passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-ends-with) */
  attributeStatusEndsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeStatusEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeStatusGreaterThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeStatusGreaterThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeStatusInSet?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeStatusIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeStatusLessThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeStatusLessThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attributes starts with passed text. (case-sensitive) [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-starts-with) */
  attributeStatusStartsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeUrlBetween?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute contains part of passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-contains) */
  attributeUrlContains?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute ends with passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-ends-with) */
  attributeUrlEndsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeUrlEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeUrlGreaterThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeUrlGreaterThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeUrlInSet?: InputMaybe<Array<Scalars['String']['input']>>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeUrlInactiveBetween?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute contains part of passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-contains) */
  attributeUrlInactiveContains?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute ends with passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-ends-with) */
  attributeUrlInactiveEndsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeUrlInactiveEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeUrlInactiveGreaterThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeUrlInactiveGreaterThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeUrlInactiveInSet?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeUrlInactiveIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeUrlInactiveLessThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeUrlInactiveLessThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attributes starts with passed text. (case-sensitive) [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-starts-with) */
  attributeUrlInactiveStartsWith?: InputMaybe<Scalars['String']['input']>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeUrlIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeUrlLessThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeUrlLessThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attributes starts with passed text. (case-sensitive) [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-starts-with) */
  attributeUrlStartsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeUsageConditionBetween?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute contains part of passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-contains) */
  attributeUsageConditionContains?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute ends with passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-ends-with) */
  attributeUsageConditionEndsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeUsageConditionEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeUsageConditionGreaterThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeUsageConditionGreaterThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeUsageConditionInSet?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeUsageConditionIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeUsageConditionLessThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeUsageConditionLessThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attributes starts with passed text. (case-sensitive) [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-starts-with) */
  attributeUsageConditionStartsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeValidityBetween?: InputMaybe<Array<InputMaybe<Scalars['OffsetDateTime']['input']>>>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeValidityEquals?: InputMaybe<Scalars['DateTimeRange']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeValidityGreaterThan?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeValidityGreaterThanEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the range value of that attribute contains the passed value within its limits (both ends are inclusive). The constraint can be used only for Range data type values. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/range#attribute-in-range) */
  attributeValidityInRange?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeValidityInSet?: InputMaybe<Array<Scalars['DateTimeRange']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeValidityIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeValidityLessThan?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeValidityLessThanEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** The constraint if at least one of entity locales (derived from entity attributes or associated data) equals to the passed one. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/locale#entity-locale-equals) */
  entityLocaleEquals?: InputMaybe<CatalogLocale>;
  /** The constraint checks if primary key of the entity equals to at least one of the passed values. The constraint is equivalent to one or more `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/constant#entity-primary-key-in-set) */
  entityPrimaryKeyInSet?: InputMaybe<Array<Scalars['Int']['input']>>;
  /** The container that behaves as [logical NOT](https://en.wikipedia.org/wiki/Negation) for the inner constraint. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/logical#not) */
  not?: InputMaybe<FilterContainerb29777b6620f8b8d>;
  /** The container that combines inner constraints with [logical OR](https://en.wikipedia.org/wiki/Logical_disjunction). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/logical#or) */
  or?: InputMaybe<Array<FilterContainerb29777b6620f8b8d>>;
  /** The container for constraints that are controlled by the user (client UI widgets). It is used mainly to distinguish between user constraint (refining the search) and program defined constraints (considered mandatory), when the extra results are computed. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/behavioral#user-filter) */
  userFilter?: InputMaybe<Array<FilterContainer9db3ee38192a376c>>;
};

export type FilterContainerbce0a3eba231c049 = {
  /** The container that combines inner constraints with [logical AND](https://en.wikipedia.org/wiki/Logical_conjunction). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/logical#and) */
  and?: InputMaybe<Array<FilterContainerbce0a3eba231c049>>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeCategoryBetween?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute contains part of passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-contains) */
  attributeCategoryContains?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute ends with passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-ends-with) */
  attributeCategoryEndsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeCategoryEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeCategoryGreaterThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeCategoryGreaterThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeCategoryInSet?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeCategoryIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeCategoryLessThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeCategoryLessThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attributes starts with passed text. (case-sensitive) [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-starts-with) */
  attributeCategoryStartsWith?: InputMaybe<Scalars['String']['input']>;
  /** The container allowing to filter entities by having references to entities managed by evitaDB that match inner filtering constraints. This container resembles the SQL inner join clauses where the `entityHaving`contains the filtering condition on particular join. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/references#entity-having) */
  entityHaving?: InputMaybe<FilterContainer585fda0640662fe0>;
  /** The constraint checks if primary key of the entity equals to at least one of the passed values. The constraint is equivalent to one or more `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/constant#entity-primary-key-in-set) */
  entityPrimaryKeyInSet?: InputMaybe<Array<Scalars['Int']['input']>>;
  /** The container that behaves as [logical NOT](https://en.wikipedia.org/wiki/Negation) for the inner constraint. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/logical#not) */
  not?: InputMaybe<FilterContainerbce0a3eba231c049>;
  /** The container that combines inner constraints with [logical OR](https://en.wikipedia.org/wiki/Logical_disjunction). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/logical#or) */
  or?: InputMaybe<Array<FilterContainerbce0a3eba231c049>>;
};

export type FilterContainerc3e9b0836f7ff7f0 = {
  /** The container that combines inner constraints with [logical AND](https://en.wikipedia.org/wiki/Logical_conjunction). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/logical#and) */
  and?: InputMaybe<Array<FilterContainerfc37342b44def3ac>>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeCatalogNumberBetween?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute contains part of passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-contains) */
  attributeCatalogNumberContains?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute ends with passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-ends-with) */
  attributeCatalogNumberEndsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeCatalogNumberEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeCatalogNumberGreaterThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeCatalogNumberGreaterThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeCatalogNumberInSet?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeCatalogNumberIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeCatalogNumberLessThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeCatalogNumberLessThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attributes starts with passed text. (case-sensitive) [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-starts-with) */
  attributeCatalogNumberStartsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeChangedBetween?: InputMaybe<Array<InputMaybe<Scalars['OffsetDateTime']['input']>>>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeChangedEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeChangedGreaterThan?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeChangedGreaterThanEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeChangedInSet?: InputMaybe<Array<Scalars['OffsetDateTime']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeChangedIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeChangedLessThan?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeChangedLessThanEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeCodeBetween?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute contains part of passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-contains) */
  attributeCodeContains?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute ends with passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-ends-with) */
  attributeCodeEndsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeCodeEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeCodeGreaterThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeCodeGreaterThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeCodeInSet?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeCodeIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeCodeLessThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeCodeLessThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeCodeShortBetween?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute contains part of passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-contains) */
  attributeCodeShortContains?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute ends with passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-ends-with) */
  attributeCodeShortEndsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeCodeShortEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeCodeShortGreaterThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeCodeShortGreaterThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeCodeShortInSet?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeCodeShortIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeCodeShortLessThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeCodeShortLessThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attributes starts with passed text. (case-sensitive) [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-starts-with) */
  attributeCodeShortStartsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attributes starts with passed text. (case-sensitive) [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-starts-with) */
  attributeCodeStartsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeEanBetween?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute contains part of passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-contains) */
  attributeEanContains?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute ends with passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-ends-with) */
  attributeEanEndsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeEanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeEanGreaterThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeEanGreaterThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeEanInSet?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeEanIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeEanLessThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeEanLessThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attributes starts with passed text. (case-sensitive) [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-starts-with) */
  attributeEanStartsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeIsBookAsSetBetween?: InputMaybe<Array<InputMaybe<Scalars['Boolean']['input']>>>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeIsBookAsSetEquals?: InputMaybe<Scalars['Boolean']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeIsBookAsSetGreaterThan?: InputMaybe<Scalars['Boolean']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeIsBookAsSetGreaterThanEquals?: InputMaybe<Scalars['Boolean']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeIsBookAsSetInSet?: InputMaybe<Array<Scalars['Boolean']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeIsBookAsSetIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeIsBookAsSetLessThan?: InputMaybe<Scalars['Boolean']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeIsBookAsSetLessThanEquals?: InputMaybe<Scalars['Boolean']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeNameBetween?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute contains part of passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-contains) */
  attributeNameContains?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute ends with passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-ends-with) */
  attributeNameEndsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeNameEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeNameGreaterThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeNameGreaterThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeNameInSet?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeNameIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeNameLessThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeNameLessThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attributes starts with passed text. (case-sensitive) [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-starts-with) */
  attributeNameStartsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeProductTypeBetween?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute contains part of passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-contains) */
  attributeProductTypeContains?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute ends with passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-ends-with) */
  attributeProductTypeEndsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeProductTypeEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeProductTypeGreaterThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeProductTypeGreaterThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeProductTypeInSet?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeProductTypeIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeProductTypeLessThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeProductTypeLessThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attributes starts with passed text. (case-sensitive) [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-starts-with) */
  attributeProductTypeStartsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributePublishedBetween?: InputMaybe<Array<InputMaybe<Scalars['OffsetDateTime']['input']>>>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributePublishedEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributePublishedGreaterThan?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributePublishedGreaterThanEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributePublishedInSet?: InputMaybe<Array<Scalars['OffsetDateTime']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributePublishedIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributePublishedLessThan?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributePublishedLessThanEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeRatingUsersBetween?: InputMaybe<Array<InputMaybe<Scalars['UUID']['input']>>>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeRatingUsersEquals?: InputMaybe<Scalars['UUID']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeRatingUsersGreaterThan?: InputMaybe<Scalars['UUID']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeRatingUsersGreaterThanEquals?: InputMaybe<Scalars['UUID']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeRatingUsersInSet?: InputMaybe<Array<Scalars['UUID']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeRatingUsersIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeRatingUsersLessThan?: InputMaybe<Scalars['UUID']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeRatingUsersLessThanEquals?: InputMaybe<Scalars['UUID']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeStatusBetween?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute contains part of passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-contains) */
  attributeStatusContains?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute ends with passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-ends-with) */
  attributeStatusEndsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeStatusEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeStatusGreaterThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeStatusGreaterThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeStatusInSet?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeStatusIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeStatusLessThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeStatusLessThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attributes starts with passed text. (case-sensitive) [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-starts-with) */
  attributeStatusStartsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeSupplierCodeBetween?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute contains part of passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-contains) */
  attributeSupplierCodeContains?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute ends with passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-ends-with) */
  attributeSupplierCodeEndsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeSupplierCodeEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeSupplierCodeGreaterThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeSupplierCodeGreaterThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeSupplierCodeInSet?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeSupplierCodeIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeSupplierCodeLessThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeSupplierCodeLessThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attributes starts with passed text. (case-sensitive) [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-starts-with) */
  attributeSupplierCodeStartsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeUrlBetween?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute contains part of passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-contains) */
  attributeUrlContains?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute ends with passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-ends-with) */
  attributeUrlEndsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeUrlEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeUrlGreaterThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeUrlGreaterThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeUrlInSet?: InputMaybe<Array<Scalars['String']['input']>>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeUrlInactiveBetween?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute contains part of passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-contains) */
  attributeUrlInactiveContains?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute ends with passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-ends-with) */
  attributeUrlInactiveEndsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeUrlInactiveEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeUrlInactiveGreaterThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeUrlInactiveGreaterThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeUrlInactiveInSet?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeUrlInactiveIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeUrlInactiveLessThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeUrlInactiveLessThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attributes starts with passed text. (case-sensitive) [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-starts-with) */
  attributeUrlInactiveStartsWith?: InputMaybe<Scalars['String']['input']>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeUrlIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeUrlLessThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeUrlLessThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attributes starts with passed text. (case-sensitive) [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-starts-with) */
  attributeUrlStartsWith?: InputMaybe<Scalars['String']['input']>;
  /** The constraint checks if primary key of the entity equals to at least one of the passed values. The constraint is equivalent to one or more `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/constant#entity-primary-key-in-set) */
  entityPrimaryKeyInSet?: InputMaybe<Array<Scalars['Int']['input']>>;
  /** The container allowing to filter entities by having references to entities managed by evitaDB that match the inner filter constraint. This container resembles the SQL inner join clauses and works in cooperation with facet summary requirement. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/references#facet-having) */
  facetBrandHaving?: InputMaybe<Array<FilterContainerc89c1a6e13324cd>>;
  /** The container allowing to filter entities by having references to entities managed by evitaDB that match the inner filter constraint. This container resembles the SQL inner join clauses and works in cooperation with facet summary requirement. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/references#facet-having) */
  facetCategoriesHaving?: InputMaybe<Array<FilterContainer86dfabccfd23aa32>>;
  /** The container allowing to filter entities by having references to entities managed by evitaDB that match the inner filter constraint. This container resembles the SQL inner join clauses and works in cooperation with facet summary requirement. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/references#facet-having) */
  facetGroupsHaving?: InputMaybe<Array<FilterContainer3e99187591f187d1>>;
  /** The container allowing to filter entities by having references to entities managed by evitaDB that match the inner filter constraint. This container resembles the SQL inner join clauses and works in cooperation with facet summary requirement. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/references#facet-having) */
  facetParameterValuesHaving?: InputMaybe<Array<FilterContainer155ce1a8713f11f>>;
  /** The container allowing to filter entities by having references to entities managed by evitaDB that match the inner filter constraint. This container resembles the SQL inner join clauses and works in cooperation with facet summary requirement. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/references#facet-having) */
  facetTagsHaving?: InputMaybe<Array<FilterContainerf111a7119fe869f8>>;
  /** The container allowing to filter entities by having references to entities managed by evitaDB that match the inner filter constraint. This container resembles the SQL inner join clauses and works in cooperation with facet summary requirement. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/references#facet-having) */
  facetVariantParametersHaving?: InputMaybe<Array<FilterContainere0382ac2d2e8abf2>>;
  /** The container that behaves as [logical NOT](https://en.wikipedia.org/wiki/Negation) for the inner constraint. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/logical#not) */
  not?: InputMaybe<FilterContainerfc37342b44def3ac>;
  /** The container that combines inner constraints with [logical OR](https://en.wikipedia.org/wiki/Logical_disjunction). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/logical#or) */
  or?: InputMaybe<Array<FilterContainerfc37342b44def3ac>>;
  /** The constraint checks if entity has price for sale within the passed range of prices (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/price#price-between) */
  priceBetween?: InputMaybe<Array<InputMaybe<Scalars['BigDecimal']['input']>>>;
};

export type FilterContainerc89c1a6e13324cd = {
  /** The container that combines inner constraints with [logical AND](https://en.wikipedia.org/wiki/Logical_conjunction). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/logical#and) */
  and?: InputMaybe<Array<FilterContainerc89c1a6e13324cd>>;
  /** The container allowing to filter entities by having references to entities managed by evitaDB that match inner filtering constraints. This container resembles the SQL inner join clauses where the `entityHaving`contains the filtering condition on particular join. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/references#entity-having) */
  entityHaving?: InputMaybe<FilterContainer517d1d8ea5c4e742>;
  /** The constraint checks if primary key of the entity equals to at least one of the passed values. The constraint is equivalent to one or more `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/constant#entity-primary-key-in-set) */
  entityPrimaryKeyInSet?: InputMaybe<Array<Scalars['Int']['input']>>;
  /** The container that behaves as [logical NOT](https://en.wikipedia.org/wiki/Negation) for the inner constraint. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/logical#not) */
  not?: InputMaybe<FilterContainerc89c1a6e13324cd>;
  /** The container that combines inner constraints with [logical OR](https://en.wikipedia.org/wiki/Logical_disjunction). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/logical#or) */
  or?: InputMaybe<Array<FilterContainerc89c1a6e13324cd>>;
};

export type FilterContainerc183dce568fe08c7 = {
  /** The container that combines inner constraints with [logical AND](https://en.wikipedia.org/wiki/Logical_conjunction). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/logical#and) */
  and?: InputMaybe<Array<FilterContainerc183dce568fe08c7>>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeChangedBetween?: InputMaybe<Array<InputMaybe<Scalars['OffsetDateTime']['input']>>>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeChangedEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeChangedGreaterThan?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeChangedGreaterThanEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeChangedInSet?: InputMaybe<Array<Scalars['OffsetDateTime']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeChangedIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeChangedLessThan?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeChangedLessThanEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeCodeBetween?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute contains part of passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-contains) */
  attributeCodeContains?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute ends with passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-ends-with) */
  attributeCodeEndsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeCodeEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeCodeGreaterThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeCodeGreaterThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeCodeInSet?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeCodeIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeCodeLessThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeCodeLessThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attributes starts with passed text. (case-sensitive) [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-starts-with) */
  attributeCodeStartsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeNameBetween?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute contains part of passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-contains) */
  attributeNameContains?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute ends with passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-ends-with) */
  attributeNameEndsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeNameEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeNameGreaterThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeNameGreaterThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeNameInSet?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeNameIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeNameLessThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeNameLessThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attributes starts with passed text. (case-sensitive) [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-starts-with) */
  attributeNameStartsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributePublishedBetween?: InputMaybe<Array<InputMaybe<Scalars['OffsetDateTime']['input']>>>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributePublishedEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributePublishedGreaterThan?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributePublishedGreaterThanEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributePublishedInSet?: InputMaybe<Array<Scalars['OffsetDateTime']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributePublishedIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributePublishedLessThan?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributePublishedLessThanEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeStatusBetween?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute contains part of passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-contains) */
  attributeStatusContains?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute ends with passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-ends-with) */
  attributeStatusEndsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeStatusEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeStatusGreaterThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeStatusGreaterThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeStatusInSet?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeStatusIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeStatusLessThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeStatusLessThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attributes starts with passed text. (case-sensitive) [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-starts-with) */
  attributeStatusStartsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeUrlBetween?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute contains part of passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-contains) */
  attributeUrlContains?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute ends with passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-ends-with) */
  attributeUrlEndsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeUrlEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeUrlGreaterThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeUrlGreaterThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeUrlInSet?: InputMaybe<Array<Scalars['String']['input']>>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeUrlInactiveBetween?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute contains part of passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-contains) */
  attributeUrlInactiveContains?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute ends with passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-ends-with) */
  attributeUrlInactiveEndsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeUrlInactiveEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeUrlInactiveGreaterThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeUrlInactiveGreaterThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeUrlInactiveInSet?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeUrlInactiveIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeUrlInactiveLessThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeUrlInactiveLessThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attributes starts with passed text. (case-sensitive) [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-starts-with) */
  attributeUrlInactiveStartsWith?: InputMaybe<Scalars['String']['input']>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeUrlIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeUrlLessThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeUrlLessThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attributes starts with passed text. (case-sensitive) [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-starts-with) */
  attributeUrlStartsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeValidityBetween?: InputMaybe<Array<InputMaybe<Scalars['OffsetDateTime']['input']>>>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeValidityEquals?: InputMaybe<Scalars['DateTimeRange']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeValidityGreaterThan?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeValidityGreaterThanEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the range value of that attribute contains the passed value within its limits (both ends are inclusive). The constraint can be used only for Range data type values. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/range#attribute-in-range) */
  attributeValidityInRange?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeValidityInSet?: InputMaybe<Array<Scalars['DateTimeRange']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeValidityIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeValidityLessThan?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeValidityLessThanEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeVisibilityBetween?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute contains part of passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-contains) */
  attributeVisibilityContains?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute ends with passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-ends-with) */
  attributeVisibilityEndsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeVisibilityEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeVisibilityGreaterThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeVisibilityGreaterThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeVisibilityInSet?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeVisibilityIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeVisibilityLessThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeVisibilityLessThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attributes starts with passed text. (case-sensitive) [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-starts-with) */
  attributeVisibilityStartsWith?: InputMaybe<Scalars['String']['input']>;
  /** The constraint if at least one of entity locales (derived from entity attributes or associated data) equals to the passed one. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/locale#entity-locale-equals) */
  entityLocaleEquals?: InputMaybe<CatalogLocale>;
  /** The constraint checks if primary key of the entity equals to at least one of the passed values. The constraint is equivalent to one or more `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/constant#entity-primary-key-in-set) */
  entityPrimaryKeyInSet?: InputMaybe<Array<Scalars['Int']['input']>>;
  /** The container allowing to filter entities by having references to entities managed by evitaDB that match the inner filter constraint. This container resembles the SQL inner join clauses and works in cooperation with facet summary requirement. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/references#facet-having) */
  facetTagsHaving?: InputMaybe<Array<FilterContainera8a85d9a060ac1e6>>;
  /** The container that behaves as [logical NOT](https://en.wikipedia.org/wiki/Negation) for the inner constraint. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/logical#not) */
  not?: InputMaybe<FilterContainerc183dce568fe08c7>;
  /** The container that combines inner constraints with [logical OR](https://en.wikipedia.org/wiki/Logical_disjunction). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/logical#or) */
  or?: InputMaybe<Array<FilterContainerc183dce568fe08c7>>;
  /** The container allowing to filter entities by having references to entities managed by evitaDB that match the inner filter constraint. This container resembles the SQL inner join clauses. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/references#reference-having) */
  referenceTagsHaving?: InputMaybe<Array<FilterContainera8a85d9a060ac1e6>>;
  /** The container for constraints that are controlled by the user (client UI widgets). It is used mainly to distinguish between user constraint (refining the search) and program defined constraints (considered mandatory), when the extra results are computed. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/behavioral#user-filter) */
  userFilter?: InputMaybe<Array<FilterContainer9d94254852a34cc4>>;
};

export type FilterContainerd0ca27605f4a02ae = {
  /** The container that combines inner constraints with [logical AND](https://en.wikipedia.org/wiki/Logical_conjunction). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/logical#and) */
  and?: InputMaybe<Array<FilterContainerfb3c780d439a417c>>;
  /** The constraint checks if primary key of the entity equals to at least one of the passed values. The constraint is equivalent to one or more `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/constant#entity-primary-key-in-set) */
  entityPrimaryKeyInSet?: InputMaybe<Array<Scalars['Int']['input']>>;
  /** The container that behaves as [logical NOT](https://en.wikipedia.org/wiki/Negation) for the inner constraint. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/logical#not) */
  not?: InputMaybe<FilterContainerfb3c780d439a417c>;
  /** The container that combines inner constraints with [logical OR](https://en.wikipedia.org/wiki/Logical_disjunction). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/logical#or) */
  or?: InputMaybe<Array<FilterContainerfb3c780d439a417c>>;
};

export type FilterContainerd1ed0dd289b39bb5 = {
  /** The container that combines inner constraints with [logical AND](https://en.wikipedia.org/wiki/Logical_conjunction). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/logical#and) */
  and?: InputMaybe<Array<FilterContainerd1ed0dd289b39bb5>>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeCardPaymentAllowedBetween?: InputMaybe<Array<InputMaybe<Scalars['Boolean']['input']>>>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeCardPaymentAllowedEquals?: InputMaybe<Scalars['Boolean']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeCardPaymentAllowedGreaterThan?: InputMaybe<Scalars['Boolean']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeCardPaymentAllowedGreaterThanEquals?: InputMaybe<Scalars['Boolean']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeCardPaymentAllowedInSet?: InputMaybe<Array<Scalars['Boolean']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeCardPaymentAllowedIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeCardPaymentAllowedLessThan?: InputMaybe<Scalars['Boolean']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeCardPaymentAllowedLessThanEquals?: InputMaybe<Scalars['Boolean']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeChangedBetween?: InputMaybe<Array<InputMaybe<Scalars['OffsetDateTime']['input']>>>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeChangedEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeChangedGreaterThan?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeChangedGreaterThanEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeChangedInSet?: InputMaybe<Array<Scalars['OffsetDateTime']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeChangedIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeChangedLessThan?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeChangedLessThanEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeCityBetween?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute contains part of passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-contains) */
  attributeCityContains?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute ends with passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-ends-with) */
  attributeCityEndsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeCityEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeCityGreaterThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeCityGreaterThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeCityInSet?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeCityIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeCityLessThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeCityLessThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeCityPartBetween?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute contains part of passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-contains) */
  attributeCityPartContains?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute ends with passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-ends-with) */
  attributeCityPartEndsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeCityPartEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeCityPartGreaterThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeCityPartGreaterThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeCityPartInSet?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeCityPartIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeCityPartLessThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeCityPartLessThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attributes starts with passed text. (case-sensitive) [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-starts-with) */
  attributeCityPartStartsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attributes starts with passed text. (case-sensitive) [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-starts-with) */
  attributeCityStartsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeCodeBetween?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute contains part of passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-contains) */
  attributeCodeContains?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute ends with passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-ends-with) */
  attributeCodeEndsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeCodeEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeCodeGreaterThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeCodeGreaterThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeCodeInSet?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeCodeIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeCodeLessThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeCodeLessThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attributes starts with passed text. (case-sensitive) [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-starts-with) */
  attributeCodeStartsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeCountryCodeBetween?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute contains part of passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-contains) */
  attributeCountryCodeContains?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute ends with passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-ends-with) */
  attributeCountryCodeEndsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeCountryCodeEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeCountryCodeGreaterThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeCountryCodeGreaterThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeCountryCodeInSet?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeCountryCodeIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeCountryCodeLessThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeCountryCodeLessThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attributes starts with passed text. (case-sensitive) [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-starts-with) */
  attributeCountryCodeStartsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeExternalCodeBetween?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute contains part of passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-contains) */
  attributeExternalCodeContains?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute ends with passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-ends-with) */
  attributeExternalCodeEndsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeExternalCodeEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeExternalCodeGreaterThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeExternalCodeGreaterThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeExternalCodeInSet?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeExternalCodeIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeExternalCodeLessThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeExternalCodeLessThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attributes starts with passed text. (case-sensitive) [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-starts-with) */
  attributeExternalCodeStartsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeLatitudeBetween?: InputMaybe<Array<InputMaybe<Scalars['BigDecimal']['input']>>>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeLatitudeEquals?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeLatitudeGreaterThan?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeLatitudeGreaterThanEquals?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeLatitudeInSet?: InputMaybe<Array<Scalars['BigDecimal']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeLatitudeIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeLatitudeLessThan?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeLatitudeLessThanEquals?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeLongitudeBetween?: InputMaybe<Array<InputMaybe<Scalars['BigDecimal']['input']>>>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeLongitudeEquals?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeLongitudeGreaterThan?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeLongitudeGreaterThanEquals?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeLongitudeInSet?: InputMaybe<Array<Scalars['BigDecimal']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeLongitudeIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeLongitudeLessThan?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeLongitudeLessThanEquals?: InputMaybe<Scalars['BigDecimal']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeNameBetween?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute contains part of passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-contains) */
  attributeNameContains?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute ends with passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-ends-with) */
  attributeNameEndsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeNameEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeNameGreaterThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeNameGreaterThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeNameInSet?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeNameIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeNameLessThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeNameLessThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attributes starts with passed text. (case-sensitive) [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-starts-with) */
  attributeNameStartsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributePostalCodeBetween?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute contains part of passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-contains) */
  attributePostalCodeContains?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute ends with passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-ends-with) */
  attributePostalCodeEndsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributePostalCodeEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributePostalCodeGreaterThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributePostalCodeGreaterThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributePostalCodeInSet?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributePostalCodeIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributePostalCodeLessThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributePostalCodeLessThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attributes starts with passed text. (case-sensitive) [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-starts-with) */
  attributePostalCodeStartsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributePublishedBetween?: InputMaybe<Array<InputMaybe<Scalars['OffsetDateTime']['input']>>>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributePublishedEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributePublishedGreaterThan?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributePublishedGreaterThanEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributePublishedInSet?: InputMaybe<Array<Scalars['OffsetDateTime']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributePublishedIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributePublishedLessThan?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributePublishedLessThanEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeShippingTypeBetween?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute contains part of passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-contains) */
  attributeShippingTypeContains?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute ends with passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-ends-with) */
  attributeShippingTypeEndsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeShippingTypeEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeShippingTypeGreaterThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeShippingTypeGreaterThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeShippingTypeInSet?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeShippingTypeIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeShippingTypeLessThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeShippingTypeLessThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attributes starts with passed text. (case-sensitive) [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-starts-with) */
  attributeShippingTypeStartsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeStatusBetween?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute contains part of passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-contains) */
  attributeStatusContains?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute ends with passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-ends-with) */
  attributeStatusEndsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeStatusEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeStatusGreaterThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeStatusGreaterThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeStatusInSet?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeStatusIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeStatusLessThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeStatusLessThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attributes starts with passed text. (case-sensitive) [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-starts-with) */
  attributeStatusStartsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeStreetBetween?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute contains part of passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-contains) */
  attributeStreetContains?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute ends with passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-ends-with) */
  attributeStreetEndsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeStreetEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeStreetGreaterThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeStreetGreaterThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeStreetInSet?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeStreetIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeStreetLessThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeStreetLessThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attributes starts with passed text. (case-sensitive) [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-starts-with) */
  attributeStreetStartsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeTypeBetween?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute contains part of passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-contains) */
  attributeTypeContains?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute ends with passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-ends-with) */
  attributeTypeEndsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeTypeEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeTypeGreaterThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeTypeGreaterThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeTypeInSet?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeTypeIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeTypeLessThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeTypeLessThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attributes starts with passed text. (case-sensitive) [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-starts-with) */
  attributeTypeStartsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeUrlBetween?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute contains part of passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-contains) */
  attributeUrlContains?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute ends with passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-ends-with) */
  attributeUrlEndsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeUrlEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeUrlGreaterThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeUrlGreaterThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeUrlInSet?: InputMaybe<Array<Scalars['String']['input']>>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeUrlInactiveBetween?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute contains part of passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-contains) */
  attributeUrlInactiveContains?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute ends with passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-ends-with) */
  attributeUrlInactiveEndsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeUrlInactiveEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeUrlInactiveGreaterThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeUrlInactiveGreaterThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeUrlInactiveInSet?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeUrlInactiveIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeUrlInactiveLessThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeUrlInactiveLessThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attributes starts with passed text. (case-sensitive) [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-starts-with) */
  attributeUrlInactiveStartsWith?: InputMaybe<Scalars['String']['input']>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeUrlIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeUrlLessThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeUrlLessThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attributes starts with passed text. (case-sensitive) [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-starts-with) */
  attributeUrlStartsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeValidityBetween?: InputMaybe<Array<InputMaybe<Scalars['OffsetDateTime']['input']>>>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeValidityEquals?: InputMaybe<Scalars['DateTimeRange']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeValidityGreaterThan?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeValidityGreaterThanEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the range value of that attribute contains the passed value within its limits (both ends are inclusive). The constraint can be used only for Range data type values. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/range#attribute-in-range) */
  attributeValidityInRange?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeValidityInSet?: InputMaybe<Array<Scalars['DateTimeRange']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeValidityIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeValidityLessThan?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeValidityLessThanEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeVisibilityBetween?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute contains part of passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-contains) */
  attributeVisibilityContains?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute ends with passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-ends-with) */
  attributeVisibilityEndsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeVisibilityEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeVisibilityGreaterThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeVisibilityGreaterThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeVisibilityInSet?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeVisibilityIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeVisibilityLessThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeVisibilityLessThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attributes starts with passed text. (case-sensitive) [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-starts-with) */
  attributeVisibilityStartsWith?: InputMaybe<Scalars['String']['input']>;
  /** The constraint if at least one of entity locales (derived from entity attributes or associated data) equals to the passed one. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/locale#entity-locale-equals) */
  entityLocaleEquals?: InputMaybe<CatalogLocale>;
  /** The constraint checks if primary key of the entity equals to at least one of the passed values. The constraint is equivalent to one or more `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/constant#entity-primary-key-in-set) */
  entityPrimaryKeyInSet?: InputMaybe<Array<Scalars['Int']['input']>>;
  /** The container that behaves as [logical NOT](https://en.wikipedia.org/wiki/Negation) for the inner constraint. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/logical#not) */
  not?: InputMaybe<FilterContainerd1ed0dd289b39bb5>;
  /** The container that combines inner constraints with [logical OR](https://en.wikipedia.org/wiki/Logical_disjunction). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/logical#or) */
  or?: InputMaybe<Array<FilterContainerd1ed0dd289b39bb5>>;
  /** The container allowing to filter entities by having references to entities managed by evitaDB that match the inner filter constraint. This container resembles the SQL inner join clauses. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/references#reference-having) */
  referenceShippingMethodHaving?: InputMaybe<Array<FilterContainer757b56df09748967>>;
  /** The container for constraints that are controlled by the user (client UI widgets). It is used mainly to distinguish between user constraint (refining the search) and program defined constraints (considered mandatory), when the extra results are computed. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/behavioral#user-filter) */
  userFilter?: InputMaybe<Array<FilterContainer85f4f936fdd44ff0>>;
};

export type FilterContainerd7c10f54d105b2f6 = {
  /** The container that combines inner constraints with [logical AND](https://en.wikipedia.org/wiki/Logical_conjunction). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/logical#and) */
  and?: InputMaybe<Array<FilterContainerd7c10f54d105b2f6>>;
  /** The container allowing to filter entities by having references to entities managed by evitaDB that match inner filtering constraints. This container resembles the SQL inner join clauses where the `entityHaving`contains the filtering condition on particular join. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/references#entity-having) */
  entityHaving?: InputMaybe<FilterContainerf812d9f8dc0269a4>;
  /** The constraint checks if primary key of the entity equals to at least one of the passed values. The constraint is equivalent to one or more `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/constant#entity-primary-key-in-set) */
  entityPrimaryKeyInSet?: InputMaybe<Array<Scalars['Int']['input']>>;
  /** The container that behaves as [logical NOT](https://en.wikipedia.org/wiki/Negation) for the inner constraint. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/logical#not) */
  not?: InputMaybe<FilterContainerd7c10f54d105b2f6>;
  /** The container that combines inner constraints with [logical OR](https://en.wikipedia.org/wiki/Logical_disjunction). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/logical#or) */
  or?: InputMaybe<Array<FilterContainerd7c10f54d105b2f6>>;
};

export type FilterContainerd1470c746341886a = {
  /** The constraint limits hierarchy within parent constraint to take only directly related entities into an account. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/hierarchy#direct-relation) */
  directRelation?: InputMaybe<Scalars['Boolean']['input']>;
  /** The constraint narrows hierarchy within parent constraint to exclude specified hierarchy subtrees from search. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/hierarchy#excluding) */
  excluding?: InputMaybe<Array<FilterContainerf812d9f8dc0269a4>>;
  /** The constraint limits hierarchy within parent constraint to exclude the entities directly related to the searched root node. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/hierarchy#excluding-root) */
  excludingRoot?: InputMaybe<Scalars['Boolean']['input']>;
  /** The constraint narrows hierarchy within parent constraint to include specified hierarchy subtrees from search. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/hierarchy#having) */
  having?: InputMaybe<Array<FilterContainerf812d9f8dc0269a4>>;
};

export type FilterContainerdada3d3e768d055c = {
  /** The container that combines inner constraints with [logical AND](https://en.wikipedia.org/wiki/Logical_conjunction). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/logical#and) */
  and?: InputMaybe<Array<FilterContainerdada3d3e768d055c>>;
  /** The container allowing to filter entities by having references to entities managed by evitaDB that match inner filtering constraints. This container resembles the SQL inner join clauses where the `entityHaving`contains the filtering condition on particular join. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/references#entity-having) */
  entityHaving?: InputMaybe<FilterContainer1e4225e8e77021d7>;
  /** The constraint checks if primary key of the entity equals to at least one of the passed values. The constraint is equivalent to one or more `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/constant#entity-primary-key-in-set) */
  entityPrimaryKeyInSet?: InputMaybe<Array<Scalars['Int']['input']>>;
  /** The container that behaves as [logical NOT](https://en.wikipedia.org/wiki/Negation) for the inner constraint. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/logical#not) */
  not?: InputMaybe<FilterContainerdada3d3e768d055c>;
  /** The container that combines inner constraints with [logical OR](https://en.wikipedia.org/wiki/Logical_disjunction). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/logical#or) */
  or?: InputMaybe<Array<FilterContainerdada3d3e768d055c>>;
};

export type FilterContainerdc998e10009e5e68 = {
  /** The container that combines inner constraints with [logical AND](https://en.wikipedia.org/wiki/Logical_conjunction). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/logical#and) */
  and?: InputMaybe<Array<FilterContainerdc998e10009e5e68>>;
  /** The container allowing to filter entities by having references to entities managed by evitaDB that match inner filtering constraints. This container resembles the SQL inner join clauses where the `entityHaving`contains the filtering condition on particular join. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/references#entity-having) */
  entityHaving?: InputMaybe<FilterContainer585fda0640662fe0>;
  /** The constraint checks if primary key of the entity equals to at least one of the passed values. The constraint is equivalent to one or more `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/constant#entity-primary-key-in-set) */
  entityPrimaryKeyInSet?: InputMaybe<Array<Scalars['Int']['input']>>;
  /** The container that behaves as [logical NOT](https://en.wikipedia.org/wiki/Negation) for the inner constraint. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/logical#not) */
  not?: InputMaybe<FilterContainerdc998e10009e5e68>;
  /** The container that combines inner constraints with [logical OR](https://en.wikipedia.org/wiki/Logical_disjunction). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/logical#or) */
  or?: InputMaybe<Array<FilterContainerdc998e10009e5e68>>;
};

export type FilterContainerde14524bdc4e7315 = {
  /** The container that combines inner constraints with [logical AND](https://en.wikipedia.org/wiki/Logical_conjunction). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/logical#and) */
  and?: InputMaybe<Array<FilterContainerde14524bdc4e7315>>;
  /** The container allowing to filter entities by having references to entities managed by evitaDB that match inner filtering constraints. This container resembles the SQL inner join clauses where the `entityHaving`contains the filtering condition on particular join. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/references#entity-having) */
  entityHaving?: InputMaybe<FilterContainer9151b3bab054ab55>;
  /** The constraint checks if primary key of the entity equals to at least one of the passed values. The constraint is equivalent to one or more `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/constant#entity-primary-key-in-set) */
  entityPrimaryKeyInSet?: InputMaybe<Array<Scalars['Int']['input']>>;
  /** The container that behaves as [logical NOT](https://en.wikipedia.org/wiki/Negation) for the inner constraint. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/logical#not) */
  not?: InputMaybe<FilterContainerde14524bdc4e7315>;
  /** The container that combines inner constraints with [logical OR](https://en.wikipedia.org/wiki/Logical_disjunction). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/logical#or) */
  or?: InputMaybe<Array<FilterContainerde14524bdc4e7315>>;
};

export type FilterContainere0382ac2d2e8abf2 = {
  /** The container that combines inner constraints with [logical AND](https://en.wikipedia.org/wiki/Logical_conjunction). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/logical#and) */
  and?: InputMaybe<Array<FilterContainere0382ac2d2e8abf2>>;
  /** The container allowing to filter entities by having references to entities managed by evitaDB that match inner filtering constraints. This container resembles the SQL inner join clauses where the `entityHaving`contains the filtering condition on particular join. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/references#entity-having) */
  entityHaving?: InputMaybe<FilterContainer9151b3bab054ab55>;
  /** The constraint checks if primary key of the entity equals to at least one of the passed values. The constraint is equivalent to one or more `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/constant#entity-primary-key-in-set) */
  entityPrimaryKeyInSet?: InputMaybe<Array<Scalars['Int']['input']>>;
  /** The container that behaves as [logical NOT](https://en.wikipedia.org/wiki/Negation) for the inner constraint. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/logical#not) */
  not?: InputMaybe<FilterContainere0382ac2d2e8abf2>;
  /** The container that combines inner constraints with [logical OR](https://en.wikipedia.org/wiki/Logical_disjunction). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/logical#or) */
  or?: InputMaybe<Array<FilterContainere0382ac2d2e8abf2>>;
};

export type FilterContainere7ac486b7b142f94 = {
  /** The container that combines inner constraints with [logical AND](https://en.wikipedia.org/wiki/Logical_conjunction). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/logical#and) */
  and?: InputMaybe<Array<FilterContainere7ac486b7b142f94>>;
  /** The container allowing to filter entities by having references to entities managed by evitaDB that match inner filtering constraints. This container resembles the SQL inner join clauses where the `entityHaving`contains the filtering condition on particular join. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/references#entity-having) */
  entityHaving?: InputMaybe<FilterContainerf812d9f8dc0269a4>;
  /** The constraint checks if primary key of the entity equals to at least one of the passed values. The constraint is equivalent to one or more `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/constant#entity-primary-key-in-set) */
  entityPrimaryKeyInSet?: InputMaybe<Array<Scalars['Int']['input']>>;
  /** The container that behaves as [logical NOT](https://en.wikipedia.org/wiki/Negation) for the inner constraint. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/logical#not) */
  not?: InputMaybe<FilterContainere7ac486b7b142f94>;
  /** The container that combines inner constraints with [logical OR](https://en.wikipedia.org/wiki/Logical_disjunction). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/logical#or) */
  or?: InputMaybe<Array<FilterContainere7ac486b7b142f94>>;
};

export type FilterContainere9cd3f187046f5d6 = {
  /** The container that combines inner constraints with [logical AND](https://en.wikipedia.org/wiki/Logical_conjunction). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/logical#and) */
  and?: InputMaybe<Array<FilterContainere9cd3f187046f5d6>>;
  /** The container allowing to filter entities by having references to entities managed by evitaDB that match inner filtering constraints. This container resembles the SQL inner join clauses where the `entityHaving`contains the filtering condition on particular join. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/references#entity-having) */
  entityHaving?: InputMaybe<FilterContainer967c71ead6465215>;
  /** The constraint checks if primary key of the entity equals to at least one of the passed values. The constraint is equivalent to one or more `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/constant#entity-primary-key-in-set) */
  entityPrimaryKeyInSet?: InputMaybe<Array<Scalars['Int']['input']>>;
  /** The container that behaves as [logical NOT](https://en.wikipedia.org/wiki/Negation) for the inner constraint. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/logical#not) */
  not?: InputMaybe<FilterContainere9cd3f187046f5d6>;
  /** The container that combines inner constraints with [logical OR](https://en.wikipedia.org/wiki/Logical_disjunction). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/logical#or) */
  or?: InputMaybe<Array<FilterContainere9cd3f187046f5d6>>;
};

export type FilterContainere360aa9b26ebf852 = {
  /** The container that combines inner constraints with [logical AND](https://en.wikipedia.org/wiki/Logical_conjunction). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/logical#and) */
  and?: InputMaybe<Array<FilterContainer3ff4be886c39a0e>>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeChangedBetween?: InputMaybe<Array<InputMaybe<Scalars['OffsetDateTime']['input']>>>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeChangedEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeChangedGreaterThan?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeChangedGreaterThanEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeChangedInSet?: InputMaybe<Array<Scalars['OffsetDateTime']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeChangedIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeChangedLessThan?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeChangedLessThanEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeCodeBetween?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute contains part of passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-contains) */
  attributeCodeContains?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute ends with passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-ends-with) */
  attributeCodeEndsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeCodeEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeCodeGreaterThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeCodeGreaterThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeCodeInSet?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeCodeIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeCodeLessThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeCodeLessThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attributes starts with passed text. (case-sensitive) [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-starts-with) */
  attributeCodeStartsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeNameBetween?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute contains part of passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-contains) */
  attributeNameContains?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute ends with passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-ends-with) */
  attributeNameEndsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeNameEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeNameGreaterThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeNameGreaterThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeNameInSet?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeNameIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeNameLessThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeNameLessThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attributes starts with passed text. (case-sensitive) [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-starts-with) */
  attributeNameStartsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributePaymentTypeBetween?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute contains part of passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-contains) */
  attributePaymentTypeContains?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute ends with passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-ends-with) */
  attributePaymentTypeEndsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributePaymentTypeEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributePaymentTypeGreaterThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributePaymentTypeGreaterThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributePaymentTypeInSet?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributePaymentTypeIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributePaymentTypeLessThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributePaymentTypeLessThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attributes starts with passed text. (case-sensitive) [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-starts-with) */
  attributePaymentTypeStartsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributePublishedBetween?: InputMaybe<Array<InputMaybe<Scalars['OffsetDateTime']['input']>>>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributePublishedEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributePublishedGreaterThan?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributePublishedGreaterThanEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributePublishedInSet?: InputMaybe<Array<Scalars['OffsetDateTime']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributePublishedIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributePublishedLessThan?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributePublishedLessThanEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeStatusBetween?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute contains part of passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-contains) */
  attributeStatusContains?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute ends with passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-ends-with) */
  attributeStatusEndsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeStatusEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeStatusGreaterThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeStatusGreaterThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeStatusInSet?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeStatusIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeStatusLessThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeStatusLessThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attributes starts with passed text. (case-sensitive) [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-starts-with) */
  attributeStatusStartsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeUrlBetween?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute contains part of passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-contains) */
  attributeUrlContains?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute ends with passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-ends-with) */
  attributeUrlEndsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeUrlEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeUrlGreaterThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeUrlGreaterThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeUrlInSet?: InputMaybe<Array<Scalars['String']['input']>>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeUrlInactiveBetween?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute contains part of passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-contains) */
  attributeUrlInactiveContains?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute ends with passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-ends-with) */
  attributeUrlInactiveEndsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeUrlInactiveEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeUrlInactiveGreaterThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeUrlInactiveGreaterThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeUrlInactiveInSet?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeUrlInactiveIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeUrlInactiveLessThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeUrlInactiveLessThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attributes starts with passed text. (case-sensitive) [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-starts-with) */
  attributeUrlInactiveStartsWith?: InputMaybe<Scalars['String']['input']>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeUrlIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeUrlLessThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeUrlLessThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attributes starts with passed text. (case-sensitive) [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-starts-with) */
  attributeUrlStartsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeValidityBetween?: InputMaybe<Array<InputMaybe<Scalars['OffsetDateTime']['input']>>>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeValidityEquals?: InputMaybe<Scalars['DateTimeRange']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeValidityGreaterThan?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeValidityGreaterThanEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the range value of that attribute contains the passed value within its limits (both ends are inclusive). The constraint can be used only for Range data type values. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/range#attribute-in-range) */
  attributeValidityInRange?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeValidityInSet?: InputMaybe<Array<Scalars['DateTimeRange']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeValidityIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeValidityLessThan?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeValidityLessThanEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeVisibilityBetween?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute contains part of passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-contains) */
  attributeVisibilityContains?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute ends with passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-ends-with) */
  attributeVisibilityEndsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeVisibilityEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeVisibilityGreaterThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeVisibilityGreaterThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeVisibilityInSet?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeVisibilityIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeVisibilityLessThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeVisibilityLessThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attributes starts with passed text. (case-sensitive) [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-starts-with) */
  attributeVisibilityStartsWith?: InputMaybe<Scalars['String']['input']>;
  /** The constraint checks if primary key of the entity equals to at least one of the passed values. The constraint is equivalent to one or more `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/constant#entity-primary-key-in-set) */
  entityPrimaryKeyInSet?: InputMaybe<Array<Scalars['Int']['input']>>;
  /** The container that behaves as [logical NOT](https://en.wikipedia.org/wiki/Negation) for the inner constraint. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/logical#not) */
  not?: InputMaybe<FilterContainer3ff4be886c39a0e>;
  /** The container that combines inner constraints with [logical OR](https://en.wikipedia.org/wiki/Logical_disjunction). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/logical#or) */
  or?: InputMaybe<Array<FilterContainer3ff4be886c39a0e>>;
  /** The constraint checks if entity has price for sale within the passed range of prices (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/price#price-between) */
  priceBetween?: InputMaybe<Array<InputMaybe<Scalars['BigDecimal']['input']>>>;
};

export type FilterContainere3982a3d02ff904d = {
  /** The container that combines inner constraints with [logical AND](https://en.wikipedia.org/wiki/Logical_conjunction). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/logical#and) */
  and?: InputMaybe<Array<FilterContainere3982a3d02ff904d>>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeVariantBetween?: InputMaybe<Array<InputMaybe<Scalars['Boolean']['input']>>>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeVariantEquals?: InputMaybe<Scalars['Boolean']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeVariantGreaterThan?: InputMaybe<Scalars['Boolean']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeVariantGreaterThanEquals?: InputMaybe<Scalars['Boolean']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeVariantInSet?: InputMaybe<Array<Scalars['Boolean']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeVariantIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeVariantLessThan?: InputMaybe<Scalars['Boolean']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeVariantLessThanEquals?: InputMaybe<Scalars['Boolean']['input']>;
  /** The container allowing to filter entities by having references to entities managed by evitaDB that match inner filtering constraints. This container resembles the SQL inner join clauses where the `entityHaving`contains the filtering condition on particular join. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/references#entity-having) */
  entityHaving?: InputMaybe<FilterContainer744027555f798cbb>;
  /** The constraint checks if primary key of the entity equals to at least one of the passed values. The constraint is equivalent to one or more `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/constant#entity-primary-key-in-set) */
  entityPrimaryKeyInSet?: InputMaybe<Array<Scalars['Int']['input']>>;
  /** The container that behaves as [logical NOT](https://en.wikipedia.org/wiki/Negation) for the inner constraint. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/logical#not) */
  not?: InputMaybe<FilterContainere3982a3d02ff904d>;
  /** The container that combines inner constraints with [logical OR](https://en.wikipedia.org/wiki/Logical_disjunction). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/logical#or) */
  or?: InputMaybe<Array<FilterContainere3982a3d02ff904d>>;
};

export type FilterContainereb8d9910aeafde88 = {
  /** The container that combines inner constraints with [logical AND](https://en.wikipedia.org/wiki/Logical_conjunction). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/logical#and) */
  and?: InputMaybe<Array<FilterContainer1e4225e8e77021d7>>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeChangedBetween?: InputMaybe<Array<InputMaybe<Scalars['OffsetDateTime']['input']>>>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeChangedEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeChangedGreaterThan?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeChangedGreaterThanEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeChangedInSet?: InputMaybe<Array<Scalars['OffsetDateTime']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeChangedIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeChangedLessThan?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeChangedLessThanEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeCodeBetween?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute contains part of passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-contains) */
  attributeCodeContains?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute ends with passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-ends-with) */
  attributeCodeEndsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeCodeEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeCodeGreaterThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeCodeGreaterThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeCodeInSet?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeCodeIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeCodeLessThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeCodeLessThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attributes starts with passed text. (case-sensitive) [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-starts-with) */
  attributeCodeStartsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeNameBetween?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute contains part of passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-contains) */
  attributeNameContains?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute ends with passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-ends-with) */
  attributeNameEndsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeNameEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeNameGreaterThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeNameGreaterThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeNameInSet?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeNameIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeNameLessThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeNameLessThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attributes starts with passed text. (case-sensitive) [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-starts-with) */
  attributeNameStartsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributePublishedBetween?: InputMaybe<Array<InputMaybe<Scalars['OffsetDateTime']['input']>>>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributePublishedEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributePublishedGreaterThan?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributePublishedGreaterThanEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributePublishedInSet?: InputMaybe<Array<Scalars['OffsetDateTime']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributePublishedIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributePublishedLessThan?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributePublishedLessThanEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeStatusBetween?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute contains part of passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-contains) */
  attributeStatusContains?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute ends with passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-ends-with) */
  attributeStatusEndsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeStatusEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeStatusGreaterThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeStatusGreaterThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeStatusInSet?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeStatusIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeStatusLessThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeStatusLessThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attributes starts with passed text. (case-sensitive) [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-starts-with) */
  attributeStatusStartsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeUrlBetween?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute contains part of passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-contains) */
  attributeUrlContains?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute ends with passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-ends-with) */
  attributeUrlEndsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeUrlEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeUrlGreaterThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeUrlGreaterThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeUrlInSet?: InputMaybe<Array<Scalars['String']['input']>>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeUrlInactiveBetween?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute contains part of passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-contains) */
  attributeUrlInactiveContains?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute ends with passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-ends-with) */
  attributeUrlInactiveEndsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeUrlInactiveEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeUrlInactiveGreaterThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeUrlInactiveGreaterThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeUrlInactiveInSet?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeUrlInactiveIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeUrlInactiveLessThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeUrlInactiveLessThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attributes starts with passed text. (case-sensitive) [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-starts-with) */
  attributeUrlInactiveStartsWith?: InputMaybe<Scalars['String']['input']>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeUrlIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeUrlLessThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeUrlLessThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attributes starts with passed text. (case-sensitive) [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-starts-with) */
  attributeUrlStartsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeValidityBetween?: InputMaybe<Array<InputMaybe<Scalars['OffsetDateTime']['input']>>>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeValidityEquals?: InputMaybe<Scalars['DateTimeRange']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeValidityGreaterThan?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeValidityGreaterThanEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the range value of that attribute contains the passed value within its limits (both ends are inclusive). The constraint can be used only for Range data type values. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/range#attribute-in-range) */
  attributeValidityInRange?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeValidityInSet?: InputMaybe<Array<Scalars['DateTimeRange']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeValidityIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeValidityLessThan?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeValidityLessThanEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeVisibilityBetween?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute contains part of passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-contains) */
  attributeVisibilityContains?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute ends with passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-ends-with) */
  attributeVisibilityEndsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeVisibilityEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeVisibilityGreaterThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeVisibilityGreaterThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeVisibilityInSet?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeVisibilityIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeVisibilityLessThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeVisibilityLessThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attributes starts with passed text. (case-sensitive) [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-starts-with) */
  attributeVisibilityStartsWith?: InputMaybe<Scalars['String']['input']>;
  /** The constraint checks if primary key of the entity equals to at least one of the passed values. The constraint is equivalent to one or more `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/constant#entity-primary-key-in-set) */
  entityPrimaryKeyInSet?: InputMaybe<Array<Scalars['Int']['input']>>;
  /** The container that behaves as [logical NOT](https://en.wikipedia.org/wiki/Negation) for the inner constraint. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/logical#not) */
  not?: InputMaybe<FilterContainer1e4225e8e77021d7>;
  /** The container that combines inner constraints with [logical OR](https://en.wikipedia.org/wiki/Logical_disjunction). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/logical#or) */
  or?: InputMaybe<Array<FilterContainer1e4225e8e77021d7>>;
};

export type FilterContaineree87efab1fb06f = {
  /** The container that combines inner constraints with [logical AND](https://en.wikipedia.org/wiki/Logical_conjunction). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/logical#and) */
  and?: InputMaybe<Array<FilterContaineree87efab1fb06f>>;
  /** The container allowing to filter entities by having references to entities managed by evitaDB that match inner filtering constraints. This container resembles the SQL inner join clauses where the `entityHaving`contains the filtering condition on particular join. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/references#entity-having) */
  entityHaving?: InputMaybe<FilterContainer585fda0640662fe0>;
  /** The constraint checks if primary key of the entity equals to at least one of the passed values. The constraint is equivalent to one or more `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/constant#entity-primary-key-in-set) */
  entityPrimaryKeyInSet?: InputMaybe<Array<Scalars['Int']['input']>>;
  /** The container that behaves as [logical NOT](https://en.wikipedia.org/wiki/Negation) for the inner constraint. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/logical#not) */
  not?: InputMaybe<FilterContaineree87efab1fb06f>;
  /** The container that combines inner constraints with [logical OR](https://en.wikipedia.org/wiki/Logical_disjunction). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/logical#or) */
  or?: InputMaybe<Array<FilterContaineree87efab1fb06f>>;
};

export type FilterContainerf4d19f02cdced8b0 = {
  /** The container that combines inner constraints with [logical AND](https://en.wikipedia.org/wiki/Logical_conjunction). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/logical#and) */
  and?: InputMaybe<Array<FilterContainerf4d19f02cdced8b0>>;
  /** The container allowing to filter entities by having references to entities managed by evitaDB that match inner filtering constraints. This container resembles the SQL inner join clauses where the `entityHaving`contains the filtering condition on particular join. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/references#entity-having) */
  entityHaving?: InputMaybe<FilterContainer11895e8d40db8091>;
  /** The constraint checks if primary key of the entity equals to at least one of the passed values. The constraint is equivalent to one or more `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/constant#entity-primary-key-in-set) */
  entityPrimaryKeyInSet?: InputMaybe<Array<Scalars['Int']['input']>>;
  /** The container that behaves as [logical NOT](https://en.wikipedia.org/wiki/Negation) for the inner constraint. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/logical#not) */
  not?: InputMaybe<FilterContainerf4d19f02cdced8b0>;
  /** The container that combines inner constraints with [logical OR](https://en.wikipedia.org/wiki/Logical_disjunction). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/logical#or) */
  or?: InputMaybe<Array<FilterContainerf4d19f02cdced8b0>>;
};

export type FilterContainerf8ed17494a215fd4 = {
  /** The container that combines inner constraints with [logical AND](https://en.wikipedia.org/wiki/Logical_conjunction). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/logical#and) */
  and?: InputMaybe<Array<FilterContainerf8ed17494a215fd4>>;
  /** The container allowing to filter entities by having references to entities managed by evitaDB that match inner filtering constraints. This container resembles the SQL inner join clauses where the `entityHaving`contains the filtering condition on particular join. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/references#entity-having) */
  entityHaving?: InputMaybe<FilterContainer9151b3bab054ab55>;
  /** The constraint checks if primary key of the entity equals to at least one of the passed values. The constraint is equivalent to one or more `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/constant#entity-primary-key-in-set) */
  entityPrimaryKeyInSet?: InputMaybe<Array<Scalars['Int']['input']>>;
  /** The container that behaves as [logical NOT](https://en.wikipedia.org/wiki/Negation) for the inner constraint. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/logical#not) */
  not?: InputMaybe<FilterContainerf8ed17494a215fd4>;
  /** The container that combines inner constraints with [logical OR](https://en.wikipedia.org/wiki/Logical_disjunction). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/logical#or) */
  or?: InputMaybe<Array<FilterContainerf8ed17494a215fd4>>;
};

export type FilterContainerf111a7119fe869f8 = {
  /** The container that combines inner constraints with [logical AND](https://en.wikipedia.org/wiki/Logical_conjunction). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/logical#and) */
  and?: InputMaybe<Array<FilterContainerf111a7119fe869f8>>;
  /** The container allowing to filter entities by having references to entities managed by evitaDB that match inner filtering constraints. This container resembles the SQL inner join clauses where the `entityHaving`contains the filtering condition on particular join. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/references#entity-having) */
  entityHaving?: InputMaybe<FilterContainer967c71ead6465215>;
  /** The constraint checks if primary key of the entity equals to at least one of the passed values. The constraint is equivalent to one or more `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/constant#entity-primary-key-in-set) */
  entityPrimaryKeyInSet?: InputMaybe<Array<Scalars['Int']['input']>>;
  /** The container that behaves as [logical NOT](https://en.wikipedia.org/wiki/Negation) for the inner constraint. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/logical#not) */
  not?: InputMaybe<FilterContainerf111a7119fe869f8>;
  /** The container that combines inner constraints with [logical OR](https://en.wikipedia.org/wiki/Logical_disjunction). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/logical#or) */
  or?: InputMaybe<Array<FilterContainerf111a7119fe869f8>>;
};

export type FilterContainerf812d9f8dc0269a4 = {
  /** The container that combines inner constraints with [logical AND](https://en.wikipedia.org/wiki/Logical_conjunction). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/logical#and) */
  and?: InputMaybe<Array<FilterContainerf812d9f8dc0269a4>>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeCategoryTypeBetween?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute contains part of passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-contains) */
  attributeCategoryTypeContains?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute ends with passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-ends-with) */
  attributeCategoryTypeEndsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeCategoryTypeEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeCategoryTypeGreaterThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeCategoryTypeGreaterThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeCategoryTypeInSet?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeCategoryTypeIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeCategoryTypeLessThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeCategoryTypeLessThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attributes starts with passed text. (case-sensitive) [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-starts-with) */
  attributeCategoryTypeStartsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeChangedBetween?: InputMaybe<Array<InputMaybe<Scalars['OffsetDateTime']['input']>>>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeChangedEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeChangedGreaterThan?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeChangedGreaterThanEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeChangedInSet?: InputMaybe<Array<Scalars['OffsetDateTime']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeChangedIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeChangedLessThan?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeChangedLessThanEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeCodeBetween?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute contains part of passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-contains) */
  attributeCodeContains?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute ends with passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-ends-with) */
  attributeCodeEndsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeCodeEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeCodeGreaterThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeCodeGreaterThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeCodeInSet?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeCodeIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeCodeLessThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeCodeLessThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attributes starts with passed text. (case-sensitive) [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-starts-with) */
  attributeCodeStartsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeLevelBetween?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeLevelEquals?: InputMaybe<Scalars['Int']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeLevelGreaterThan?: InputMaybe<Scalars['Int']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeLevelGreaterThanEquals?: InputMaybe<Scalars['Int']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeLevelInSet?: InputMaybe<Array<Scalars['Int']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeLevelIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeLevelLessThan?: InputMaybe<Scalars['Int']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeLevelLessThanEquals?: InputMaybe<Scalars['Int']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeNameBetween?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute contains part of passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-contains) */
  attributeNameContains?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute ends with passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-ends-with) */
  attributeNameEndsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeNameEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeNameGreaterThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeNameGreaterThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeNameInSet?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeNameIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeNameLessThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeNameLessThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attributes starts with passed text. (case-sensitive) [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-starts-with) */
  attributeNameStartsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributePublishedBetween?: InputMaybe<Array<InputMaybe<Scalars['OffsetDateTime']['input']>>>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributePublishedEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributePublishedGreaterThan?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributePublishedGreaterThanEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributePublishedInSet?: InputMaybe<Array<Scalars['OffsetDateTime']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributePublishedIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributePublishedLessThan?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributePublishedLessThanEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeStatusBetween?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute contains part of passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-contains) */
  attributeStatusContains?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute ends with passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-ends-with) */
  attributeStatusEndsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeStatusEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeStatusGreaterThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeStatusGreaterThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeStatusInSet?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeStatusIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeStatusLessThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeStatusLessThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attributes starts with passed text. (case-sensitive) [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-starts-with) */
  attributeStatusStartsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeUrlBetween?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute contains part of passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-contains) */
  attributeUrlContains?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute ends with passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-ends-with) */
  attributeUrlEndsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeUrlEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeUrlGreaterThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeUrlGreaterThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeUrlInSet?: InputMaybe<Array<Scalars['String']['input']>>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeUrlInactiveBetween?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute contains part of passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-contains) */
  attributeUrlInactiveContains?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute ends with passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-ends-with) */
  attributeUrlInactiveEndsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeUrlInactiveEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeUrlInactiveGreaterThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeUrlInactiveGreaterThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeUrlInactiveInSet?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeUrlInactiveIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeUrlInactiveLessThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeUrlInactiveLessThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attributes starts with passed text. (case-sensitive) [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-starts-with) */
  attributeUrlInactiveStartsWith?: InputMaybe<Scalars['String']['input']>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeUrlIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeUrlLessThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeUrlLessThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attributes starts with passed text. (case-sensitive) [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-starts-with) */
  attributeUrlStartsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeValidityBetween?: InputMaybe<Array<InputMaybe<Scalars['OffsetDateTime']['input']>>>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeValidityEquals?: InputMaybe<Scalars['DateTimeRange']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeValidityGreaterThan?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeValidityGreaterThanEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the range value of that attribute contains the passed value within its limits (both ends are inclusive). The constraint can be used only for Range data type values. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/range#attribute-in-range) */
  attributeValidityInRange?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeValidityInSet?: InputMaybe<Array<Scalars['DateTimeRange']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeValidityIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeValidityLessThan?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeValidityLessThanEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeVisibilityBetween?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute contains part of passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-contains) */
  attributeVisibilityContains?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute ends with passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-ends-with) */
  attributeVisibilityEndsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeVisibilityEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeVisibilityGreaterThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeVisibilityGreaterThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeVisibilityInSet?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeVisibilityIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeVisibilityLessThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeVisibilityLessThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attributes starts with passed text. (case-sensitive) [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-starts-with) */
  attributeVisibilityStartsWith?: InputMaybe<Scalars['String']['input']>;
  /** The constraint if at least one of entity locales (derived from entity attributes or associated data) equals to the passed one. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/locale#entity-locale-equals) */
  entityLocaleEquals?: InputMaybe<CatalogLocale>;
  /** The constraint checks if primary key of the entity equals to at least one of the passed values. The constraint is equivalent to one or more `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/constant#entity-primary-key-in-set) */
  entityPrimaryKeyInSet?: InputMaybe<Array<Scalars['Int']['input']>>;
  /** The container allowing to filter entities by having references to entities managed by evitaDB that match the inner filter constraint. This container resembles the SQL inner join clauses and works in cooperation with facet summary requirement. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/references#facet-having) */
  facetTagsHaving?: InputMaybe<Array<FilterContainer4aed9dcb3b5a8033>>;
  /** The constraint if entity is placed inside the defined hierarchy tree (or has reference to any hierarchical entity in the tree). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/hierarchy#hierarchy-within) */
  hierarchyRepresentedCategoryWithin?: InputMaybe<WrapperObject2f8608dc42f6dd47>;
  /** The constraint if entity is placed inside the defined hierarchy tree starting at the root of the tree (or has reference to any hierarchical entity in the tree). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/hierarchy#hierarchy-within-root) */
  hierarchyRepresentedCategoryWithinRoot?: InputMaybe<FilterContainer84ed5a3faed889d8>;
  /** The constraint if entity is placed inside the defined hierarchy tree starting at the root of the tree (or has reference to any hierarchical entity in the tree). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/hierarchy#hierarchy-within-root) */
  hierarchyWithinRootSelf?: InputMaybe<FilterContainerd1470c746341886a>;
  /** The constraint if entity is placed inside the defined hierarchy tree (or has reference to any hierarchical entity in the tree). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/hierarchy#hierarchy-within) */
  hierarchyWithinSelf?: InputMaybe<WrapperObject53785cc10d0a33f0>;
  /** The container that behaves as [logical NOT](https://en.wikipedia.org/wiki/Negation) for the inner constraint. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/logical#not) */
  not?: InputMaybe<FilterContainerf812d9f8dc0269a4>;
  /** The container that combines inner constraints with [logical OR](https://en.wikipedia.org/wiki/Logical_disjunction). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/logical#or) */
  or?: InputMaybe<Array<FilterContainerf812d9f8dc0269a4>>;
  /** The container allowing to filter entities by having references to entities managed by evitaDB that match the inner filter constraint. This container resembles the SQL inner join clauses. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/references#reference-having) */
  referenceRelatedProductsHaving?: InputMaybe<Array<FilterContainerbce0a3eba231c049>>;
  /** The container allowing to filter entities by having references to entities managed by evitaDB that match the inner filter constraint. This container resembles the SQL inner join clauses. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/references#reference-having) */
  referenceTagsHaving?: InputMaybe<Array<FilterContainer4aed9dcb3b5a8033>>;
  /** The container for constraints that are controlled by the user (client UI widgets). It is used mainly to distinguish between user constraint (refining the search) and program defined constraints (considered mandatory), when the extra results are computed. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/behavioral#user-filter) */
  userFilter?: InputMaybe<Array<FilterContainer489a26b56eb3e8f0>>;
};

export type FilterContainerfb3c780d439a417c = {
  /** The container that combines inner constraints with [logical AND](https://en.wikipedia.org/wiki/Logical_conjunction). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/logical#and) */
  and?: InputMaybe<Array<FilterContainerfb3c780d439a417c>>;
  /** The constraint checks if primary key of the entity equals to at least one of the passed values. The constraint is equivalent to one or more `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/constant#entity-primary-key-in-set) */
  entityPrimaryKeyInSet?: InputMaybe<Array<Scalars['Int']['input']>>;
  /** The container that behaves as [logical NOT](https://en.wikipedia.org/wiki/Negation) for the inner constraint. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/logical#not) */
  not?: InputMaybe<FilterContainerfb3c780d439a417c>;
  /** The container that combines inner constraints with [logical OR](https://en.wikipedia.org/wiki/Logical_disjunction). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/logical#or) */
  or?: InputMaybe<Array<FilterContainerfb3c780d439a417c>>;
  /** The container for constraints that are controlled by the user (client UI widgets). It is used mainly to distinguish between user constraint (refining the search) and program defined constraints (considered mandatory), when the extra results are computed. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/behavioral#user-filter) */
  userFilter?: InputMaybe<Array<FilterContainerd0ca27605f4a02ae>>;
};

export type FilterContainerfc37342b44def3ac = {
  /** The container that combines inner constraints with [logical AND](https://en.wikipedia.org/wiki/Logical_conjunction). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/logical#and) */
  and?: InputMaybe<Array<FilterContainerfc37342b44def3ac>>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeCatalogNumberBetween?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute contains part of passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-contains) */
  attributeCatalogNumberContains?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute ends with passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-ends-with) */
  attributeCatalogNumberEndsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeCatalogNumberEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeCatalogNumberGreaterThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeCatalogNumberGreaterThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeCatalogNumberInSet?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeCatalogNumberIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeCatalogNumberLessThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeCatalogNumberLessThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attributes starts with passed text. (case-sensitive) [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-starts-with) */
  attributeCatalogNumberStartsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeChangedBetween?: InputMaybe<Array<InputMaybe<Scalars['OffsetDateTime']['input']>>>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeChangedEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeChangedGreaterThan?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeChangedGreaterThanEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeChangedInSet?: InputMaybe<Array<Scalars['OffsetDateTime']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeChangedIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeChangedLessThan?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeChangedLessThanEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeCodeBetween?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute contains part of passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-contains) */
  attributeCodeContains?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute ends with passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-ends-with) */
  attributeCodeEndsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeCodeEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeCodeGreaterThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeCodeGreaterThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeCodeInSet?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeCodeIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeCodeLessThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeCodeLessThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeCodeShortBetween?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute contains part of passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-contains) */
  attributeCodeShortContains?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute ends with passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-ends-with) */
  attributeCodeShortEndsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeCodeShortEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeCodeShortGreaterThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeCodeShortGreaterThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeCodeShortInSet?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeCodeShortIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeCodeShortLessThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeCodeShortLessThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attributes starts with passed text. (case-sensitive) [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-starts-with) */
  attributeCodeShortStartsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attributes starts with passed text. (case-sensitive) [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-starts-with) */
  attributeCodeStartsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeEanBetween?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute contains part of passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-contains) */
  attributeEanContains?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute ends with passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-ends-with) */
  attributeEanEndsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeEanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeEanGreaterThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeEanGreaterThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeEanInSet?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeEanIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeEanLessThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeEanLessThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attributes starts with passed text. (case-sensitive) [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-starts-with) */
  attributeEanStartsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeIsBookAsSetBetween?: InputMaybe<Array<InputMaybe<Scalars['Boolean']['input']>>>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeIsBookAsSetEquals?: InputMaybe<Scalars['Boolean']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeIsBookAsSetGreaterThan?: InputMaybe<Scalars['Boolean']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeIsBookAsSetGreaterThanEquals?: InputMaybe<Scalars['Boolean']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeIsBookAsSetInSet?: InputMaybe<Array<Scalars['Boolean']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeIsBookAsSetIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeIsBookAsSetLessThan?: InputMaybe<Scalars['Boolean']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeIsBookAsSetLessThanEquals?: InputMaybe<Scalars['Boolean']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeNameBetween?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute contains part of passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-contains) */
  attributeNameContains?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute ends with passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-ends-with) */
  attributeNameEndsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeNameEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeNameGreaterThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeNameGreaterThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeNameInSet?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeNameIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeNameLessThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeNameLessThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attributes starts with passed text. (case-sensitive) [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-starts-with) */
  attributeNameStartsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeProductTypeBetween?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute contains part of passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-contains) */
  attributeProductTypeContains?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute ends with passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-ends-with) */
  attributeProductTypeEndsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeProductTypeEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeProductTypeGreaterThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeProductTypeGreaterThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeProductTypeInSet?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeProductTypeIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeProductTypeLessThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeProductTypeLessThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attributes starts with passed text. (case-sensitive) [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-starts-with) */
  attributeProductTypeStartsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributePublishedBetween?: InputMaybe<Array<InputMaybe<Scalars['OffsetDateTime']['input']>>>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributePublishedEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributePublishedGreaterThan?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributePublishedGreaterThanEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributePublishedInSet?: InputMaybe<Array<Scalars['OffsetDateTime']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributePublishedIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributePublishedLessThan?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributePublishedLessThanEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeRatingUsersBetween?: InputMaybe<Array<InputMaybe<Scalars['UUID']['input']>>>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeRatingUsersEquals?: InputMaybe<Scalars['UUID']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeRatingUsersGreaterThan?: InputMaybe<Scalars['UUID']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeRatingUsersGreaterThanEquals?: InputMaybe<Scalars['UUID']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeRatingUsersInSet?: InputMaybe<Array<Scalars['UUID']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeRatingUsersIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeRatingUsersLessThan?: InputMaybe<Scalars['UUID']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeRatingUsersLessThanEquals?: InputMaybe<Scalars['UUID']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeStatusBetween?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute contains part of passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-contains) */
  attributeStatusContains?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute ends with passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-ends-with) */
  attributeStatusEndsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeStatusEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeStatusGreaterThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeStatusGreaterThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeStatusInSet?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeStatusIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeStatusLessThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeStatusLessThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attributes starts with passed text. (case-sensitive) [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-starts-with) */
  attributeStatusStartsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeSupplierCodeBetween?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute contains part of passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-contains) */
  attributeSupplierCodeContains?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute ends with passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-ends-with) */
  attributeSupplierCodeEndsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeSupplierCodeEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeSupplierCodeGreaterThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeSupplierCodeGreaterThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeSupplierCodeInSet?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeSupplierCodeIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeSupplierCodeLessThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeSupplierCodeLessThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attributes starts with passed text. (case-sensitive) [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-starts-with) */
  attributeSupplierCodeStartsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeUrlBetween?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute contains part of passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-contains) */
  attributeUrlContains?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute ends with passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-ends-with) */
  attributeUrlEndsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeUrlEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeUrlGreaterThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeUrlGreaterThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeUrlInSet?: InputMaybe<Array<Scalars['String']['input']>>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeUrlInactiveBetween?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute contains part of passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-contains) */
  attributeUrlInactiveContains?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute ends with passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-ends-with) */
  attributeUrlInactiveEndsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeUrlInactiveEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeUrlInactiveGreaterThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeUrlInactiveGreaterThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeUrlInactiveInSet?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeUrlInactiveIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeUrlInactiveLessThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeUrlInactiveLessThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attributes starts with passed text. (case-sensitive) [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-starts-with) */
  attributeUrlInactiveStartsWith?: InputMaybe<Scalars['String']['input']>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeUrlIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeUrlLessThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeUrlLessThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attributes starts with passed text. (case-sensitive) [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-starts-with) */
  attributeUrlStartsWith?: InputMaybe<Scalars['String']['input']>;
  /** The constraint if at least one of entity locales (derived from entity attributes or associated data) equals to the passed one. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/locale#entity-locale-equals) */
  entityLocaleEquals?: InputMaybe<CatalogLocale>;
  /** The constraint checks if primary key of the entity equals to at least one of the passed values. The constraint is equivalent to one or more `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/constant#entity-primary-key-in-set) */
  entityPrimaryKeyInSet?: InputMaybe<Array<Scalars['Int']['input']>>;
  /** The container allowing to filter entities by having references to entities managed by evitaDB that match the inner filter constraint. This container resembles the SQL inner join clauses and works in cooperation with facet summary requirement. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/references#facet-having) */
  facetBrandHaving?: InputMaybe<Array<FilterContainerc89c1a6e13324cd>>;
  /** The container allowing to filter entities by having references to entities managed by evitaDB that match the inner filter constraint. This container resembles the SQL inner join clauses and works in cooperation with facet summary requirement. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/references#facet-having) */
  facetCategoriesHaving?: InputMaybe<Array<FilterContainer86dfabccfd23aa32>>;
  /** The container allowing to filter entities by having references to entities managed by evitaDB that match the inner filter constraint. This container resembles the SQL inner join clauses and works in cooperation with facet summary requirement. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/references#facet-having) */
  facetGroupsHaving?: InputMaybe<Array<FilterContainer3e99187591f187d1>>;
  /** The container allowing to filter entities by having references to entities managed by evitaDB that match the inner filter constraint. This container resembles the SQL inner join clauses and works in cooperation with facet summary requirement. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/references#facet-having) */
  facetParameterValuesHaving?: InputMaybe<Array<FilterContainer155ce1a8713f11f>>;
  /** The container allowing to filter entities by having references to entities managed by evitaDB that match the inner filter constraint. This container resembles the SQL inner join clauses and works in cooperation with facet summary requirement. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/references#facet-having) */
  facetTagsHaving?: InputMaybe<Array<FilterContainerf111a7119fe869f8>>;
  /** The container allowing to filter entities by having references to entities managed by evitaDB that match the inner filter constraint. This container resembles the SQL inner join clauses and works in cooperation with facet summary requirement. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/references#facet-having) */
  facetVariantParametersHaving?: InputMaybe<Array<FilterContainere0382ac2d2e8abf2>>;
  /** The constraint if entity is placed inside the defined hierarchy tree (or has reference to any hierarchical entity in the tree). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/hierarchy#hierarchy-within) */
  hierarchyCategoriesWithin?: InputMaybe<WrapperObject499978623b8a3d26>;
  /** The constraint if entity is placed inside the defined hierarchy tree starting at the root of the tree (or has reference to any hierarchical entity in the tree). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/hierarchy#hierarchy-within-root) */
  hierarchyCategoriesWithinRoot?: InputMaybe<FilterContainer206bcd749d60c71d>;
  /** The container that behaves as [logical NOT](https://en.wikipedia.org/wiki/Negation) for the inner constraint. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/logical#not) */
  not?: InputMaybe<FilterContainerfc37342b44def3ac>;
  /** The container that combines inner constraints with [logical OR](https://en.wikipedia.org/wiki/Logical_disjunction). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/logical#or) */
  or?: InputMaybe<Array<FilterContainerfc37342b44def3ac>>;
  /** The constraint checks if entity has price for sale within the passed range of prices (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/price#price-between) */
  priceBetween?: InputMaybe<Array<InputMaybe<Scalars['BigDecimal']['input']>>>;
  /** The constraint filters out all entities that lack selling price in specified currency. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/price#price-in-currency) */
  priceInCurrency?: InputMaybe<CatalogCurrency>;
  /** The constraint filters out all entities that lack selling price in specified price lists. Order of price lists also defines priority for selecting the entity selling price - the price from first price list in the list will be used as a selling price for the entire entity. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/price#price-in-price-lists) */
  priceInPriceLists?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint checks if entity has selling price valid at the passed moment. [Check detailed documentation](https://evitadb.io/documentation/filtering/price#price-valid-in) */
  priceValidIn?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** The constraint checks if entity has selling price valid at the passed moment. [Check detailed documentation](https://evitadb.io/documentation/filtering/price#price-valid-in) */
  priceValidInNow?: InputMaybe<Scalars['Boolean']['input']>;
  /** The container allowing to filter entities by having references to entities managed by evitaDB that match the inner filter constraint. This container resembles the SQL inner join clauses. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/references#reference-having) */
  referenceBrandHaving?: InputMaybe<Array<FilterContainerc89c1a6e13324cd>>;
  /** The container allowing to filter entities by having references to entities managed by evitaDB that match the inner filter constraint. This container resembles the SQL inner join clauses. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/references#reference-having) */
  referenceBundlesHaving?: InputMaybe<Array<FilterContainer218d07b1e68074c9>>;
  /** The container allowing to filter entities by having references to entities managed by evitaDB that match the inner filter constraint. This container resembles the SQL inner join clauses. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/references#reference-having) */
  referenceCategoriesHaving?: InputMaybe<Array<FilterContainer86dfabccfd23aa32>>;
  /** The container allowing to filter entities by having references to entities managed by evitaDB that match the inner filter constraint. This container resembles the SQL inner join clauses. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/references#reference-having) */
  referenceGroupsHaving?: InputMaybe<Array<FilterContainer3e99187591f187d1>>;
  /** The container allowing to filter entities by having references to entities managed by evitaDB that match the inner filter constraint. This container resembles the SQL inner join clauses. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/references#reference-having) */
  referenceMasterHaving?: InputMaybe<Array<FilterContainer25ca64b5a7fd295d>>;
  /** The container allowing to filter entities by having references to entities managed by evitaDB that match the inner filter constraint. This container resembles the SQL inner join clauses. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/references#reference-having) */
  referenceParameterValuesHaving?: InputMaybe<Array<FilterContainer155ce1a8713f11f>>;
  /** The container allowing to filter entities by having references to entities managed by evitaDB that match the inner filter constraint. This container resembles the SQL inner join clauses. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/references#reference-having) */
  referenceProductSetItemsHaving?: InputMaybe<Array<FilterContainerdc998e10009e5e68>>;
  /** The container allowing to filter entities by having references to entities managed by evitaDB that match the inner filter constraint. This container resembles the SQL inner join clauses. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/references#reference-having) */
  referenceRelatedProductsHaving?: InputMaybe<Array<FilterContainer464975cef7a99c2c>>;
  /** The container allowing to filter entities by having references to entities managed by evitaDB that match the inner filter constraint. This container resembles the SQL inner join clauses. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/references#reference-having) */
  referenceStockVisibilitiesHaving?: InputMaybe<Array<FilterContainer60712c1bd118553d>>;
  /** The container allowing to filter entities by having references to entities managed by evitaDB that match the inner filter constraint. This container resembles the SQL inner join clauses. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/references#reference-having) */
  referenceTagsHaving?: InputMaybe<Array<FilterContainerf111a7119fe869f8>>;
  /** The container allowing to filter entities by having references to entities managed by evitaDB that match the inner filter constraint. This container resembles the SQL inner join clauses. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/references#reference-having) */
  referenceVariantParametersHaving?: InputMaybe<Array<FilterContainere0382ac2d2e8abf2>>;
  /** The container for constraints that are controlled by the user (client UI widgets). It is used mainly to distinguish between user constraint (refining the search) and program defined constraints (considered mandatory), when the extra results are computed. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/behavioral#user-filter) */
  userFilter?: InputMaybe<Array<FilterContainerc3e9b0836f7ff7f0>>;
};

export type FilterContainerfd7b159f44637dbe = {
  /** The container that combines inner constraints with [logical AND](https://en.wikipedia.org/wiki/Logical_conjunction). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/logical#and) */
  and?: InputMaybe<Array<FilterContainer9151b3bab054ab55>>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeChangedBetween?: InputMaybe<Array<InputMaybe<Scalars['OffsetDateTime']['input']>>>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeChangedEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeChangedGreaterThan?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeChangedGreaterThanEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeChangedInSet?: InputMaybe<Array<Scalars['OffsetDateTime']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeChangedIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeChangedLessThan?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeChangedLessThanEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeCodeBetween?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute contains part of passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-contains) */
  attributeCodeContains?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute ends with passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-ends-with) */
  attributeCodeEndsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeCodeEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeCodeGreaterThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeCodeGreaterThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeCodeInSet?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeCodeIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeCodeLessThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeCodeLessThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attributes starts with passed text. (case-sensitive) [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-starts-with) */
  attributeCodeStartsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeIsNegativeInFilterBetween?: InputMaybe<Array<InputMaybe<Scalars['Boolean']['input']>>>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeIsNegativeInFilterEquals?: InputMaybe<Scalars['Boolean']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeIsNegativeInFilterGreaterThan?: InputMaybe<Scalars['Boolean']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeIsNegativeInFilterGreaterThanEquals?: InputMaybe<Scalars['Boolean']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeIsNegativeInFilterInSet?: InputMaybe<Array<Scalars['Boolean']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeIsNegativeInFilterIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeIsNegativeInFilterLessThan?: InputMaybe<Scalars['Boolean']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeIsNegativeInFilterLessThanEquals?: InputMaybe<Scalars['Boolean']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeIsVisibleInDetailBetween?: InputMaybe<Array<InputMaybe<Scalars['Boolean']['input']>>>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeIsVisibleInDetailEquals?: InputMaybe<Scalars['Boolean']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeIsVisibleInDetailGreaterThan?: InputMaybe<Scalars['Boolean']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeIsVisibleInDetailGreaterThanEquals?: InputMaybe<Scalars['Boolean']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeIsVisibleInDetailInSet?: InputMaybe<Array<Scalars['Boolean']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeIsVisibleInDetailIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeIsVisibleInDetailLessThan?: InputMaybe<Scalars['Boolean']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeIsVisibleInDetailLessThanEquals?: InputMaybe<Scalars['Boolean']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeIsVisibleInFilterBetween?: InputMaybe<Array<InputMaybe<Scalars['Boolean']['input']>>>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeIsVisibleInFilterEquals?: InputMaybe<Scalars['Boolean']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeIsVisibleInFilterGreaterThan?: InputMaybe<Scalars['Boolean']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeIsVisibleInFilterGreaterThanEquals?: InputMaybe<Scalars['Boolean']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeIsVisibleInFilterInSet?: InputMaybe<Array<Scalars['Boolean']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeIsVisibleInFilterIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeIsVisibleInFilterLessThan?: InputMaybe<Scalars['Boolean']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeIsVisibleInFilterLessThanEquals?: InputMaybe<Scalars['Boolean']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeNameBetween?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute contains part of passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-contains) */
  attributeNameContains?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute ends with passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-ends-with) */
  attributeNameEndsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeNameEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeNameGreaterThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeNameGreaterThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeNameInSet?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeNameIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeNameLessThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeNameLessThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attributes starts with passed text. (case-sensitive) [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-starts-with) */
  attributeNameStartsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributePublishedBetween?: InputMaybe<Array<InputMaybe<Scalars['OffsetDateTime']['input']>>>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributePublishedEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributePublishedGreaterThan?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributePublishedGreaterThanEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributePublishedInSet?: InputMaybe<Array<Scalars['OffsetDateTime']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributePublishedIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributePublishedLessThan?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributePublishedLessThanEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeStatusBetween?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute contains part of passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-contains) */
  attributeStatusContains?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute ends with passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-ends-with) */
  attributeStatusEndsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeStatusEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeStatusGreaterThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeStatusGreaterThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeStatusInSet?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeStatusIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeStatusLessThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeStatusLessThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attributes starts with passed text. (case-sensitive) [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-starts-with) */
  attributeStatusStartsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeSubTypeBetween?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute contains part of passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-contains) */
  attributeSubTypeContains?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute ends with passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-ends-with) */
  attributeSubTypeEndsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeSubTypeEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeSubTypeGreaterThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeSubTypeGreaterThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeSubTypeInSet?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeSubTypeIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeSubTypeLessThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeSubTypeLessThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attributes starts with passed text. (case-sensitive) [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-starts-with) */
  attributeSubTypeStartsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeUrlBetween?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute contains part of passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-contains) */
  attributeUrlContains?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute ends with passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-ends-with) */
  attributeUrlEndsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeUrlEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeUrlGreaterThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeUrlGreaterThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeUrlInSet?: InputMaybe<Array<Scalars['String']['input']>>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeUrlInactiveBetween?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute contains part of passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-contains) */
  attributeUrlInactiveContains?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute ends with passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-ends-with) */
  attributeUrlInactiveEndsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeUrlInactiveEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeUrlInactiveGreaterThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeUrlInactiveGreaterThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeUrlInactiveInSet?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeUrlInactiveIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeUrlInactiveLessThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeUrlInactiveLessThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attributes starts with passed text. (case-sensitive) [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-starts-with) */
  attributeUrlInactiveStartsWith?: InputMaybe<Scalars['String']['input']>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeUrlIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeUrlLessThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeUrlLessThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attributes starts with passed text. (case-sensitive) [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-starts-with) */
  attributeUrlStartsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeValidityBetween?: InputMaybe<Array<InputMaybe<Scalars['OffsetDateTime']['input']>>>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeValidityEquals?: InputMaybe<Scalars['DateTimeRange']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeValidityGreaterThan?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeValidityGreaterThanEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the range value of that attribute contains the passed value within its limits (both ends are inclusive). The constraint can be used only for Range data type values. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/range#attribute-in-range) */
  attributeValidityInRange?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeValidityInSet?: InputMaybe<Array<Scalars['DateTimeRange']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeValidityIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeValidityLessThan?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeValidityLessThanEquals?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is within the passed range (both ends are inclusive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-between) */
  attributeVisibilityBetween?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute contains part of passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-contains) */
  attributeVisibilityContains?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attribute ends with passed text (case-sensitive). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-ends-with) */
  attributeVisibilityEndsWith?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if they are both equal. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-equals) */
  attributeVisibilityEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than) */
  attributeVisibilityGreaterThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is greater than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-greater-than-equals) */
  attributeVisibilityGreaterThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute equals to at least one of the passed values. The constraint is equivalent to the multiple `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-in-set) */
  attributeVisibilityInSet?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint if value of the attribute is same as passed special value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-is) */
  attributeVisibilityIs?: InputMaybe<AttributeSpecialValue>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than) */
  attributeVisibilityLessThan?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the value of that attribute is less than or equals to the passed value. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/comparable#attribute-less-than-equals) */
  attributeVisibilityLessThanEquals?: InputMaybe<Scalars['String']['input']>;
  /** Compares value of the attribute with passed value and checks if the text value of that attributes starts with passed text. (case-sensitive) [Check detailed documentation](https://evitadb.io/documentation/query/filtering/string#attribute-starts-with) */
  attributeVisibilityStartsWith?: InputMaybe<Scalars['String']['input']>;
  /** The constraint checks if primary key of the entity equals to at least one of the passed values. The constraint is equivalent to one or more `equals` constraints combined with logical OR. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/constant#entity-primary-key-in-set) */
  entityPrimaryKeyInSet?: InputMaybe<Array<Scalars['Int']['input']>>;
  /** The container that behaves as [logical NOT](https://en.wikipedia.org/wiki/Negation) for the inner constraint. [Check detailed documentation](https://evitadb.io/documentation/query/filtering/logical#not) */
  not?: InputMaybe<FilterContainer9151b3bab054ab55>;
  /** The container that combines inner constraints with [logical OR](https://en.wikipedia.org/wiki/Logical_disjunction). [Check detailed documentation](https://evitadb.io/documentation/query/filtering/logical#or) */
  or?: InputMaybe<Array<FilterContainer9151b3bab054ab55>>;
};

/**
 * Attributes allows defining set of data that are fetched in bulk along with the entity body.
 * Attributes may be used for fast filtering or can be used to sort along.
 *
 */
export type GlobalAttributes = {
  __typename?: 'GlobalAttributes';
  /**
   * Date and time of the last change of this entity. This timestamp is updated only when real change
   * in entity occurs in primary data store.  This timestamp should be used on boundaries with external
   * systems (such as inventory feeds and so on).
   */
  changed?: Maybe<Scalars['OffsetDateTime']['output']>;
  /**
   * Unique code that identifies the entity among other entities of the same kind.
   * The code is equivalent to primary key but is targeted on external consumers (systems).
   */
  code?: Maybe<Scalars['String']['output']>;
  /** Full description of the entity in HTML format. */
  description?: Maybe<Scalars['String']['output']>;
  /** Shortened version of description of the entity in plain text. */
  descriptionShort?: Maybe<Scalars['String']['output']>;
  /** Localized name of the entity. */
  name?: Maybe<Scalars['String']['output']>;
  /**
   * Date and time when this entity was last published in the evitaDB index. This timestamp will usually
   * be different from the `changed` attribute because the publishing process asynchronously picks up
   * changed entities and publishes them to the evitaDB index with some delay. Also, when evitaDB is
   * completely re-indexed, all timestamps in this attribute will be reset to a new timestamp, while the
   * `changed` attribute will remain the same.
   *
   */
  published?: Maybe<Scalars['OffsetDateTime']['output']>;
  /**
   * Returns the status of the entity:
   *
   * - ACTIVE: entity is available on frontend
   * - PRIVATE: entity is  not available on frontend, but it's visible in administration
   */
  status?: Maybe<Scalars['String']['output']>;
  /** Localized and globally unique URL of the entity. */
  url?: Maybe<Scalars['String']['output']>;
  /**
   * Old URLs that has been originally assigned to the entity, but are no longer active. Each value that was
   * once `url` but was changed to something else is moved to this list. Thi allows accessing the entity even
   * on the previous location (with redirect) so that remembered URLs in external systems don't end up with
   * "entity not found" response.
   */
  urlInactive?: Maybe<Array<Scalars['String']['output']>>;
};

/**
 * Catalog-wise entity with only common data across all entity collections.
 *
 */
export type GlobalEntity = {
  __typename?: 'GlobalEntity';
  /**
   * Contains set of all locales that were used for localized attributes or associated data of
   * this particular entity.
   *
   */
  allLocales: Array<CatalogLocale>;
  /**
   * Attributes allows defining set of data that are fetched in bulk along with the reference.
   * Attributes may be used for fast filtering or can be used to sort along.
   *
   */
  attributes: GlobalAttributes;
  /**
   * Contains set of requested locales for this particular entity.
   *
   */
  locales: Array<CatalogLocale>;
  /**
   * Unique Integer positive number representing the entity. Can be used for fast lookup for
   * entity (entities). Primary key must be unique within the same entity type.
   *
   */
  primaryKey: Scalars['Int']['output'];
  /**
   * Contains a reference to actual collection-specific entity represented by this global entity holder.
   *
   */
  targetEntity: Entity;
  /**
   * Type of entity.
   * Entity type is main sharding key - all data of entities with same type are stored in separated collections. Within the
   * entity type entity is uniquely represented by primary key.
   *
   */
  type: Scalars['String']['output'];
  /**
   * Contains version of this definition object and gets increased with any entity type update. Allows to execute
   * optimistic locking i.e. avoiding parallel modifications.
   *
   */
  version: Scalars['Int']['output'];
};


/**
 * Catalog-wise entity with only common data across all entity collections.
 *
 */
export type GlobalEntityAttributesArgs = {
  locale?: InputMaybe<CatalogLocale>;
};

/**
 * Groups allow categorization of products outside the shared category hierarchy.
 * Single product can be part of multiple groups. Groups are not hierarchically organized, they're always flat.
 */
export type Group = Entity & {
  __typename?: 'Group';
  /**
   * Contains set of all locales that were used for localized attributes or associated data of
   * this particular entity.
   *
   */
  allLocales: Array<CatalogLocale>;
  /**
   * Associated data carry additional data entries that are never used for filtering / sorting but may be needed to be fetched
   * along with entity in order to present data to the target consumer (i.e. user / API / bot). Associated data may be stored
   * in slower storage and may contain wide range of data types - from small ones (i.e. numbers, strings, dates) up to large
   * binary arrays representing entire files (i.e. pictures, documents).
   *
   */
  associatedData?: Maybe<GroupAssociatedData>;
  /**
   * Attributes allows defining set of data that are fetched in bulk along with the reference.
   * Attributes may be used for fast filtering or can be used to sort along.
   *
   */
  attributes?: Maybe<GroupAttributes>;
  /**
   * Contains set of requested locales for this particular entity.
   *
   */
  locales: Array<CatalogLocale>;
  /**
   * Unique Integer positive number representing the entity. Can be used for fast lookup for
   * entity (entities). Primary key must be unique within the same entity type.
   *
   */
  primaryKey: Scalars['Int']['output'];
  /**
   * Tags allow non-systematic categorization (cross-structure tagging) of the entities. Tags are often more
   * digestible from the user's point of view. Tags are maintained in Edee.ONE CMS and here we just link them.
   */
  tags: Array<GroupTagsReference>;
  /**
   * Type of entity.
   * Entity type is main sharding key - all data of entities with same type are stored in separated collections. Within the
   * entity type entity is uniquely represented by primary key.
   *
   */
  type: Scalars['String']['output'];
  /**
   * Contains version of this definition object and gets increased with any entity type update. Allows to execute
   * optimistic locking i.e. avoiding parallel modifications.
   *
   */
  version: Scalars['Int']['output'];
};


/**
 * Groups allow categorization of products outside the shared category hierarchy.
 * Single product can be part of multiple groups. Groups are not hierarchically organized, they're always flat.
 */
export type GroupAssociatedDataArgs = {
  locale?: InputMaybe<CatalogLocale>;
};


/**
 * Groups allow categorization of products outside the shared category hierarchy.
 * Single product can be part of multiple groups. Groups are not hierarchically organized, they're always flat.
 */
export type GroupAttributesArgs = {
  locale?: InputMaybe<CatalogLocale>;
};


/**
 * Groups allow categorization of products outside the shared category hierarchy.
 * Single product can be part of multiple groups. Groups are not hierarchically organized, they're always flat.
 */
export type GroupTagsArgs = {
  filterBy?: InputMaybe<FilterContainera8a85d9a060ac1e6>;
  orderBy?: InputMaybe<Array<OrderContaineraea31df67abb5839>>;
};

/**
 * Associated data carry additional data entries that are never used for filtering / sorting but may be needed to be fetched
 * along with entity in order to present data to the target consumer (i.e. user / API / bot). Associated data may be stored
 * in slower storage and may contain wide range of data types - from small ones (i.e. numbers, strings, dates) up to large
 * binary arrays representing entire files (i.e. pictures, documents).
 *
 */
export type GroupAssociatedData = {
  __typename?: 'GroupAssociatedData';
  /**
   * Contains a structure that keeps all currently active URLs for different locales. This information is used
   * for rendering language switching menu. We need to use correct active URL so that user stays looking
   * the exact same entity after the locale switch occurred - just in different language.
   */
  allActiveUrls?: Maybe<Scalars['ComplexDataObject']['output']>;
  /**
   * A structure that allows to reference multiple binary files related to the entity. The related files might
   * represent pictures, technical documentation, certificates, 3D models and much more. The files are expected
   * to be kept in external storage and referenced from here.
   *
   * The format of the related file string is: `code`:`storageId`:`[id1,id2,id3]` where:
   *
   * - `code` is the identificator of the related file type
   * - `storageId` is the identifiactor of the Edee.ONE storage
   * - `[id1,id2,id3]` is array of integer numbers that identify the files in the storage
   *
   * This associated data contains all data about related files and is superset of `relatedFiles`.
   */
  allRelatedFiles?: Maybe<Array<Scalars['String']['output']>>;
  /** A structure that allows to specify a set of localized labels for entity. */
  localization?: Maybe<Scalars['ComplexDataObject']['output']>;
};

/**
 * Attributes allows defining set of data that are fetched in bulk along with the entity body.
 * Attributes may be used for fast filtering or can be used to sort along.
 *
 */
export type GroupAttributes = {
  __typename?: 'GroupAttributes';
  /**
   * Date and time of the last change of this entity. This timestamp is updated only when real change
   * in entity occurs in primary data store.  This timestamp should be used on boundaries with external
   * systems (such as inventory feeds and so on).
   */
  changed: Scalars['OffsetDateTime']['output'];
  /**
   * Unique code that identifies the entity among other entities of the same kind.
   * The code is equivalent to primary key but is targeted on external consumers (systems).
   */
  code: Scalars['String']['output'];
  /** Full description of the entity in HTML format. */
  description?: Maybe<Scalars['String']['output']>;
  /** Shortened version of description of the entity in plain text. */
  descriptionShort?: Maybe<Scalars['String']['output']>;
  /** Localized name of the entity. */
  name: Scalars['String']['output'];
  /**
   * Order of the entity among other entities sharing the same parent in the listing. Used for sorting entities
   * in ascending order.
   */
  order: Scalars['Predecessor']['output'];
  /**
   * Date and time when this entity was last published in the evitaDB index. This timestamp will usually
   * be different from the `changed` attribute because the publishing process asynchronously picks up
   * changed entities and publishes them to the evitaDB index with some delay. Also, when evitaDB is
   * completely re-indexed, all timestamps in this attribute will be reset to a new timestamp, while the
   * `changed` attribute will remain the same.
   *
   */
  published: Scalars['OffsetDateTime']['output'];
  /**
   * A structure that allows to reference multiple binary files related to the entity. The related files might
   * represent pictures, technical documentation, certificates, 3D models and much more. The files are expected
   * to be kept in external storage and referenced from here.
   *
   * - `code` is the identificator of the related file type
   * - `storageId` is the identificator of the Edee.ONE storage
   * - `[id1,id2,id3]` is array of integer numbers that identify the files in the storage
   *
   * This attribute contains subset of `allRelatedFiles` that is used frequently along with entity
   * in listings and so on. Usually it contains something like main motive.
   */
  relatedFiles?: Maybe<Array<Scalars['String']['output']>>;
  /**
   * Returns the status of the entity:
   *
   * - ACTIVE: entity is available on frontend
   * - PRIVATE: entity is  not available on frontend, but it's visible in administration
   */
  status: Scalars['String']['output'];
  /** Localized and globally unique URL of the entity. */
  url?: Maybe<Scalars['String']['output']>;
  /**
   * Old URLs that has been originally assigned to the entity, but are no longer active. Each value that was
   * once `url` but was changed to something else is moved to this list. Thi allows accessing the entity even
   * on the previous location (with redirect) so that remembered URLs in external systems don't end up with
   * "entity not found" response.
   */
  urlInactive?: Maybe<Array<Scalars['String']['output']>>;
  /**
   * Date time range of general accessibility to the entity. Outside this range the entity behaves like if
   * the status was set to PRIVATE.
   */
  validity?: Maybe<Scalars['DateTimeRange']['output']>;
  /**
   * Returns the visibility state of the entity:
   * 	- VISIBLE: entity is visible in signposts, searchable, accessible on detail page
   * 	- INVISIBLE: the entity is only available on a specific detail page (with URL knowledge),
   * 		is not searchable and is not present in listings
   */
  visibility: Scalars['String']['output'];
};

/**
 * Map of requested extra results besides actual found records.
 *
 */
export type GroupExtraResults = {
  __typename?: 'GroupExtraResults';
  attributeHistograms?: Maybe<Array<AttributeNamedHistogram>>;
  /**
   * Returns summary of all facets that match query filter excluding those inside `userFilter`.
   * Object contains information about facet groups and individual facets in them as well as appropriate statistics for them.
   *
   */
  facetSummary?: Maybe<GroupFacetSummary>;
  /**
   * Returns object containing detailed information about query processing time and its decomposition to single operations.
   *
   */
  queryTelemetry: Scalars['Object']['output'];
};


/**
 * Map of requested extra results besides actual found records.
 *
 */
export type GroupExtraResultsAttributeHistogramsArgs = {
  attributes: Array<Scalars['String']['input']>;
};


/**
 * Map of requested extra results besides actual found records.
 *
 */
export type GroupExtraResultsQueryTelemetryArgs = {
  formatted?: InputMaybe<Scalars['Boolean']['input']>;
};

/**
 * This DTO allows returning summary of all facets that match query filter excluding those inside `userFilter`.
 * DTO contains information about facet groups and individual facets in them as well as appropriate statistics for them.
 *
 */
export type GroupFacetSummary = {
  __typename?: 'GroupFacetSummary';
  tags?: Maybe<Array<GroupTagsFacetGroupStatistics>>;
};


/**
 * This DTO allows returning summary of all facets that match query filter excluding those inside `userFilter`.
 * DTO contains information about facet groups and individual facets in them as well as appropriate statistics for them.
 *
 */
export type GroupFacetSummaryTagsArgs = {
  filterGroupBy?: InputMaybe<FilterContainer3a2a9890a875d4bd>;
  orderGroupBy?: InputMaybe<Array<OrderContainer2cb1816184dccd3f>>;
};

/**
 * Contains all possible local mutations to perform on entity `Group`.
 *
 */
export type GroupLocalMutationAggregate = {
  /**
   * Increments or decrements existing numeric value by specified delta (negative number produces decremental of
   * existing number, positive one incrementation).
   *
   * Allows to specify the number range that is tolerated for the value after delta application has been finished to
   * verify for example that number of items on stock doesn't go below zero.
   *
   */
  applyDeltaAttributeMutation?: InputMaybe<ApplyDeltaAttributeMutation>;
  /**
   * This mutation allows to create a reference in the entity.
   *
   */
  insertReferenceMutation?: InputMaybe<InsertReferenceMutation>;
  /**
   * This mutation allows to create / update / remove attribute of the reference.
   *
   */
  referenceAttributeMutation?: InputMaybe<ReferenceAttributeMutation>;
  /**
   * Remove associated data mutation will drop existing associatedData - ie.generates new version of the associated data with tombstone
   * on it.
   *
   */
  removeAssociatedDataMutation?: InputMaybe<RemoveAssociatedDataMutation>;
  /**
   * Remove attribute mutation will drop existing attribute - ie.generates new version of the attribute with tombstone
   * on it.
   *
   */
  removeAttributeMutation?: InputMaybe<RemoveAttributeMutation>;
  /**
   * This mutation allows to remove group in the reference.
   *
   */
  removeReferenceGroupMutation?: InputMaybe<RemoveReferenceGroupMutation>;
  /**
   * This mutation allows to remove a reference from the entity.
   *
   */
  removeReferenceMutation?: InputMaybe<RemoveReferenceMutation>;
  /**
   * This mutation allows to create / update group of the reference.
   *
   */
  setReferenceGroupMutation?: InputMaybe<SetReferenceGroupMutation>;
  /**
   * Upsert associatedData mutation will either update existing associatedData or create new one.
   *
   */
  upsertAssociatedDataMutation?: InputMaybe<UpsertAssociatedDataMutation>;
  /**
   * Upsert attribute mutation will either update existing attribute or create new one.
   *
   */
  upsertAttributeMutation?: InputMaybe<UpsertAttributeMutation>;
};

/**
 * Page of records according to pagination rules in input query.
 *
 */
export type GroupRecordPage = {
  __typename?: 'GroupRecordPage';
  /**
   * Actual found sorted page/strip of records.
   *
   */
  data: Array<Group>;
  /**
   * Returns true if there are no data available.
   *
   */
  empty: Scalars['Boolean']['output'];
  /**
   * Returns true if current page/strip is the first page/strip in the result set.
   *
   */
  first: Scalars['Boolean']['output'];
  /**
   * Returns offset of the first record of current page with current pageSize.
   *
   */
  firstPageItemNumber: Scalars['Int']['output'];
  /**
   * Returns true if there is next page/strip available.
   *
   */
  hasNext: Scalars['Boolean']['output'];
  /**
   * Returns true if there is previous page/strip available.
   *
   */
  hasPrevious: Scalars['Boolean']['output'];
  /**
   * Returns true if current page/strip is the last page/strip in the result set.
   *
   */
  last: Scalars['Boolean']['output'];
  /**
   * Returns offset of the last record of current page with current pageSize.
   *
   */
  lastPageItemNumber: Scalars['Int']['output'];
  /**
   * Returns number of the last page that can be accessed with current number of records.
   * Returns -1 when offset/limit was used for creating paginated list.
   *
   */
  lastPageNumber: Scalars['Int']['output'];
  /**
   * Returns current page number (indexed from 1).
   *
   */
  pageNumber: Scalars['Int']['output'];
  /**
   * Returns number of records per single page.
   *
   */
  pageSize: Scalars['Int']['output'];
  /**
   * Returns true if there is only single page/strip available (i.e. total record count < record count on one page).
   *
   */
  singlePage: Scalars['Boolean']['output'];
  /**
   * Returns total number of records that are possible to fetch by paginating entire result stream.
   *
   */
  totalRecordCount: Scalars['Int']['output'];
};

/**
 * Strip of records according to offset and limit rules in input query.
 *
 */
export type GroupRecordStrip = {
  __typename?: 'GroupRecordStrip';
  /**
   * Actual found sorted page/strip of records.
   *
   */
  data: Array<Group>;
  /**
   * Returns true if there are no data available.
   *
   */
  empty: Scalars['Boolean']['output'];
  /**
   * Returns true if current page/strip is the first page/strip in the result set.
   *
   */
  first: Scalars['Boolean']['output'];
  /**
   * Returns true if there is next page/strip available.
   *
   */
  hasNext: Scalars['Boolean']['output'];
  /**
   * Returns true if there is previous page/strip available.
   *
   */
  hasPrevious: Scalars['Boolean']['output'];
  /**
   * Returns true if current page/strip is the last page/strip in the result set.
   *
   */
  last: Scalars['Boolean']['output'];
  /**
   * Returns limit - i.e. maximal number of records that are requested after offset.
   *
   */
  limit: Scalars['Int']['output'];
  /**
   * Returns current offset (indexed from 0).
   *
   */
  offset: Scalars['Int']['output'];
  /**
   * Returns true if there is only single page/strip available (i.e. total record count < record count on one page).
   *
   */
  singlePage: Scalars['Boolean']['output'];
  /**
   * Returns total number of records that are possible to fetch by paginating entire result stream.
   *
   */
  totalRecordCount: Scalars['Int']['output'];
};

/**
 * Evita response contains all results to single query. Results are divided to two parts - main results returned by
 * `recordPage`/`recordStrip` and set of extra results retrieved by `extraResults`.
 *
 */
export type GroupResponse = {
  __typename?: 'GroupResponse';
  /**
   * Returns map of requested extra results besides actual found records.
   *
   */
  extraResults: GroupExtraResults;
  /**
   * Returns page of records according to pagination rules in input query.
   * Either `page` or `strip` can be used, not both.
   *
   */
  recordPage?: Maybe<GroupRecordPage>;
  /**
   * Returns strip of records according to pagination rules in input query.
   * Either `page` or `strip` can be used, not both.
   *
   */
  recordStrip?: Maybe<GroupRecordStrip>;
};


/**
 * Evita response contains all results to single query. Results are divided to two parts - main results returned by
 * `recordPage`/`recordStrip` and set of extra results retrieved by `extraResults`.
 *
 */
export type GroupResponseRecordPageArgs = {
  number?: InputMaybe<Scalars['Int']['input']>;
  size?: InputMaybe<Scalars['Int']['input']>;
};


/**
 * Evita response contains all results to single query. Results are divided to two parts - main results returned by
 * `recordPage`/`recordStrip` and set of extra results retrieved by `extraResults`.
 *
 */
export type GroupResponseRecordStripArgs = {
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
};

/**
 * This DTO contains information about single facet group and statistics of the facets that relates to it.
 *
 */
export type GroupTagsFacetGroupStatistics = {
  __typename?: 'GroupTagsFacetGroupStatistics';
  /**
   * Contains number of distinct entities in the response that possess any reference in this group.
   *
   */
  count: Scalars['Int']['output'];
  /**
   * Contains statistics of individual facets.
   *
   */
  facetStatistics: Array<GroupTagsFacetStatistics>;
  /**
   * Contains referenced entity representing this group.
   *
   */
  groupEntity?: Maybe<EntityReference>;
};


/**
 * This DTO contains information about single facet group and statistics of the facets that relates to it.
 *
 */
export type GroupTagsFacetGroupStatisticsFacetStatisticsArgs = {
  filterBy?: InputMaybe<FilterContainer967c71ead6465215>;
  orderBy?: InputMaybe<Array<OrderContainer60ec14e01e238dfe>>;
};

/**
 * This DTO contains information about single facet statistics of the entities that are present in the response.
 *
 */
export type GroupTagsFacetStatistics = {
  __typename?: 'GroupTagsFacetStatistics';
  /**
   * Contains number of distinct entities in the response that possess of this reference.
   *
   */
  count: Scalars['Int']['output'];
  /**
   * Contains referenced entity representing.
   *
   */
  facetEntity?: Maybe<Tag>;
  /**
   * This field is not null only when this facet is not requested.
   * Contains projected impact on the current response if this facet is also requested in filtering constraints.
   *
   */
  impact?: Maybe<FacetRequestImpact>;
  /**
   * Contains TRUE if the facet was part of the query filtering constraints.
   *
   */
  requested: Scalars['Boolean']['output'];
};

/**
 * Tags allow non-systematic categorization (cross-structure tagging) of the entities. Tags are often more
 * digestible from the user's point of view. Tags are maintained in Edee.ONE CMS and here we just link them.
 */
export type GroupTagsReference = {
  __typename?: 'GroupTagsReference';
  /**
   * Returns body of the referenced entity in case its fetching was requested via entity_groupFetch constraint.
   *
   */
  groupEntity: EntityReference;
  /**
   * Returns body of the referenced entity in case its fetching was requested via entity_fetch constraint.
   *
   */
  referencedEntity?: Maybe<Tag>;
  /**
   *          Returns primary key of the referenced (internal or external) entity.
   *
   */
  referencedPrimaryKey: Scalars['Int']['output'];
};

/**
 * A histogram is an approximate representation of the distribution of numerical data. For detailed description please
 * see [Wikipedia](https://en.wikipedia.org/wiki/Histogram).
 * Histogram can be computed only for numeric based properties. It visualises which property values are more common
 * in the returned data set and which are rare. Bucket count will never exceed requested bucket count but there
 * may be less of them if there is no enough data for computation. Bucket thresholds are specified heuristically so tha
 * there are as few "empty buckets" as possible.
 *
 * - buckets are defined by their lower bounds (inclusive)
 * - the upper bound is the lower bound of the next bucket
 *
 */
export type Histogram = {
  __typename?: 'Histogram';
  /**
   * Returns histogram buckets that represents a tuple of occurrence count and the minimal threshold of the bucket
   * values.
   *
   */
  buckets: Array<HistogramBucket>;
  /**
   * Returns right bound of the last bucket of the histogram. Each bucket contains only left bound threshold, so this
   * value is necessary so that first histogram buckets makes any sense. This value is exceptional in the sense that
   * it represents the biggest value encountered in the returned set and represents inclusive right bound for the
   * last bucket.
   *
   */
  max: Scalars['BigDecimal']['output'];
  /**
   * Returns left bound of the first bucket. It represents the smallest value encountered in the returned set.
   *
   */
  min: Scalars['BigDecimal']['output'];
  /**
   * Returns count of all entities that are covered by this histogram. It's plain sum of occurrences of all buckets
   * in the histogram.
   *
   */
  overallCount: Scalars['Int']['output'];
};


/**
 * A histogram is an approximate representation of the distribution of numerical data. For detailed description please
 * see [Wikipedia](https://en.wikipedia.org/wiki/Histogram).
 * Histogram can be computed only for numeric based properties. It visualises which property values are more common
 * in the returned data set and which are rare. Bucket count will never exceed requested bucket count but there
 * may be less of them if there is no enough data for computation. Bucket thresholds are specified heuristically so tha
 * there are as few "empty buckets" as possible.
 *
 * - buckets are defined by their lower bounds (inclusive)
 * - the upper bound is the lower bound of the next bucket
 *
 */
export type HistogramBucketsArgs = {
  behavior?: InputMaybe<HistogramBehavior>;
  requestedCount: Scalars['Int']['input'];
};

export enum HistogramBehavior {
  Optimized = 'OPTIMIZED',
  Standard = 'STANDARD'
}

/**
 * Data object that carries out threshold in histogram (or bucket if you will) along with number of occurrences in it.
 *
 */
export type HistogramBucket = {
  __typename?: 'HistogramBucket';
  /**
   * Contains number of entity occurrences in this bucket - e.g. number of entities that has monitored property value
   * between previous bucket threshold (exclusive) and this bucket threshold (inclusive)
   *
   */
  occurrences: Scalars['Int']['output'];
  /**
   * Contains true if the query contained `attributeBetween` or `priceBetween`
   * constraint for particular attribute / price and the bucket threshold lies within the range
   * (inclusive) of the constraint. False otherwise.
   *
   */
  requested: Scalars['Boolean']['output'];
  /**
   * Contains threshold (left bound - inclusive) of the bucket.
   *
   */
  threshold: Scalars['BigDecimal']['output'];
};

/**
 * This mutation allows to create a reference in the entity.
 *
 */
export type InsertReferenceMutation = {
  /**
   *  Contains information about reference cardinality. This value is usually NULL except the case when the reference
   *  is created for the first time and `EvolutionMode.ADDING_REFERENCES` is allowed.
   *
   */
  cardinality?: InputMaybe<Cardinality>;
  /**
   * Unique identifier of the reference.
   *
   */
  name: Scalars['String']['input'];
  /**
   * Primary key of the referenced entity. Might be also any integer
   * that uniquely identifies some external resource not maintained by Evita.
   *
   */
  primaryKey: Scalars['Int']['input'];
  /**
   * Contains information about target entity type. This value is usually NULL except the case when the reference
   * is created for the first time and `EvolutionMode.ADDING_REFERENCES` is allowed.
   *
   */
  referencedEntityType?: InputMaybe<Scalars['String']['input']>;
};

export type Mutation = {
  __typename?: 'Mutation';
  /**
   * Deletes existing entities from `%s` collection that conforms with passed query and returns deletion info.
   *
   */
  deleteAdjustedPricePolicy: Array<AdjustedPricePolicy>;
  /**
   * Deletes existing entities from `%s` collection that conforms with passed query and returns deletion info.
   *
   */
  deleteBrand: Array<Brand>;
  /**
   * Deletes existing entities from `%s` collection that conforms with passed query and returns deletion info.
   *
   */
  deleteCategory: Array<Category>;
  /**
   * Deletes existing entities from `%s` collection that conforms with passed query and returns deletion info.
   *
   */
  deleteGroup: Array<Group>;
  /**
   * Deletes existing entities from `%s` collection that conforms with passed query and returns deletion info.
   *
   */
  deleteObsoleteProduct: Array<ObsoleteProduct>;
  /**
   * Deletes existing entities from `%s` collection that conforms with passed query and returns deletion info.
   *
   */
  deleteParameter: Array<Parameter>;
  /**
   * Deletes existing entities from `%s` collection that conforms with passed query and returns deletion info.
   *
   */
  deleteParameterGroup: Array<ParameterGroup>;
  /**
   * Deletes existing entities from `%s` collection that conforms with passed query and returns deletion info.
   *
   */
  deleteParameterValue: Array<ParameterValue>;
  /**
   * Deletes existing entities from `%s` collection that conforms with passed query and returns deletion info.
   *
   */
  deletePaymentMethod: Array<PaymentMethod>;
  /**
   * Deletes existing entities from `%s` collection that conforms with passed query and returns deletion info.
   *
   */
  deletePickupPoint: Array<PickupPoint>;
  /**
   * Deletes existing entities from `%s` collection that conforms with passed query and returns deletion info.
   *
   */
  deletePriceList: Array<PriceList>;
  /**
   * Deletes existing entities from `%s` collection that conforms with passed query and returns deletion info.
   *
   */
  deleteProduct: Array<Product>;
  /**
   * Deletes existing entities from `%s` collection that conforms with passed query and returns deletion info.
   *
   */
  deleteProductBundle: Array<ProductBundle>;
  /**
   * Deletes existing entities from `%s` collection that conforms with passed query and returns deletion info.
   *
   */
  deleteShippingMethod: Array<ShippingMethod>;
  /**
   * Deletes existing entities from `%s` collection that conforms with passed query and returns deletion info.
   *
   */
  deleteStock: Array<Stock>;
  /**
   * Deletes existing entities from `%s` collection that conforms with passed query and returns deletion info.
   *
   */
  deleteTag: Array<Tag>;
  /**
   * Updates existing or inserts new entity to `%s` collection.
   *
   */
  upsertAdjustedPricePolicy: AdjustedPricePolicy;
  /**
   * Updates existing or inserts new entity to `%s` collection.
   *
   */
  upsertBrand: Brand;
  /**
   * Updates existing or inserts new entity to `%s` collection.
   *
   */
  upsertCategory: Category;
  /**
   * Updates existing or inserts new entity to `%s` collection.
   *
   */
  upsertGroup: Group;
  /**
   * Updates existing or inserts new entity to `%s` collection.
   *
   */
  upsertObsoleteProduct: ObsoleteProduct;
  /**
   * Updates existing or inserts new entity to `%s` collection.
   *
   */
  upsertParameter: Parameter;
  /**
   * Updates existing or inserts new entity to `%s` collection.
   *
   */
  upsertParameterGroup: ParameterGroup;
  /**
   * Updates existing or inserts new entity to `%s` collection.
   *
   */
  upsertParameterValue: ParameterValue;
  /**
   * Updates existing or inserts new entity to `%s` collection.
   *
   */
  upsertPaymentMethod: PaymentMethod;
  /**
   * Updates existing or inserts new entity to `%s` collection.
   *
   */
  upsertPickupPoint: PickupPoint;
  /**
   * Updates existing or inserts new entity to `%s` collection.
   *
   */
  upsertPriceList: PriceList;
  /**
   * Updates existing or inserts new entity to `%s` collection.
   *
   */
  upsertProduct: Product;
  /**
   * Updates existing or inserts new entity to `%s` collection.
   *
   */
  upsertProductBundle: ProductBundle;
  /**
   * Updates existing or inserts new entity to `%s` collection.
   *
   */
  upsertShippingMethod: ShippingMethod;
  /**
   * Updates existing or inserts new entity to `%s` collection.
   *
   */
  upsertStock: Stock;
  /**
   * Updates existing or inserts new entity to `%s` collection.
   *
   */
  upsertTag: Tag;
};


export type MutationDeleteAdjustedPricePolicyArgs = {
  filterBy?: InputMaybe<FilterContainer8b8d18989520db5b>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<OrderContainer638ffac3513b5308>>;
};


export type MutationDeleteBrandArgs = {
  filterBy?: InputMaybe<FilterContainer517d1d8ea5c4e742>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<OrderContainer18970ca942385a0b>>;
};


export type MutationDeleteCategoryArgs = {
  filterBy?: InputMaybe<FilterContainerf812d9f8dc0269a4>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<OrderContaineraff1014cee092cf7>>;
};


export type MutationDeleteGroupArgs = {
  filterBy?: InputMaybe<FilterContainerc183dce568fe08c7>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<OrderContainer21da021e14344cc3>>;
};


export type MutationDeleteObsoleteProductArgs = {
  filterBy?: InputMaybe<FilterContainerfc37342b44def3ac>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<OrderContainer8818faf0a11a5fa2>>;
};


export type MutationDeleteParameterArgs = {
  filterBy?: InputMaybe<FilterContainer9151b3bab054ab55>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<OrderContainer670a07c21adba5c9>>;
};


export type MutationDeleteParameterGroupArgs = {
  filterBy?: InputMaybe<FilterContainer1e4225e8e77021d7>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<OrderContainerd7735c5c37d5547c>>;
};


export type MutationDeleteParameterValueArgs = {
  filterBy?: InputMaybe<FilterContainer744027555f798cbb>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<OrderContainer5f9032f190cf0a74>>;
};


export type MutationDeletePaymentMethodArgs = {
  filterBy?: InputMaybe<FilterContainer3ff4be886c39a0e>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<OrderContainerd961bc3fab551bb0>>;
};


export type MutationDeletePickupPointArgs = {
  filterBy?: InputMaybe<FilterContainerd1ed0dd289b39bb5>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<OrderContainerdfe938cf264d6dc0>>;
};


export type MutationDeletePriceListArgs = {
  filterBy?: InputMaybe<FilterContainerb29777b6620f8b8d>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<OrderContainerb836a731b242bb0>>;
};


export type MutationDeleteProductArgs = {
  filterBy?: InputMaybe<FilterContainer585fda0640662fe0>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<OrderContainer90fb661fce37688>>;
};


export type MutationDeleteProductBundleArgs = {
  filterBy?: InputMaybe<FilterContainer150edb03f6a8549a>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<OrderContainerc1398334fa8f22a>>;
};


export type MutationDeleteShippingMethodArgs = {
  filterBy?: InputMaybe<FilterContainer21f42768fb89b5d4>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<OrderContainere47e56ee5b3ec965>>;
};


export type MutationDeleteStockArgs = {
  filterBy?: InputMaybe<FilterContainer11895e8d40db8091>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<OrderContainer441ef63c5ca7dd1c>>;
};


export type MutationDeleteTagArgs = {
  filterBy?: InputMaybe<FilterContainer967c71ead6465215>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<OrderContainer60ec14e01e238dfe>>;
};


export type MutationUpsertAdjustedPricePolicyArgs = {
  entityExistence: EntityExistence;
  mutations?: InputMaybe<Array<AdjustedPricePolicyLocalMutationAggregate>>;
  primaryKey: Scalars['Int']['input'];
};


export type MutationUpsertBrandArgs = {
  entityExistence: EntityExistence;
  mutations?: InputMaybe<Array<BrandLocalMutationAggregate>>;
  primaryKey: Scalars['Int']['input'];
};


export type MutationUpsertCategoryArgs = {
  entityExistence: EntityExistence;
  mutations?: InputMaybe<Array<CategoryLocalMutationAggregate>>;
  primaryKey: Scalars['Int']['input'];
};


export type MutationUpsertGroupArgs = {
  entityExistence: EntityExistence;
  mutations?: InputMaybe<Array<GroupLocalMutationAggregate>>;
  primaryKey: Scalars['Int']['input'];
};


export type MutationUpsertObsoleteProductArgs = {
  entityExistence: EntityExistence;
  mutations?: InputMaybe<Array<ObsoleteProductLocalMutationAggregate>>;
  primaryKey: Scalars['Int']['input'];
};


export type MutationUpsertParameterArgs = {
  entityExistence: EntityExistence;
  mutations?: InputMaybe<Array<ParameterLocalMutationAggregate>>;
  primaryKey: Scalars['Int']['input'];
};


export type MutationUpsertParameterGroupArgs = {
  entityExistence: EntityExistence;
  mutations?: InputMaybe<Array<ParameterGroupLocalMutationAggregate>>;
  primaryKey: Scalars['Int']['input'];
};


export type MutationUpsertParameterValueArgs = {
  entityExistence: EntityExistence;
  mutations?: InputMaybe<Array<ParameterValueLocalMutationAggregate>>;
  primaryKey: Scalars['Int']['input'];
};


export type MutationUpsertPaymentMethodArgs = {
  entityExistence: EntityExistence;
  mutations?: InputMaybe<Array<PaymentMethodLocalMutationAggregate>>;
  primaryKey: Scalars['Int']['input'];
};


export type MutationUpsertPickupPointArgs = {
  entityExistence: EntityExistence;
  mutations?: InputMaybe<Array<PickupPointLocalMutationAggregate>>;
  primaryKey: Scalars['Int']['input'];
};


export type MutationUpsertPriceListArgs = {
  entityExistence: EntityExistence;
  mutations?: InputMaybe<Array<PriceListLocalMutationAggregate>>;
  primaryKey: Scalars['Int']['input'];
};


export type MutationUpsertProductArgs = {
  entityExistence: EntityExistence;
  mutations?: InputMaybe<Array<ProductLocalMutationAggregate>>;
  primaryKey: Scalars['Int']['input'];
};


export type MutationUpsertProductBundleArgs = {
  entityExistence: EntityExistence;
  mutations?: InputMaybe<Array<ProductBundleLocalMutationAggregate>>;
  primaryKey: Scalars['Int']['input'];
};


export type MutationUpsertShippingMethodArgs = {
  entityExistence: EntityExistence;
  mutations?: InputMaybe<Array<ShippingMethodLocalMutationAggregate>>;
  primaryKey: Scalars['Int']['input'];
};


export type MutationUpsertStockArgs = {
  entityExistence: EntityExistence;
  mutations?: InputMaybe<Array<StockLocalMutationAggregate>>;
  primaryKey: Scalars['Int']['input'];
};


export type MutationUpsertTagArgs = {
  entityExistence: EntityExistence;
  mutations?: InputMaybe<Array<TagLocalMutationAggregate>>;
  primaryKey: Scalars['Int']['input'];
};

/**
 * Adjusted price policy represents a custom strategy of altering prices in the cart / order. There are different
 * adjusted price policies and not all affect all users. Each user should have only a selection of price policies
 * assigned.
 */
export type NonHierarchicalAdjustedPricePolicy = Entity & {
  __typename?: 'NonHierarchicalAdjustedPricePolicy';
  /**
   * Contains set of all locales that were used for localized attributes or associated data of
   * this particular entity.
   *
   */
  allLocales: Array<CatalogLocale>;
  /**
   * Associated data carry additional data entries that are never used for filtering / sorting but may be needed to be fetched
   * along with entity in order to present data to the target consumer (i.e. user / API / bot). Associated data may be stored
   * in slower storage and may contain wide range of data types - from small ones (i.e. numbers, strings, dates) up to large
   * binary arrays representing entire files (i.e. pictures, documents).
   *
   */
  associatedData?: Maybe<AdjustedPricePolicyAssociatedData>;
  /**
   * Attributes allows defining set of data that are fetched in bulk along with the reference.
   * Attributes may be used for fast filtering or can be used to sort along.
   *
   */
  attributes?: Maybe<AdjustedPricePolicyAttributes>;
  /**
   * Contains set of requested locales for this particular entity.
   *
   */
  locales: Array<CatalogLocale>;
  /**
   * Unique Integer positive number representing the entity. Can be used for fast lookup for
   * entity (entities). Primary key must be unique within the same entity type.
   *
   */
  primaryKey: Scalars['Int']['output'];
  /**
   * Type of entity.
   * Entity type is main sharding key - all data of entities with same type are stored in separated collections. Within the
   * entity type entity is uniquely represented by primary key.
   *
   */
  type: Scalars['String']['output'];
  /**
   * Contains version of this definition object and gets increased with any entity type update. Allows to execute
   * optimistic locking i.e. avoiding parallel modifications.
   *
   */
  version: Scalars['Int']['output'];
};


/**
 * Adjusted price policy represents a custom strategy of altering prices in the cart / order. There are different
 * adjusted price policies and not all affect all users. Each user should have only a selection of price policies
 * assigned.
 */
export type NonHierarchicalAdjustedPricePolicyAssociatedDataArgs = {
  locale?: InputMaybe<CatalogLocale>;
};


/**
 * Adjusted price policy represents a custom strategy of altering prices in the cart / order. There are different
 * adjusted price policies and not all affect all users. Each user should have only a selection of price policies
 * assigned.
 */
export type NonHierarchicalAdjustedPricePolicyAttributesArgs = {
  locale?: InputMaybe<CatalogLocale>;
};

/**
 * Brand represents a manufacturer or marketing brand of the product. The product may have only one such
 * brand.
 */
export type NonHierarchicalBrand = Entity & {
  __typename?: 'NonHierarchicalBrand';
  /**
   * Contains set of all locales that were used for localized attributes or associated data of
   * this particular entity.
   *
   */
  allLocales: Array<CatalogLocale>;
  /**
   * Associated data carry additional data entries that are never used for filtering / sorting but may be needed to be fetched
   * along with entity in order to present data to the target consumer (i.e. user / API / bot). Associated data may be stored
   * in slower storage and may contain wide range of data types - from small ones (i.e. numbers, strings, dates) up to large
   * binary arrays representing entire files (i.e. pictures, documents).
   *
   */
  associatedData?: Maybe<BrandAssociatedData>;
  /**
   * Attributes allows defining set of data that are fetched in bulk along with the reference.
   * Attributes may be used for fast filtering or can be used to sort along.
   *
   */
  attributes?: Maybe<BrandAttributes>;
  /**
   * Contains set of requested locales for this particular entity.
   *
   */
  locales: Array<CatalogLocale>;
  /**
   * Unique Integer positive number representing the entity. Can be used for fast lookup for
   * entity (entities). Primary key must be unique within the same entity type.
   *
   */
  primaryKey: Scalars['Int']['output'];
  /**
   * Tags allow non-systematic categorization (cross-structure tagging) of the entities. Tags are often more
   * digestible from the user's point of view. Tags are maintained in Edee.ONE CMS and here we just link them.
   */
  tags: Array<BrandTagsReference>;
  /**
   * Type of entity.
   * Entity type is main sharding key - all data of entities with same type are stored in separated collections. Within the
   * entity type entity is uniquely represented by primary key.
   *
   */
  type: Scalars['String']['output'];
  /**
   * Contains version of this definition object and gets increased with any entity type update. Allows to execute
   * optimistic locking i.e. avoiding parallel modifications.
   *
   */
  version: Scalars['Int']['output'];
};


/**
 * Brand represents a manufacturer or marketing brand of the product. The product may have only one such
 * brand.
 */
export type NonHierarchicalBrandAssociatedDataArgs = {
  locale?: InputMaybe<CatalogLocale>;
};


/**
 * Brand represents a manufacturer or marketing brand of the product. The product may have only one such
 * brand.
 */
export type NonHierarchicalBrandAttributesArgs = {
  locale?: InputMaybe<CatalogLocale>;
};


/**
 * Brand represents a manufacturer or marketing brand of the product. The product may have only one such
 * brand.
 */
export type NonHierarchicalBrandTagsArgs = {
  filterBy?: InputMaybe<FilterContainer1f0678ef1ed202e4>;
  orderBy?: InputMaybe<Array<OrderContainer8173dcb058a60a9a>>;
};

/**
 * Category allows organizing products into a logically structured tree.
 * Single product can be part of multiple categories.
 * Category might have only single category as its parent (or none if it's root category).
 */
export type NonHierarchicalCategory = Entity & {
  __typename?: 'NonHierarchicalCategory';
  /**
   * Contains set of all locales that were used for localized attributes or associated data of
   * this particular entity.
   *
   */
  allLocales: Array<CatalogLocale>;
  /**
   * Associated data carry additional data entries that are never used for filtering / sorting but may be needed to be fetched
   * along with entity in order to present data to the target consumer (i.e. user / API / bot). Associated data may be stored
   * in slower storage and may contain wide range of data types - from small ones (i.e. numbers, strings, dates) up to large
   * binary arrays representing entire files (i.e. pictures, documents).
   *
   */
  associatedData?: Maybe<CategoryAssociatedData>;
  /**
   * Attributes allows defining set of data that are fetched in bulk along with the reference.
   * Attributes may be used for fast filtering or can be used to sort along.
   *
   */
  attributes?: Maybe<CategoryAttributes>;
  /**
   * Contains set of requested locales for this particular entity.
   *
   */
  locales: Array<CatalogLocale>;
  /**
   * Unique Integer positive number representing the entity. Can be used for fast lookup for
   * entity (entities). Primary key must be unique within the same entity type.
   *
   */
  primaryKey: Scalars['Int']['output'];
  /**
   * Contains set of product the product is related to. The type of the relation is further categorized by
   * `category` reference attribute. This reference allows interconnect products that are similar or
   * supplementary one to another.
   */
  relatedProducts: Array<CategoryRelatedProductsReference>;
  /**
   * The reference is present only for categories with attribute `categoryType` equal to `SHORTCUT` and
   * contains relation to a standard category that is being represented by this shortcut category. Client
   * is expected to extract `url` attribute of represented category and navigate user to it.
   */
  representedCategory?: Maybe<CategoryRepresentedCategoryReference>;
  /**
   * Tags allow non-systematic categorization (cross-structure tagging) of the entities. Tags are often more
   * digestible from the user's point of view. Tags are maintained in Edee.ONE CMS and here we just link them.
   */
  tags: Array<CategoryTagsReference>;
  /**
   * Type of entity.
   * Entity type is main sharding key - all data of entities with same type are stored in separated collections. Within the
   * entity type entity is uniquely represented by primary key.
   *
   */
  type: Scalars['String']['output'];
  /**
   * Contains version of this definition object and gets increased with any entity type update. Allows to execute
   * optimistic locking i.e. avoiding parallel modifications.
   *
   */
  version: Scalars['Int']['output'];
};


/**
 * Category allows organizing products into a logically structured tree.
 * Single product can be part of multiple categories.
 * Category might have only single category as its parent (or none if it's root category).
 */
export type NonHierarchicalCategoryAssociatedDataArgs = {
  locale?: InputMaybe<CatalogLocale>;
};


/**
 * Category allows organizing products into a logically structured tree.
 * Single product can be part of multiple categories.
 * Category might have only single category as its parent (or none if it's root category).
 */
export type NonHierarchicalCategoryAttributesArgs = {
  locale?: InputMaybe<CatalogLocale>;
};


/**
 * Category allows organizing products into a logically structured tree.
 * Single product can be part of multiple categories.
 * Category might have only single category as its parent (or none if it's root category).
 */
export type NonHierarchicalCategoryRelatedProductsArgs = {
  filterBy?: InputMaybe<FilterContainerbce0a3eba231c049>;
  orderBy?: InputMaybe<Array<OrderContainerd0162863fcee4fc6>>;
};


/**
 * Category allows organizing products into a logically structured tree.
 * Single product can be part of multiple categories.
 * Category might have only single category as its parent (or none if it's root category).
 */
export type NonHierarchicalCategoryRepresentedCategoryArgs = {
  filterBy?: InputMaybe<FilterContainere7ac486b7b142f94>;
  orderBy?: InputMaybe<Array<OrderContainerc48ced511efb6976>>;
};


/**
 * Category allows organizing products into a logically structured tree.
 * Single product can be part of multiple categories.
 * Category might have only single category as its parent (or none if it's root category).
 */
export type NonHierarchicalCategoryTagsArgs = {
  filterBy?: InputMaybe<FilterContainer4aed9dcb3b5a8033>;
  orderBy?: InputMaybe<Array<OrderContainerc445bae2bad3e58>>;
};

/**
 * Groups allow categorization of products outside the shared category hierarchy.
 * Single product can be part of multiple groups. Groups are not hierarchically organized, they're always flat.
 */
export type NonHierarchicalGroup = Entity & {
  __typename?: 'NonHierarchicalGroup';
  /**
   * Contains set of all locales that were used for localized attributes or associated data of
   * this particular entity.
   *
   */
  allLocales: Array<CatalogLocale>;
  /**
   * Associated data carry additional data entries that are never used for filtering / sorting but may be needed to be fetched
   * along with entity in order to present data to the target consumer (i.e. user / API / bot). Associated data may be stored
   * in slower storage and may contain wide range of data types - from small ones (i.e. numbers, strings, dates) up to large
   * binary arrays representing entire files (i.e. pictures, documents).
   *
   */
  associatedData?: Maybe<GroupAssociatedData>;
  /**
   * Attributes allows defining set of data that are fetched in bulk along with the reference.
   * Attributes may be used for fast filtering or can be used to sort along.
   *
   */
  attributes?: Maybe<GroupAttributes>;
  /**
   * Contains set of requested locales for this particular entity.
   *
   */
  locales: Array<CatalogLocale>;
  /**
   * Unique Integer positive number representing the entity. Can be used for fast lookup for
   * entity (entities). Primary key must be unique within the same entity type.
   *
   */
  primaryKey: Scalars['Int']['output'];
  /**
   * Tags allow non-systematic categorization (cross-structure tagging) of the entities. Tags are often more
   * digestible from the user's point of view. Tags are maintained in Edee.ONE CMS and here we just link them.
   */
  tags: Array<GroupTagsReference>;
  /**
   * Type of entity.
   * Entity type is main sharding key - all data of entities with same type are stored in separated collections. Within the
   * entity type entity is uniquely represented by primary key.
   *
   */
  type: Scalars['String']['output'];
  /**
   * Contains version of this definition object and gets increased with any entity type update. Allows to execute
   * optimistic locking i.e. avoiding parallel modifications.
   *
   */
  version: Scalars['Int']['output'];
};


/**
 * Groups allow categorization of products outside the shared category hierarchy.
 * Single product can be part of multiple groups. Groups are not hierarchically organized, they're always flat.
 */
export type NonHierarchicalGroupAssociatedDataArgs = {
  locale?: InputMaybe<CatalogLocale>;
};


/**
 * Groups allow categorization of products outside the shared category hierarchy.
 * Single product can be part of multiple groups. Groups are not hierarchically organized, they're always flat.
 */
export type NonHierarchicalGroupAttributesArgs = {
  locale?: InputMaybe<CatalogLocale>;
};


/**
 * Groups allow categorization of products outside the shared category hierarchy.
 * Single product can be part of multiple groups. Groups are not hierarchically organized, they're always flat.
 */
export type NonHierarchicalGroupTagsArgs = {
  filterBy?: InputMaybe<FilterContainera8a85d9a060ac1e6>;
  orderBy?: InputMaybe<Array<OrderContaineraea31df67abb5839>>;
};

/**
 * Product represents an article that can be displayed and sold on e-shop. Product come in different flavours - complex
 * master / variant products, simple basic products or composed product sets. Product can be organized in categories,
 * groups. Product can relate to other products or brands. Product have prices.
 */
export type NonHierarchicalObsoleteProduct = Entity & {
  __typename?: 'NonHierarchicalObsoleteProduct';
  /**
   * Contains set of all locales that were used for localized attributes or associated data of
   * this particular entity.
   *
   */
  allLocales: Array<CatalogLocale>;
  /**
   * Associated data carry additional data entries that are never used for filtering / sorting but may be needed to be fetched
   * along with entity in order to present data to the target consumer (i.e. user / API / bot). Associated data may be stored
   * in slower storage and may contain wide range of data types - from small ones (i.e. numbers, strings, dates) up to large
   * binary arrays representing entire files (i.e. pictures, documents).
   *
   */
  associatedData?: Maybe<ObsoleteProductAssociatedData>;
  /**
   * Attributes allows defining set of data that are fetched in bulk along with the reference.
   * Attributes may be used for fast filtering or can be used to sort along.
   *
   */
  attributes?: Maybe<ObsoleteProductAttributes>;
  /**
   * Contains reference to the product brand. Brand represents a manufacturer or marketing brand of the product.
   * The product may have only one such brand.
   */
  brand?: Maybe<ObsoleteProductBrandReference>;
  /** List of bonus bundles that can be obtained by purchasing this product. */
  bundles: Array<ObsoleteProductBundlesReference>;
  /**
   * Contains set of categories the product is assigned to. Typically, there is exactly one assignment, but
   * product can be assigned to multiple ones.
   */
  categories: Array<ObsoleteProductCategoriesReference>;
  /**
   * Contains set of groups the product is assigned to. Groups allow categorization of products outside
   * the shared category hierarchy.
   */
  groups: Array<ObsoleteProductGroupsReference>;
  /**
   * Contains set of requested locales for this particular entity.
   *
   */
  locales: Array<CatalogLocale>;
  /**
   * Contains reference to the master product. The reference is always NULL except for products of type VARIANT.
   * These products have always the reference to their master product. Master product is usually displayed
   * in listings instead of the variants to avoid cluttering the listing with similar products.
   */
  master?: Maybe<ObsoleteProductMasterReference>;
  /**
   * Contains reference to all parameter values that has been assigned to the product.
   * Parameter value is a specific "property" of the product that can be used for differentiating products
   * in a comprehensible way. An example of parameter value might be a material - aluminium, plastic,
   * or ports - USB, HDMI or whatever you can think of.
   * Single parameter value can be assigned to multiple products.
   */
  parameterValues: Array<ObsoleteProductParameterValuesReference>;
  /**
   * Single price corresponding to defined arguments picked up from set of all `prices`.
   * If more than one price is found, the valid one is picked. Validity is check based on query, if desired
   * validity is not specified in query, current time is used.
   *
   */
  price?: Maybe<Price>;
  /**
   * Price for which the entity should be sold. This method can be used only when appropriate
   * price related constraints are present so that `currency` and `priceList` priority can be extracted from the query.
   * The moment is either extracted from the query as well (if present) or current date and time is used.
   *
   */
  priceForSale?: Maybe<Price>;
  /**
   * Price inner record handling controls how prices that share same `inner entity id` will behave during filtering and sorting.
   *
   */
  priceInnerRecordHandling: PriceInnerRecordHandling;
  /**
   * Prices allows defining set of prices of entity for complex filtering and ordering.
   *
   */
  prices: Array<Price>;
  /**
   * Unique Integer positive number representing the entity. Can be used for fast lookup for
   * entity (entities). Primary key must be unique within the same entity type.
   *
   */
  primaryKey: Scalars['Int']['output'];
  /** Contains reference to all set products this product set consists of. */
  productSetItems: Array<ObsoleteProductProductSetItemsReference>;
  /**
   * Contains set of product the product is related to. The type of the relation is further categorized by
   * `category` reference attribute. This reference allows interconnect products that are similar or
   * supplementary one to another.
   */
  relatedProducts: Array<ObsoleteProductRelatedProductsReference>;
  /**
   * It contains references to all stocks for which the product is visible (because the visibility of the product depends on the stock quantity).
   * The product is then visible to the customer according to the stock they have access to.
   */
  stockVisibilities: Array<ObsoleteProductStockVisibilitiesReference>;
  /**
   * Tags allow non-systematic categorization (cross-structure tagging) of the entities. Tags are often more
   * digestible from the user's point of view. Tags are maintained in Edee.ONE CMS and here we just link them.
   */
  tags: Array<ObsoleteProductTagsReference>;
  /**
   * Type of entity.
   * Entity type is main sharding key - all data of entities with same type are stored in separated collections. Within the
   * entity type entity is uniquely represented by primary key.
   *
   */
  type: Scalars['String']['output'];
  /**
   * Property is present only in products of MASTER subtype - e.g. master products.
   * Contains list of all parameters that distinguish variants of this particular master product.
   */
  variantParameters: Array<ObsoleteProductVariantParametersReference>;
  /**
   * Contains version of this definition object and gets increased with any entity type update. Allows to execute
   * optimistic locking i.e. avoiding parallel modifications.
   *
   */
  version: Scalars['Int']['output'];
};


/**
 * Product represents an article that can be displayed and sold on e-shop. Product come in different flavours - complex
 * master / variant products, simple basic products or composed product sets. Product can be organized in categories,
 * groups. Product can relate to other products or brands. Product have prices.
 */
export type NonHierarchicalObsoleteProductAssociatedDataArgs = {
  locale?: InputMaybe<CatalogLocale>;
};


/**
 * Product represents an article that can be displayed and sold on e-shop. Product come in different flavours - complex
 * master / variant products, simple basic products or composed product sets. Product can be organized in categories,
 * groups. Product can relate to other products or brands. Product have prices.
 */
export type NonHierarchicalObsoleteProductAttributesArgs = {
  locale?: InputMaybe<CatalogLocale>;
};


/**
 * Product represents an article that can be displayed and sold on e-shop. Product come in different flavours - complex
 * master / variant products, simple basic products or composed product sets. Product can be organized in categories,
 * groups. Product can relate to other products or brands. Product have prices.
 */
export type NonHierarchicalObsoleteProductBrandArgs = {
  filterBy?: InputMaybe<FilterContainerc89c1a6e13324cd>;
  orderBy?: InputMaybe<Array<OrderContainer3545256dd210499b>>;
};


/**
 * Product represents an article that can be displayed and sold on e-shop. Product come in different flavours - complex
 * master / variant products, simple basic products or composed product sets. Product can be organized in categories,
 * groups. Product can relate to other products or brands. Product have prices.
 */
export type NonHierarchicalObsoleteProductBundlesArgs = {
  filterBy?: InputMaybe<FilterContainer218d07b1e68074c9>;
  orderBy?: InputMaybe<Array<OrderContainer4c886036c02c0f05>>;
};


/**
 * Product represents an article that can be displayed and sold on e-shop. Product come in different flavours - complex
 * master / variant products, simple basic products or composed product sets. Product can be organized in categories,
 * groups. Product can relate to other products or brands. Product have prices.
 */
export type NonHierarchicalObsoleteProductCategoriesArgs = {
  filterBy?: InputMaybe<FilterContainer86dfabccfd23aa32>;
  orderBy?: InputMaybe<Array<OrderContainer7712728df4562538>>;
};


/**
 * Product represents an article that can be displayed and sold on e-shop. Product come in different flavours - complex
 * master / variant products, simple basic products or composed product sets. Product can be organized in categories,
 * groups. Product can relate to other products or brands. Product have prices.
 */
export type NonHierarchicalObsoleteProductGroupsArgs = {
  filterBy?: InputMaybe<FilterContainer3e99187591f187d1>;
  orderBy?: InputMaybe<Array<OrderContainera56923d3758ae7cd>>;
};


/**
 * Product represents an article that can be displayed and sold on e-shop. Product come in different flavours - complex
 * master / variant products, simple basic products or composed product sets. Product can be organized in categories,
 * groups. Product can relate to other products or brands. Product have prices.
 */
export type NonHierarchicalObsoleteProductMasterArgs = {
  filterBy?: InputMaybe<FilterContainer25ca64b5a7fd295d>;
  orderBy?: InputMaybe<Array<OrderContainer7cfc8f23b1dd770>>;
};


/**
 * Product represents an article that can be displayed and sold on e-shop. Product come in different flavours - complex
 * master / variant products, simple basic products or composed product sets. Product can be organized in categories,
 * groups. Product can relate to other products or brands. Product have prices.
 */
export type NonHierarchicalObsoleteProductParameterValuesArgs = {
  filterBy?: InputMaybe<FilterContainer155ce1a8713f11f>;
  orderBy?: InputMaybe<Array<OrderContainerdb7d7f11b340bf77>>;
};


/**
 * Product represents an article that can be displayed and sold on e-shop. Product come in different flavours - complex
 * master / variant products, simple basic products or composed product sets. Product can be organized in categories,
 * groups. Product can relate to other products or brands. Product have prices.
 */
export type NonHierarchicalObsoleteProductPriceArgs = {
  currency?: InputMaybe<CatalogCurrency>;
  locale?: InputMaybe<CatalogLocale>;
  priceList: Scalars['String']['input'];
};


/**
 * Product represents an article that can be displayed and sold on e-shop. Product come in different flavours - complex
 * master / variant products, simple basic products or composed product sets. Product can be organized in categories,
 * groups. Product can relate to other products or brands. Product have prices.
 */
export type NonHierarchicalObsoleteProductPriceForSaleArgs = {
  currency?: InputMaybe<CatalogCurrency>;
  locale?: InputMaybe<CatalogLocale>;
  priceList?: InputMaybe<Scalars['String']['input']>;
  validIn?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  validNow?: InputMaybe<Scalars['Boolean']['input']>;
};


/**
 * Product represents an article that can be displayed and sold on e-shop. Product come in different flavours - complex
 * master / variant products, simple basic products or composed product sets. Product can be organized in categories,
 * groups. Product can relate to other products or brands. Product have prices.
 */
export type NonHierarchicalObsoleteProductPricesArgs = {
  currency?: InputMaybe<CatalogCurrency>;
  locale?: InputMaybe<CatalogLocale>;
  priceLists?: InputMaybe<Array<Scalars['String']['input']>>;
};


/**
 * Product represents an article that can be displayed and sold on e-shop. Product come in different flavours - complex
 * master / variant products, simple basic products or composed product sets. Product can be organized in categories,
 * groups. Product can relate to other products or brands. Product have prices.
 */
export type NonHierarchicalObsoleteProductProductSetItemsArgs = {
  filterBy?: InputMaybe<FilterContainerdc998e10009e5e68>;
  orderBy?: InputMaybe<Array<OrderContainer5bd124d4214589b2>>;
};


/**
 * Product represents an article that can be displayed and sold on e-shop. Product come in different flavours - complex
 * master / variant products, simple basic products or composed product sets. Product can be organized in categories,
 * groups. Product can relate to other products or brands. Product have prices.
 */
export type NonHierarchicalObsoleteProductRelatedProductsArgs = {
  filterBy?: InputMaybe<FilterContainer464975cef7a99c2c>;
  orderBy?: InputMaybe<Array<OrderContainer21bc50d34c2809bd>>;
};


/**
 * Product represents an article that can be displayed and sold on e-shop. Product come in different flavours - complex
 * master / variant products, simple basic products or composed product sets. Product can be organized in categories,
 * groups. Product can relate to other products or brands. Product have prices.
 */
export type NonHierarchicalObsoleteProductStockVisibilitiesArgs = {
  filterBy?: InputMaybe<FilterContainer60712c1bd118553d>;
  orderBy?: InputMaybe<Array<OrderContainerc9679cdc80b33b45>>;
};


/**
 * Product represents an article that can be displayed and sold on e-shop. Product come in different flavours - complex
 * master / variant products, simple basic products or composed product sets. Product can be organized in categories,
 * groups. Product can relate to other products or brands. Product have prices.
 */
export type NonHierarchicalObsoleteProductTagsArgs = {
  filterBy?: InputMaybe<FilterContainerf111a7119fe869f8>;
  orderBy?: InputMaybe<Array<OrderContainer8529c4502d048485>>;
};


/**
 * Product represents an article that can be displayed and sold on e-shop. Product come in different flavours - complex
 * master / variant products, simple basic products or composed product sets. Product can be organized in categories,
 * groups. Product can relate to other products or brands. Product have prices.
 */
export type NonHierarchicalObsoleteProductVariantParametersArgs = {
  filterBy?: InputMaybe<FilterContainere0382ac2d2e8abf2>;
  orderBy?: InputMaybe<Array<OrderContainerc7bd19275a1d3cc6>>;
};

/**
 * Parameter is a set of parameter values that represents the same "property". An example might be a different
 * colors, different sizes, different weights, different packaging and so on.
 * Parameters are not assigned to products - only their exact parameter values. Parameters only group those values
 * together in logical fashion.
 */
export type NonHierarchicalParameter = Entity & {
  __typename?: 'NonHierarchicalParameter';
  /**
   * Contains set of all locales that were used for localized attributes or associated data of
   * this particular entity.
   *
   */
  allLocales: Array<CatalogLocale>;
  /**
   * Associated data carry additional data entries that are never used for filtering / sorting but may be needed to be fetched
   * along with entity in order to present data to the target consumer (i.e. user / API / bot). Associated data may be stored
   * in slower storage and may contain wide range of data types - from small ones (i.e. numbers, strings, dates) up to large
   * binary arrays representing entire files (i.e. pictures, documents).
   *
   */
  associatedData?: Maybe<ParameterAssociatedData>;
  /**
   * Attributes allows defining set of data that are fetched in bulk along with the reference.
   * Attributes may be used for fast filtering or can be used to sort along.
   *
   */
  attributes?: Maybe<ParameterAttributes>;
  /**
   * Contains set of requested locales for this particular entity.
   *
   */
  locales: Array<CatalogLocale>;
  /**
   * Contains references to parameter groups that allow grouping parameters into logical blocks on product
   * detail page.
   */
  parameterGroups: Array<ParameterParameterGroupsReference>;
  /**
   * Unique Integer positive number representing the entity. Can be used for fast lookup for
   * entity (entities). Primary key must be unique within the same entity type.
   *
   */
  primaryKey: Scalars['Int']['output'];
  /**
   * Type of entity.
   * Entity type is main sharding key - all data of entities with same type are stored in separated collections. Within the
   * entity type entity is uniquely represented by primary key.
   *
   */
  type: Scalars['String']['output'];
  /**
   * Contains version of this definition object and gets increased with any entity type update. Allows to execute
   * optimistic locking i.e. avoiding parallel modifications.
   *
   */
  version: Scalars['Int']['output'];
};


/**
 * Parameter is a set of parameter values that represents the same "property". An example might be a different
 * colors, different sizes, different weights, different packaging and so on.
 * Parameters are not assigned to products - only their exact parameter values. Parameters only group those values
 * together in logical fashion.
 */
export type NonHierarchicalParameterAssociatedDataArgs = {
  locale?: InputMaybe<CatalogLocale>;
};


/**
 * Parameter is a set of parameter values that represents the same "property". An example might be a different
 * colors, different sizes, different weights, different packaging and so on.
 * Parameters are not assigned to products - only their exact parameter values. Parameters only group those values
 * together in logical fashion.
 */
export type NonHierarchicalParameterAttributesArgs = {
  locale?: InputMaybe<CatalogLocale>;
};


/**
 * Parameter is a set of parameter values that represents the same "property". An example might be a different
 * colors, different sizes, different weights, different packaging and so on.
 * Parameters are not assigned to products - only their exact parameter values. Parameters only group those values
 * together in logical fashion.
 */
export type NonHierarchicalParameterParameterGroupsArgs = {
  filterBy?: InputMaybe<FilterContainerdada3d3e768d055c>;
  orderBy?: InputMaybe<Array<OrderContainercc58d2a51136e64a>>;
};

/**
 * Parameter group allows grouping multiple product parameter into one logical block. The group has no other
 * purpose except this one.
 */
export type NonHierarchicalParameterGroup = Entity & {
  __typename?: 'NonHierarchicalParameterGroup';
  /**
   * Contains set of all locales that were used for localized attributes or associated data of
   * this particular entity.
   *
   */
  allLocales: Array<CatalogLocale>;
  /**
   * Associated data carry additional data entries that are never used for filtering / sorting but may be needed to be fetched
   * along with entity in order to present data to the target consumer (i.e. user / API / bot). Associated data may be stored
   * in slower storage and may contain wide range of data types - from small ones (i.e. numbers, strings, dates) up to large
   * binary arrays representing entire files (i.e. pictures, documents).
   *
   */
  associatedData?: Maybe<ParameterGroupAssociatedData>;
  /**
   * Attributes allows defining set of data that are fetched in bulk along with the reference.
   * Attributes may be used for fast filtering or can be used to sort along.
   *
   */
  attributes?: Maybe<ParameterGroupAttributes>;
  /**
   * Contains set of requested locales for this particular entity.
   *
   */
  locales: Array<CatalogLocale>;
  /**
   * Unique Integer positive number representing the entity. Can be used for fast lookup for
   * entity (entities). Primary key must be unique within the same entity type.
   *
   */
  primaryKey: Scalars['Int']['output'];
  /**
   * Type of entity.
   * Entity type is main sharding key - all data of entities with same type are stored in separated collections. Within the
   * entity type entity is uniquely represented by primary key.
   *
   */
  type: Scalars['String']['output'];
  /**
   * Contains version of this definition object and gets increased with any entity type update. Allows to execute
   * optimistic locking i.e. avoiding parallel modifications.
   *
   */
  version: Scalars['Int']['output'];
};


/**
 * Parameter group allows grouping multiple product parameter into one logical block. The group has no other
 * purpose except this one.
 */
export type NonHierarchicalParameterGroupAssociatedDataArgs = {
  locale?: InputMaybe<CatalogLocale>;
};


/**
 * Parameter group allows grouping multiple product parameter into one logical block. The group has no other
 * purpose except this one.
 */
export type NonHierarchicalParameterGroupAttributesArgs = {
  locale?: InputMaybe<CatalogLocale>;
};

/**
 * Parameter value is a specific "property" of the product that can be used for differentiating products
 * in a comprehensible way. An example of parameter value might be a specific size - XXL, or color - blue,
 * or packaging - paperback.
 * Single parameter value can be assigned to multiple products. Parameter value can be part of only one parameter.
 */
export type NonHierarchicalParameterValue = Entity & {
  __typename?: 'NonHierarchicalParameterValue';
  /**
   * Contains set of all locales that were used for localized attributes or associated data of
   * this particular entity.
   *
   */
  allLocales: Array<CatalogLocale>;
  /**
   * Associated data carry additional data entries that are never used for filtering / sorting but may be needed to be fetched
   * along with entity in order to present data to the target consumer (i.e. user / API / bot). Associated data may be stored
   * in slower storage and may contain wide range of data types - from small ones (i.e. numbers, strings, dates) up to large
   * binary arrays representing entire files (i.e. pictures, documents).
   *
   */
  associatedData?: Maybe<ParameterValueAssociatedData>;
  /**
   * Attributes allows defining set of data that are fetched in bulk along with the reference.
   * Attributes may be used for fast filtering or can be used to sort along.
   *
   */
  attributes?: Maybe<ParameterValueAttributes>;
  /**
   * Contains set of requested locales for this particular entity.
   *
   */
  locales: Array<CatalogLocale>;
  /**
   * Contains data about parameter this value relates to. The relation contains also a vital information about
   * the order of the parameter value inside the type.
   */
  parameter?: Maybe<ParameterValueParameterReference>;
  /**
   * Unique Integer positive number representing the entity. Can be used for fast lookup for
   * entity (entities). Primary key must be unique within the same entity type.
   *
   */
  primaryKey: Scalars['Int']['output'];
  /**
   * Contains data about synthetic parameter (if set) this value relates to. The relation contains also vital
   * information about the order of the parameter value inside the type. Synthetic parameter is a parameter
   * that groups multiple parameters together to form a unified one.
   */
  syntheticParameter?: Maybe<ParameterValueSyntheticParameterReference>;
  /**
   * Type of entity.
   * Entity type is main sharding key - all data of entities with same type are stored in separated collections. Within the
   * entity type entity is uniquely represented by primary key.
   *
   */
  type: Scalars['String']['output'];
  /**
   * Contains version of this definition object and gets increased with any entity type update. Allows to execute
   * optimistic locking i.e. avoiding parallel modifications.
   *
   */
  version: Scalars['Int']['output'];
};


/**
 * Parameter value is a specific "property" of the product that can be used for differentiating products
 * in a comprehensible way. An example of parameter value might be a specific size - XXL, or color - blue,
 * or packaging - paperback.
 * Single parameter value can be assigned to multiple products. Parameter value can be part of only one parameter.
 */
export type NonHierarchicalParameterValueAssociatedDataArgs = {
  locale?: InputMaybe<CatalogLocale>;
};


/**
 * Parameter value is a specific "property" of the product that can be used for differentiating products
 * in a comprehensible way. An example of parameter value might be a specific size - XXL, or color - blue,
 * or packaging - paperback.
 * Single parameter value can be assigned to multiple products. Parameter value can be part of only one parameter.
 */
export type NonHierarchicalParameterValueAttributesArgs = {
  locale?: InputMaybe<CatalogLocale>;
};


/**
 * Parameter value is a specific "property" of the product that can be used for differentiating products
 * in a comprehensible way. An example of parameter value might be a specific size - XXL, or color - blue,
 * or packaging - paperback.
 * Single parameter value can be assigned to multiple products. Parameter value can be part of only one parameter.
 */
export type NonHierarchicalParameterValueParameterArgs = {
  filterBy?: InputMaybe<FilterContaineraf11c41d5e9f5526>;
  orderBy?: InputMaybe<Array<OrderContainerf2012395f0e8eb6c>>;
};


/**
 * Parameter value is a specific "property" of the product that can be used for differentiating products
 * in a comprehensible way. An example of parameter value might be a specific size - XXL, or color - blue,
 * or packaging - paperback.
 * Single parameter value can be assigned to multiple products. Parameter value can be part of only one parameter.
 */
export type NonHierarchicalParameterValueSyntheticParameterArgs = {
  filterBy?: InputMaybe<FilterContainerde14524bdc4e7315>;
  orderBy?: InputMaybe<Array<OrderContainer948579655a8280e9>>;
};

/** Payment method describes a form of payment procedure that can be selected to pay for the goods by the customer. */
export type NonHierarchicalPaymentMethod = Entity & {
  __typename?: 'NonHierarchicalPaymentMethod';
  /**
   * Contains set of all locales that were used for localized attributes or associated data of
   * this particular entity.
   *
   */
  allLocales: Array<CatalogLocale>;
  /**
   * Associated data carry additional data entries that are never used for filtering / sorting but may be needed to be fetched
   * along with entity in order to present data to the target consumer (i.e. user / API / bot). Associated data may be stored
   * in slower storage and may contain wide range of data types - from small ones (i.e. numbers, strings, dates) up to large
   * binary arrays representing entire files (i.e. pictures, documents).
   *
   */
  associatedData?: Maybe<PaymentMethodAssociatedData>;
  /**
   * Attributes allows defining set of data that are fetched in bulk along with the reference.
   * Attributes may be used for fast filtering or can be used to sort along.
   *
   */
  attributes?: Maybe<PaymentMethodAttributes>;
  /**
   * Contains set of requested locales for this particular entity.
   *
   */
  locales: Array<CatalogLocale>;
  /**
   * Single price corresponding to defined arguments picked up from set of all `prices`.
   * If more than one price is found, the valid one is picked. Validity is check based on query, if desired
   * validity is not specified in query, current time is used.
   *
   */
  price?: Maybe<Price>;
  /**
   * Price for which the entity should be sold. This method can be used only when appropriate
   * price related constraints are present so that `currency` and `priceList` priority can be extracted from the query.
   * The moment is either extracted from the query as well (if present) or current date and time is used.
   *
   */
  priceForSale?: Maybe<Price>;
  /**
   * Price inner record handling controls how prices that share same `inner entity id` will behave during filtering and sorting.
   *
   */
  priceInnerRecordHandling: PriceInnerRecordHandling;
  /**
   * Prices allows defining set of prices of entity for complex filtering and ordering.
   *
   */
  prices: Array<Price>;
  /**
   * Unique Integer positive number representing the entity. Can be used for fast lookup for
   * entity (entities). Primary key must be unique within the same entity type.
   *
   */
  primaryKey: Scalars['Int']['output'];
  /** Set of shippings methods that limits the offer of this payment methods when this shipping method is selected. */
  restrictedShippingMethods: Array<PaymentMethodRestrictedShippingMethodsReference>;
  /**
   * Type of entity.
   * Entity type is main sharding key - all data of entities with same type are stored in separated collections. Within the
   * entity type entity is uniquely represented by primary key.
   *
   */
  type: Scalars['String']['output'];
  /**
   * Contains version of this definition object and gets increased with any entity type update. Allows to execute
   * optimistic locking i.e. avoiding parallel modifications.
   *
   */
  version: Scalars['Int']['output'];
};


/** Payment method describes a form of payment procedure that can be selected to pay for the goods by the customer. */
export type NonHierarchicalPaymentMethodAssociatedDataArgs = {
  locale?: InputMaybe<CatalogLocale>;
};


/** Payment method describes a form of payment procedure that can be selected to pay for the goods by the customer. */
export type NonHierarchicalPaymentMethodAttributesArgs = {
  locale?: InputMaybe<CatalogLocale>;
};


/** Payment method describes a form of payment procedure that can be selected to pay for the goods by the customer. */
export type NonHierarchicalPaymentMethodPriceArgs = {
  currency?: InputMaybe<CatalogCurrency>;
  locale?: InputMaybe<CatalogLocale>;
  priceList: Scalars['String']['input'];
};


/** Payment method describes a form of payment procedure that can be selected to pay for the goods by the customer. */
export type NonHierarchicalPaymentMethodPriceForSaleArgs = {
  currency?: InputMaybe<CatalogCurrency>;
  locale?: InputMaybe<CatalogLocale>;
  priceList?: InputMaybe<Scalars['String']['input']>;
  validIn?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  validNow?: InputMaybe<Scalars['Boolean']['input']>;
};


/** Payment method describes a form of payment procedure that can be selected to pay for the goods by the customer. */
export type NonHierarchicalPaymentMethodPricesArgs = {
  currency?: InputMaybe<CatalogCurrency>;
  locale?: InputMaybe<CatalogLocale>;
  priceLists?: InputMaybe<Array<Scalars['String']['input']>>;
};


/** Payment method describes a form of payment procedure that can be selected to pay for the goods by the customer. */
export type NonHierarchicalPaymentMethodRestrictedShippingMethodsArgs = {
  filterBy?: InputMaybe<FilterContainer114b400452e41fc1>;
  orderBy?: InputMaybe<Array<OrderContainer2e85f5ede7aaa97>>;
};

/**
 * Pick-up point represents a physical place where the customer can pick up the goods in the order. Pick up points
 * for all shipping methods are available through this entity.
 */
export type NonHierarchicalPickupPoint = Entity & {
  __typename?: 'NonHierarchicalPickupPoint';
  /**
   * Contains set of all locales that were used for localized attributes or associated data of
   * this particular entity.
   *
   */
  allLocales: Array<CatalogLocale>;
  /**
   * Associated data carry additional data entries that are never used for filtering / sorting but may be needed to be fetched
   * along with entity in order to present data to the target consumer (i.e. user / API / bot). Associated data may be stored
   * in slower storage and may contain wide range of data types - from small ones (i.e. numbers, strings, dates) up to large
   * binary arrays representing entire files (i.e. pictures, documents).
   *
   */
  associatedData?: Maybe<PickupPointAssociatedData>;
  /**
   * Attributes allows defining set of data that are fetched in bulk along with the reference.
   * Attributes may be used for fast filtering or can be used to sort along.
   *
   */
  attributes?: Maybe<PickupPointAttributes>;
  /**
   * Contains set of requested locales for this particular entity.
   *
   */
  locales: Array<CatalogLocale>;
  /**
   * Unique Integer positive number representing the entity. Can be used for fast lookup for
   * entity (entities). Primary key must be unique within the same entity type.
   *
   */
  primaryKey: Scalars['Int']['output'];
  /**
   * The reference to the shipping method the pickup point relates to.
   * The reference is only for the shipping type `PERSONAL_PICKUP_BRANCH`.
   */
  shippingMethod?: Maybe<PickupPointShippingMethodReference>;
  /**
   * Type of entity.
   * Entity type is main sharding key - all data of entities with same type are stored in separated collections. Within the
   * entity type entity is uniquely represented by primary key.
   *
   */
  type: Scalars['String']['output'];
  /**
   * Contains version of this definition object and gets increased with any entity type update. Allows to execute
   * optimistic locking i.e. avoiding parallel modifications.
   *
   */
  version: Scalars['Int']['output'];
};


/**
 * Pick-up point represents a physical place where the customer can pick up the goods in the order. Pick up points
 * for all shipping methods are available through this entity.
 */
export type NonHierarchicalPickupPointAssociatedDataArgs = {
  locale?: InputMaybe<CatalogLocale>;
};


/**
 * Pick-up point represents a physical place where the customer can pick up the goods in the order. Pick up points
 * for all shipping methods are available through this entity.
 */
export type NonHierarchicalPickupPointAttributesArgs = {
  locale?: InputMaybe<CatalogLocale>;
};


/**
 * Pick-up point represents a physical place where the customer can pick up the goods in the order. Pick up points
 * for all shipping methods are available through this entity.
 */
export type NonHierarchicalPickupPointShippingMethodArgs = {
  filterBy?: InputMaybe<FilterContainer757b56df09748967>;
  orderBy?: InputMaybe<Array<OrderContainer3fb06b7b13473bcc>>;
};

/**
 * Price list allows to consolidate prices that share common purpose. Price lists allow to compute the selling
 * price for products, payment and shipping methods and all other entities that work with prices.
 */
export type NonHierarchicalPriceList = Entity & {
  __typename?: 'NonHierarchicalPriceList';
  /**
   * Contains set of all locales that were used for localized attributes or associated data of
   * this particular entity.
   *
   */
  allLocales: Array<CatalogLocale>;
  /**
   * Associated data carry additional data entries that are never used for filtering / sorting but may be needed to be fetched
   * along with entity in order to present data to the target consumer (i.e. user / API / bot). Associated data may be stored
   * in slower storage and may contain wide range of data types - from small ones (i.e. numbers, strings, dates) up to large
   * binary arrays representing entire files (i.e. pictures, documents).
   *
   */
  associatedData?: Maybe<PriceListAssociatedData>;
  /**
   * Attributes allows defining set of data that are fetched in bulk along with the reference.
   * Attributes may be used for fast filtering or can be used to sort along.
   *
   */
  attributes?: Maybe<PriceListAttributes>;
  /**
   * Contains set of requested locales for this particular entity.
   *
   */
  locales: Array<CatalogLocale>;
  /**
   * Unique Integer positive number representing the entity. Can be used for fast lookup for
   * entity (entities). Primary key must be unique within the same entity type.
   *
   */
  primaryKey: Scalars['Int']['output'];
  /**
   * Type of entity.
   * Entity type is main sharding key - all data of entities with same type are stored in separated collections. Within the
   * entity type entity is uniquely represented by primary key.
   *
   */
  type: Scalars['String']['output'];
  /**
   * Contains version of this definition object and gets increased with any entity type update. Allows to execute
   * optimistic locking i.e. avoiding parallel modifications.
   *
   */
  version: Scalars['Int']['output'];
};


/**
 * Price list allows to consolidate prices that share common purpose. Price lists allow to compute the selling
 * price for products, payment and shipping methods and all other entities that work with prices.
 */
export type NonHierarchicalPriceListAssociatedDataArgs = {
  locale?: InputMaybe<CatalogLocale>;
};


/**
 * Price list allows to consolidate prices that share common purpose. Price lists allow to compute the selling
 * price for products, payment and shipping methods and all other entities that work with prices.
 */
export type NonHierarchicalPriceListAttributesArgs = {
  locale?: InputMaybe<CatalogLocale>;
};

/**
 * Product represents an article that can be displayed and sold on e-shop. Product come in different flavours - complex
 * master / variant products, simple basic products or composed product sets. Product can be organized in categories,
 * groups. Product can relate to other products or brands. Product have prices.
 */
export type NonHierarchicalProduct = Entity & {
  __typename?: 'NonHierarchicalProduct';
  /**
   * Contains set of all locales that were used for localized attributes or associated data of
   * this particular entity.
   *
   */
  allLocales: Array<CatalogLocale>;
  /**
   * Associated data carry additional data entries that are never used for filtering / sorting but may be needed to be fetched
   * along with entity in order to present data to the target consumer (i.e. user / API / bot). Associated data may be stored
   * in slower storage and may contain wide range of data types - from small ones (i.e. numbers, strings, dates) up to large
   * binary arrays representing entire files (i.e. pictures, documents).
   *
   */
  associatedData?: Maybe<ProductAssociatedData>;
  /**
   * Attributes allows defining set of data that are fetched in bulk along with the reference.
   * Attributes may be used for fast filtering or can be used to sort along.
   *
   */
  attributes?: Maybe<ProductAttributes>;
  /**
   * Contains reference to the product brand. Brand represents a manufacturer or marketing brand of the product.
   * The product may have only one such brand.
   */
  brand?: Maybe<ProductBrandReference>;
  /** List of bonus bundles that can be obtained by purchasing this product. */
  bundles: Array<ProductBundlesReference>;
  /**
   * Contains set of categories the product is assigned to. Typically, there is exactly one assignment, but
   * product can be assigned to multiple ones.
   */
  categories: Array<ProductCategoriesReference>;
  /**
   * Contains set of groups the product is assigned to. Groups allow categorization of products outside
   * the shared category hierarchy.
   */
  groups: Array<ProductGroupsReference>;
  /**
   * Contains set of requested locales for this particular entity.
   *
   */
  locales: Array<CatalogLocale>;
  /**
   * Contains reference to the master product. The reference is always NULL except for products of type VARIANT.
   * These products have always the reference to their master product. Master product is usually displayed
   * in listings instead of the variants to avoid cluttering the listing with similar products.
   */
  master?: Maybe<ProductMasterReference>;
  /**
   * Contains reference to all parameter values that has been assigned to the product.
   * Parameter value is a specific "property" of the product that can be used for differentiating products
   * in a comprehensible way. An example of parameter value might be a material - aluminium, plastic,
   * or ports - USB, HDMI or whatever you can think of.
   * Single parameter value can be assigned to multiple products.
   */
  parameterValues: Array<ProductParameterValuesReference>;
  /**
   * Single price corresponding to defined arguments picked up from set of all `prices`.
   * If more than one price is found, the valid one is picked. Validity is check based on query, if desired
   * validity is not specified in query, current time is used.
   *
   */
  price?: Maybe<Price>;
  /**
   * Price for which the entity should be sold. This method can be used only when appropriate
   * price related constraints are present so that `currency` and `priceList` priority can be extracted from the query.
   * The moment is either extracted from the query as well (if present) or current date and time is used.
   *
   */
  priceForSale?: Maybe<Price>;
  /**
   * Price inner record handling controls how prices that share same `inner entity id` will behave during filtering and sorting.
   *
   */
  priceInnerRecordHandling: PriceInnerRecordHandling;
  /**
   * Prices allows defining set of prices of entity for complex filtering and ordering.
   *
   */
  prices: Array<Price>;
  /**
   * Unique Integer positive number representing the entity. Can be used for fast lookup for
   * entity (entities). Primary key must be unique within the same entity type.
   *
   */
  primaryKey: Scalars['Int']['output'];
  /** Contains reference to all set products this product set consists of. */
  productSetItems: Array<ProductProductSetItemsReference>;
  /**
   * Contains set of product the product is related to. The type of the relation is further categorized by
   * `category` reference attribute. This reference allows interconnect products that are similar or
   * supplementary one to another.
   */
  relatedProducts: Array<ProductRelatedProductsReference>;
  /**
   * It contains references to all stocks for which the product is visible (because the visibility of the product depends on the stock quantity).
   * The product is then visible to the customer according to the stock they have access to.
   */
  stockVisibilities: Array<ProductStockVisibilitiesReference>;
  /** Contains reference to all stocks/warehouse the product is being kept on (or was kept and was depleted). */
  stocks: Array<ProductStocksReference>;
  /**
   * Tags allow non-systematic categorization (cross-structure tagging) of the entities. Tags are often more
   * digestible from the user's point of view. Tags are maintained in Edee.ONE CMS and here we just link them.
   */
  tags: Array<ProductTagsReference>;
  /**
   * Type of entity.
   * Entity type is main sharding key - all data of entities with same type are stored in separated collections. Within the
   * entity type entity is uniquely represented by primary key.
   *
   */
  type: Scalars['String']['output'];
  /**
   * Property is present only in products of MASTER subtype - e.g. master products.
   * Contains list of all parameters that distinguish variants of this particular master product.
   */
  variantParameters: Array<ProductVariantParametersReference>;
  /**
   * Contains version of this definition object and gets increased with any entity type update. Allows to execute
   * optimistic locking i.e. avoiding parallel modifications.
   *
   */
  version: Scalars['Int']['output'];
};


/**
 * Product represents an article that can be displayed and sold on e-shop. Product come in different flavours - complex
 * master / variant products, simple basic products or composed product sets. Product can be organized in categories,
 * groups. Product can relate to other products or brands. Product have prices.
 */
export type NonHierarchicalProductAssociatedDataArgs = {
  locale?: InputMaybe<CatalogLocale>;
};


/**
 * Product represents an article that can be displayed and sold on e-shop. Product come in different flavours - complex
 * master / variant products, simple basic products or composed product sets. Product can be organized in categories,
 * groups. Product can relate to other products or brands. Product have prices.
 */
export type NonHierarchicalProductAttributesArgs = {
  locale?: InputMaybe<CatalogLocale>;
};


/**
 * Product represents an article that can be displayed and sold on e-shop. Product come in different flavours - complex
 * master / variant products, simple basic products or composed product sets. Product can be organized in categories,
 * groups. Product can relate to other products or brands. Product have prices.
 */
export type NonHierarchicalProductBrandArgs = {
  filterBy?: InputMaybe<FilterContainer13b6513537be4a96>;
  orderBy?: InputMaybe<Array<OrderContainer8d36138f1971f1bb>>;
};


/**
 * Product represents an article that can be displayed and sold on e-shop. Product come in different flavours - complex
 * master / variant products, simple basic products or composed product sets. Product can be organized in categories,
 * groups. Product can relate to other products or brands. Product have prices.
 */
export type NonHierarchicalProductBundlesArgs = {
  filterBy?: InputMaybe<FilterContainer2cf89daeb4f0d064>;
  orderBy?: InputMaybe<Array<OrderContainerd89b7947fe7e7154>>;
};


/**
 * Product represents an article that can be displayed and sold on e-shop. Product come in different flavours - complex
 * master / variant products, simple basic products or composed product sets. Product can be organized in categories,
 * groups. Product can relate to other products or brands. Product have prices.
 */
export type NonHierarchicalProductCategoriesArgs = {
  filterBy?: InputMaybe<FilterContainerd7c10f54d105b2f6>;
  orderBy?: InputMaybe<Array<OrderContainer16a68379c1882114>>;
};


/**
 * Product represents an article that can be displayed and sold on e-shop. Product come in different flavours - complex
 * master / variant products, simple basic products or composed product sets. Product can be organized in categories,
 * groups. Product can relate to other products or brands. Product have prices.
 */
export type NonHierarchicalProductGroupsArgs = {
  filterBy?: InputMaybe<FilterContainer1623f55fb0c57182>;
  orderBy?: InputMaybe<Array<OrderContainer20273f9758d7794a>>;
};


/**
 * Product represents an article that can be displayed and sold on e-shop. Product come in different flavours - complex
 * master / variant products, simple basic products or composed product sets. Product can be organized in categories,
 * groups. Product can relate to other products or brands. Product have prices.
 */
export type NonHierarchicalProductMasterArgs = {
  filterBy?: InputMaybe<FilterContainer5762c3a66bdc6e2c>;
  orderBy?: InputMaybe<Array<OrderContainer4058d7c5a95792f>>;
};


/**
 * Product represents an article that can be displayed and sold on e-shop. Product come in different flavours - complex
 * master / variant products, simple basic products or composed product sets. Product can be organized in categories,
 * groups. Product can relate to other products or brands. Product have prices.
 */
export type NonHierarchicalProductParameterValuesArgs = {
  filterBy?: InputMaybe<FilterContainere3982a3d02ff904d>;
  orderBy?: InputMaybe<Array<OrderContainer9d8bf58d6da69dd1>>;
};


/**
 * Product represents an article that can be displayed and sold on e-shop. Product come in different flavours - complex
 * master / variant products, simple basic products or composed product sets. Product can be organized in categories,
 * groups. Product can relate to other products or brands. Product have prices.
 */
export type NonHierarchicalProductPriceArgs = {
  currency?: InputMaybe<CatalogCurrency>;
  locale?: InputMaybe<CatalogLocale>;
  priceList: Scalars['String']['input'];
};


/**
 * Product represents an article that can be displayed and sold on e-shop. Product come in different flavours - complex
 * master / variant products, simple basic products or composed product sets. Product can be organized in categories,
 * groups. Product can relate to other products or brands. Product have prices.
 */
export type NonHierarchicalProductPriceForSaleArgs = {
  currency?: InputMaybe<CatalogCurrency>;
  locale?: InputMaybe<CatalogLocale>;
  priceList?: InputMaybe<Scalars['String']['input']>;
  validIn?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  validNow?: InputMaybe<Scalars['Boolean']['input']>;
};


/**
 * Product represents an article that can be displayed and sold on e-shop. Product come in different flavours - complex
 * master / variant products, simple basic products or composed product sets. Product can be organized in categories,
 * groups. Product can relate to other products or brands. Product have prices.
 */
export type NonHierarchicalProductPricesArgs = {
  currency?: InputMaybe<CatalogCurrency>;
  locale?: InputMaybe<CatalogLocale>;
  priceLists?: InputMaybe<Array<Scalars['String']['input']>>;
};


/**
 * Product represents an article that can be displayed and sold on e-shop. Product come in different flavours - complex
 * master / variant products, simple basic products or composed product sets. Product can be organized in categories,
 * groups. Product can relate to other products or brands. Product have prices.
 */
export type NonHierarchicalProductProductSetItemsArgs = {
  filterBy?: InputMaybe<FilterContainer903f3e153cb1e6fb>;
  orderBy?: InputMaybe<Array<OrderContainer4990bf0060fba166>>;
};


/**
 * Product represents an article that can be displayed and sold on e-shop. Product come in different flavours - complex
 * master / variant products, simple basic products or composed product sets. Product can be organized in categories,
 * groups. Product can relate to other products or brands. Product have prices.
 */
export type NonHierarchicalProductRelatedProductsArgs = {
  filterBy?: InputMaybe<FilterContainer18e363c46192dd8b>;
  orderBy?: InputMaybe<Array<OrderContainerf6e0ce132e9ec30a>>;
};


/**
 * Product represents an article that can be displayed and sold on e-shop. Product come in different flavours - complex
 * master / variant products, simple basic products or composed product sets. Product can be organized in categories,
 * groups. Product can relate to other products or brands. Product have prices.
 */
export type NonHierarchicalProductStockVisibilitiesArgs = {
  filterBy?: InputMaybe<FilterContainerf4d19f02cdced8b0>;
  orderBy?: InputMaybe<Array<OrderContainera528a35f723b1525>>;
};


/**
 * Product represents an article that can be displayed and sold on e-shop. Product come in different flavours - complex
 * master / variant products, simple basic products or composed product sets. Product can be organized in categories,
 * groups. Product can relate to other products or brands. Product have prices.
 */
export type NonHierarchicalProductStocksArgs = {
  filterBy?: InputMaybe<FilterContainer3e7971791f10624>;
  orderBy?: InputMaybe<Array<OrderContainerb6c1c3bfe403e869>>;
};


/**
 * Product represents an article that can be displayed and sold on e-shop. Product come in different flavours - complex
 * master / variant products, simple basic products or composed product sets. Product can be organized in categories,
 * groups. Product can relate to other products or brands. Product have prices.
 */
export type NonHierarchicalProductTagsArgs = {
  filterBy?: InputMaybe<FilterContainer7c02d16043ca92f>;
  orderBy?: InputMaybe<Array<OrderContainer822edbdd50a8dce1>>;
};


/**
 * Product represents an article that can be displayed and sold on e-shop. Product come in different flavours - complex
 * master / variant products, simple basic products or composed product sets. Product can be organized in categories,
 * groups. Product can relate to other products or brands. Product have prices.
 */
export type NonHierarchicalProductVariantParametersArgs = {
  filterBy?: InputMaybe<FilterContainerf8ed17494a215fd4>;
  orderBy?: InputMaybe<Array<OrderContainer926d9c303216fec3>>;
};

/**
 * An entity representing a bonus package definition. Bonus package allows users to buy more products for the price
 * of single one, get something free when one or more products are bought and so on.
 */
export type NonHierarchicalProductBundle = Entity & {
  __typename?: 'NonHierarchicalProductBundle';
  /**
   * Contains set of all locales that were used for localized attributes or associated data of
   * this particular entity.
   *
   */
  allLocales: Array<CatalogLocale>;
  /**
   * Associated data carry additional data entries that are never used for filtering / sorting but may be needed to be fetched
   * along with entity in order to present data to the target consumer (i.e. user / API / bot). Associated data may be stored
   * in slower storage and may contain wide range of data types - from small ones (i.e. numbers, strings, dates) up to large
   * binary arrays representing entire files (i.e. pictures, documents).
   *
   */
  associatedData?: Maybe<ProductBundleAssociatedData>;
  /**
   * Attributes allows defining set of data that are fetched in bulk along with the reference.
   * Attributes may be used for fast filtering or can be used to sort along.
   *
   */
  attributes?: Maybe<ProductBundleAttributes>;
  /**
   * Contains set of products that user may get with discount when the `requiredItems` condition is fulfilled.
   *
   */
  bonusItems: Array<ProductBundleBonusItemsReference>;
  /**
   * Contains set of requested locales for this particular entity.
   *
   */
  locales: Array<CatalogLocale>;
  /**
   * Unique Integer positive number representing the entity. Can be used for fast lookup for
   * entity (entities). Primary key must be unique within the same entity type.
   *
   */
  primaryKey: Scalars['Int']['output'];
  /**
   * Type of entity.
   * Entity type is main sharding key - all data of entities with same type are stored in separated collections. Within the
   * entity type entity is uniquely represented by primary key.
   *
   */
  type: Scalars['String']['output'];
  /**
   * Contains version of this definition object and gets increased with any entity type update. Allows to execute
   * optimistic locking i.e. avoiding parallel modifications.
   *
   */
  version: Scalars['Int']['output'];
};


/**
 * An entity representing a bonus package definition. Bonus package allows users to buy more products for the price
 * of single one, get something free when one or more products are bought and so on.
 */
export type NonHierarchicalProductBundleAssociatedDataArgs = {
  locale?: InputMaybe<CatalogLocale>;
};


/**
 * An entity representing a bonus package definition. Bonus package allows users to buy more products for the price
 * of single one, get something free when one or more products are bought and so on.
 */
export type NonHierarchicalProductBundleAttributesArgs = {
  locale?: InputMaybe<CatalogLocale>;
};


/**
 * An entity representing a bonus package definition. Bonus package allows users to buy more products for the price
 * of single one, get something free when one or more products are bought and so on.
 */
export type NonHierarchicalProductBundleBonusItemsArgs = {
  filterBy?: InputMaybe<FilterContaineree87efab1fb06f>;
  orderBy?: InputMaybe<Array<OrderContainer5e937eaca1b948e1>>;
};

/** Shipping method describes a form of shipping that can be selected to transport the goods to the customer. */
export type NonHierarchicalShippingMethod = Entity & {
  __typename?: 'NonHierarchicalShippingMethod';
  /**
   * Contains set of all locales that were used for localized attributes or associated data of
   * this particular entity.
   *
   */
  allLocales: Array<CatalogLocale>;
  /**
   * Associated data carry additional data entries that are never used for filtering / sorting but may be needed to be fetched
   * along with entity in order to present data to the target consumer (i.e. user / API / bot). Associated data may be stored
   * in slower storage and may contain wide range of data types - from small ones (i.e. numbers, strings, dates) up to large
   * binary arrays representing entire files (i.e. pictures, documents).
   *
   */
  associatedData?: Maybe<ShippingMethodAssociatedData>;
  /**
   * Attributes allows defining set of data that are fetched in bulk along with the reference.
   * Attributes may be used for fast filtering or can be used to sort along.
   *
   */
  attributes?: Maybe<ShippingMethodAttributes>;
  /**
   * Set of tags allowing to compute whether the shipping method should be available for use in context of
   * the products being shipped.
   */
  calculationTags: Array<ShippingMethodCalculationTagsReference>;
  /**
   * Contains set of requested locales for this particular entity.
   *
   */
  locales: Array<CatalogLocale>;
  /**
   * Single price corresponding to defined arguments picked up from set of all `prices`.
   * If more than one price is found, the valid one is picked. Validity is check based on query, if desired
   * validity is not specified in query, current time is used.
   *
   */
  price?: Maybe<Price>;
  /**
   * Price for which the entity should be sold. This method can be used only when appropriate
   * price related constraints are present so that `currency` and `priceList` priority can be extracted from the query.
   * The moment is either extracted from the query as well (if present) or current date and time is used.
   *
   */
  priceForSale?: Maybe<Price>;
  /**
   * Price inner record handling controls how prices that share same `inner entity id` will behave during filtering and sorting.
   *
   */
  priceInnerRecordHandling: PriceInnerRecordHandling;
  /**
   * Prices allows defining set of prices of entity for complex filtering and ordering.
   *
   */
  prices: Array<Price>;
  /**
   * Unique Integer positive number representing the entity. Can be used for fast lookup for
   * entity (entities). Primary key must be unique within the same entity type.
   *
   */
  primaryKey: Scalars['Int']['output'];
  /** Set of payments methods that limits the offer of payment methods when this shipping method is selected. */
  restrictedPaymentMethods: Array<ShippingMethodRestrictedPaymentMethodsReference>;
  /**
   * Tags allow non-systematic categorization (cross-structure tagging) of the entities. Tags are often more
   * digestible from the user's point of view. Tags are maintained in Edee.ONE CMS and here we just link them.
   */
  tags: Array<ShippingMethodTagsReference>;
  /**
   * Type of entity.
   * Entity type is main sharding key - all data of entities with same type are stored in separated collections. Within the
   * entity type entity is uniquely represented by primary key.
   *
   */
  type: Scalars['String']['output'];
  /**
   * Contains version of this definition object and gets increased with any entity type update. Allows to execute
   * optimistic locking i.e. avoiding parallel modifications.
   *
   */
  version: Scalars['Int']['output'];
};


/** Shipping method describes a form of shipping that can be selected to transport the goods to the customer. */
export type NonHierarchicalShippingMethodAssociatedDataArgs = {
  locale?: InputMaybe<CatalogLocale>;
};


/** Shipping method describes a form of shipping that can be selected to transport the goods to the customer. */
export type NonHierarchicalShippingMethodAttributesArgs = {
  locale?: InputMaybe<CatalogLocale>;
};


/** Shipping method describes a form of shipping that can be selected to transport the goods to the customer. */
export type NonHierarchicalShippingMethodCalculationTagsArgs = {
  filterBy?: InputMaybe<FilterContainere9cd3f187046f5d6>;
  orderBy?: InputMaybe<Array<OrderContainer7d9ecf1c05051af6>>;
};


/** Shipping method describes a form of shipping that can be selected to transport the goods to the customer. */
export type NonHierarchicalShippingMethodPriceArgs = {
  currency?: InputMaybe<CatalogCurrency>;
  locale?: InputMaybe<CatalogLocale>;
  priceList: Scalars['String']['input'];
};


/** Shipping method describes a form of shipping that can be selected to transport the goods to the customer. */
export type NonHierarchicalShippingMethodPriceForSaleArgs = {
  currency?: InputMaybe<CatalogCurrency>;
  locale?: InputMaybe<CatalogLocale>;
  priceList?: InputMaybe<Scalars['String']['input']>;
  validIn?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  validNow?: InputMaybe<Scalars['Boolean']['input']>;
};


/** Shipping method describes a form of shipping that can be selected to transport the goods to the customer. */
export type NonHierarchicalShippingMethodPricesArgs = {
  currency?: InputMaybe<CatalogCurrency>;
  locale?: InputMaybe<CatalogLocale>;
  priceLists?: InputMaybe<Array<Scalars['String']['input']>>;
};


/** Shipping method describes a form of shipping that can be selected to transport the goods to the customer. */
export type NonHierarchicalShippingMethodRestrictedPaymentMethodsArgs = {
  filterBy?: InputMaybe<FilterContainer9df8ecf165a46846>;
  orderBy?: InputMaybe<Array<OrderContainer776ab88cdf14b588>>;
};


/** Shipping method describes a form of shipping that can be selected to transport the goods to the customer. */
export type NonHierarchicalShippingMethodTagsArgs = {
  filterBy?: InputMaybe<FilterContainer8036eb0fa0d4b8bb>;
  orderBy?: InputMaybe<Array<OrderContainer7388522944352f3a>>;
};

/**
 * Stock represents a warehouse/depot where the product is being stored. The stock always keeps a specific
 * amount of the product.
 */
export type NonHierarchicalStock = Entity & {
  __typename?: 'NonHierarchicalStock';
  /**
   * Contains set of all locales that were used for localized attributes or associated data of
   * this particular entity.
   *
   */
  allLocales: Array<CatalogLocale>;
  /**
   * Associated data carry additional data entries that are never used for filtering / sorting but may be needed to be fetched
   * along with entity in order to present data to the target consumer (i.e. user / API / bot). Associated data may be stored
   * in slower storage and may contain wide range of data types - from small ones (i.e. numbers, strings, dates) up to large
   * binary arrays representing entire files (i.e. pictures, documents).
   *
   */
  associatedData?: Maybe<StockAssociatedData>;
  /**
   * Attributes allows defining set of data that are fetched in bulk along with the reference.
   * Attributes may be used for fast filtering or can be used to sort along.
   *
   */
  attributes?: Maybe<StockAttributes>;
  /**
   * Contains set of requested locales for this particular entity.
   *
   */
  locales: Array<CatalogLocale>;
  /**
   * Unique Integer positive number representing the entity. Can be used for fast lookup for
   * entity (entities). Primary key must be unique within the same entity type.
   *
   */
  primaryKey: Scalars['Int']['output'];
  /**
   * Type of entity.
   * Entity type is main sharding key - all data of entities with same type are stored in separated collections. Within the
   * entity type entity is uniquely represented by primary key.
   *
   */
  type: Scalars['String']['output'];
  /**
   * Contains version of this definition object and gets increased with any entity type update. Allows to execute
   * optimistic locking i.e. avoiding parallel modifications.
   *
   */
  version: Scalars['Int']['output'];
};


/**
 * Stock represents a warehouse/depot where the product is being stored. The stock always keeps a specific
 * amount of the product.
 */
export type NonHierarchicalStockAssociatedDataArgs = {
  locale?: InputMaybe<CatalogLocale>;
};


/**
 * Stock represents a warehouse/depot where the product is being stored. The stock always keeps a specific
 * amount of the product.
 */
export type NonHierarchicalStockAttributesArgs = {
  locale?: InputMaybe<CatalogLocale>;
};

/** Tag is equivalent to `EdeeTag` that is published to evitaDB. */
export type NonHierarchicalTag = Entity & {
  __typename?: 'NonHierarchicalTag';
  /**
   * Contains set of all locales that were used for localized attributes or associated data of
   * this particular entity.
   *
   */
  allLocales: Array<CatalogLocale>;
  /**
   * Associated data carry additional data entries that are never used for filtering / sorting but may be needed to be fetched
   * along with entity in order to present data to the target consumer (i.e. user / API / bot). Associated data may be stored
   * in slower storage and may contain wide range of data types - from small ones (i.e. numbers, strings, dates) up to large
   * binary arrays representing entire files (i.e. pictures, documents).
   *
   */
  associatedData?: Maybe<TagAssociatedData>;
  /**
   * Attributes allows defining set of data that are fetched in bulk along with the reference.
   * Attributes may be used for fast filtering or can be used to sort along.
   *
   */
  attributes?: Maybe<TagAttributes>;
  /** Tag category is a group aggregating similar Edee tags together in a logical fashion. */
  categories: Array<TagCategoriesReference>;
  /**
   * Contains set of requested locales for this particular entity.
   *
   */
  locales: Array<CatalogLocale>;
  /**
   * Unique Integer positive number representing the entity. Can be used for fast lookup for
   * entity (entities). Primary key must be unique within the same entity type.
   *
   */
  primaryKey: Scalars['Int']['output'];
  /**
   * Type of entity.
   * Entity type is main sharding key - all data of entities with same type are stored in separated collections. Within the
   * entity type entity is uniquely represented by primary key.
   *
   */
  type: Scalars['String']['output'];
  /**
   * Contains version of this definition object and gets increased with any entity type update. Allows to execute
   * optimistic locking i.e. avoiding parallel modifications.
   *
   */
  version: Scalars['Int']['output'];
};


/** Tag is equivalent to `EdeeTag` that is published to evitaDB. */
export type NonHierarchicalTagAssociatedDataArgs = {
  locale?: InputMaybe<CatalogLocale>;
};


/** Tag is equivalent to `EdeeTag` that is published to evitaDB. */
export type NonHierarchicalTagAttributesArgs = {
  locale?: InputMaybe<CatalogLocale>;
};


/** Tag is equivalent to `EdeeTag` that is published to evitaDB. */
export type NonHierarchicalTagCategoriesArgs = {
  filterBy?: InputMaybe<FilterContainer21fbcdb63b6665fb>;
  orderBy?: InputMaybe<Array<OrderContainera6e9ec426f250857>>;
};

/**
 * Product represents an article that can be displayed and sold on e-shop. Product come in different flavours - complex
 * master / variant products, simple basic products or composed product sets. Product can be organized in categories,
 * groups. Product can relate to other products or brands. Product have prices.
 */
export type ObsoleteProduct = Entity & {
  __typename?: 'ObsoleteProduct';
  /**
   * Contains set of all locales that were used for localized attributes or associated data of
   * this particular entity.
   *
   */
  allLocales: Array<CatalogLocale>;
  /**
   * Associated data carry additional data entries that are never used for filtering / sorting but may be needed to be fetched
   * along with entity in order to present data to the target consumer (i.e. user / API / bot). Associated data may be stored
   * in slower storage and may contain wide range of data types - from small ones (i.e. numbers, strings, dates) up to large
   * binary arrays representing entire files (i.e. pictures, documents).
   *
   */
  associatedData?: Maybe<ObsoleteProductAssociatedData>;
  /**
   * Attributes allows defining set of data that are fetched in bulk along with the reference.
   * Attributes may be used for fast filtering or can be used to sort along.
   *
   */
  attributes?: Maybe<ObsoleteProductAttributes>;
  /**
   * Contains reference to the product brand. Brand represents a manufacturer or marketing brand of the product.
   * The product may have only one such brand.
   */
  brand?: Maybe<ObsoleteProductBrandReference>;
  /** List of bonus bundles that can be obtained by purchasing this product. */
  bundles: Array<ObsoleteProductBundlesReference>;
  /**
   * Contains set of categories the product is assigned to. Typically, there is exactly one assignment, but
   * product can be assigned to multiple ones.
   */
  categories: Array<ObsoleteProductCategoriesReference>;
  /**
   * Contains set of groups the product is assigned to. Groups allow categorization of products outside
   * the shared category hierarchy.
   */
  groups: Array<ObsoleteProductGroupsReference>;
  /**
   * Contains set of requested locales for this particular entity.
   *
   */
  locales: Array<CatalogLocale>;
  /**
   * Contains reference to the master product. The reference is always NULL except for products of type VARIANT.
   * These products have always the reference to their master product. Master product is usually displayed
   * in listings instead of the variants to avoid cluttering the listing with similar products.
   */
  master?: Maybe<ObsoleteProductMasterReference>;
  /**
   * Contains reference to all parameter values that has been assigned to the product.
   * Parameter value is a specific "property" of the product that can be used for differentiating products
   * in a comprehensible way. An example of parameter value might be a material - aluminium, plastic,
   * or ports - USB, HDMI or whatever you can think of.
   * Single parameter value can be assigned to multiple products.
   */
  parameterValues: Array<ObsoleteProductParameterValuesReference>;
  /**
   * Single price corresponding to defined arguments picked up from set of all `prices`.
   * If more than one price is found, the valid one is picked. Validity is check based on query, if desired
   * validity is not specified in query, current time is used.
   *
   */
  price?: Maybe<Price>;
  /**
   * Price for which the entity should be sold. This method can be used only when appropriate
   * price related constraints are present so that `currency` and `priceList` priority can be extracted from the query.
   * The moment is either extracted from the query as well (if present) or current date and time is used.
   *
   */
  priceForSale?: Maybe<Price>;
  /**
   * Price inner record handling controls how prices that share same `inner entity id` will behave during filtering and sorting.
   *
   */
  priceInnerRecordHandling: PriceInnerRecordHandling;
  /**
   * Prices allows defining set of prices of entity for complex filtering and ordering.
   *
   */
  prices: Array<Price>;
  /**
   * Unique Integer positive number representing the entity. Can be used for fast lookup for
   * entity (entities). Primary key must be unique within the same entity type.
   *
   */
  primaryKey: Scalars['Int']['output'];
  /** Contains reference to all set products this product set consists of. */
  productSetItems: Array<ObsoleteProductProductSetItemsReference>;
  /**
   * Contains set of product the product is related to. The type of the relation is further categorized by
   * `category` reference attribute. This reference allows interconnect products that are similar or
   * supplementary one to another.
   */
  relatedProducts: Array<ObsoleteProductRelatedProductsReference>;
  /**
   * It contains references to all stocks for which the product is visible (because the visibility of the product depends on the stock quantity).
   * The product is then visible to the customer according to the stock they have access to.
   */
  stockVisibilities: Array<ObsoleteProductStockVisibilitiesReference>;
  /**
   * Tags allow non-systematic categorization (cross-structure tagging) of the entities. Tags are often more
   * digestible from the user's point of view. Tags are maintained in Edee.ONE CMS and here we just link them.
   */
  tags: Array<ObsoleteProductTagsReference>;
  /**
   * Type of entity.
   * Entity type is main sharding key - all data of entities with same type are stored in separated collections. Within the
   * entity type entity is uniquely represented by primary key.
   *
   */
  type: Scalars['String']['output'];
  /**
   * Property is present only in products of MASTER subtype - e.g. master products.
   * Contains list of all parameters that distinguish variants of this particular master product.
   */
  variantParameters: Array<ObsoleteProductVariantParametersReference>;
  /**
   * Contains version of this definition object and gets increased with any entity type update. Allows to execute
   * optimistic locking i.e. avoiding parallel modifications.
   *
   */
  version: Scalars['Int']['output'];
};


/**
 * Product represents an article that can be displayed and sold on e-shop. Product come in different flavours - complex
 * master / variant products, simple basic products or composed product sets. Product can be organized in categories,
 * groups. Product can relate to other products or brands. Product have prices.
 */
export type ObsoleteProductAssociatedDataArgs = {
  locale?: InputMaybe<CatalogLocale>;
};


/**
 * Product represents an article that can be displayed and sold on e-shop. Product come in different flavours - complex
 * master / variant products, simple basic products or composed product sets. Product can be organized in categories,
 * groups. Product can relate to other products or brands. Product have prices.
 */
export type ObsoleteProductAttributesArgs = {
  locale?: InputMaybe<CatalogLocale>;
};


/**
 * Product represents an article that can be displayed and sold on e-shop. Product come in different flavours - complex
 * master / variant products, simple basic products or composed product sets. Product can be organized in categories,
 * groups. Product can relate to other products or brands. Product have prices.
 */
export type ObsoleteProductBrandArgs = {
  filterBy?: InputMaybe<FilterContainerc89c1a6e13324cd>;
  orderBy?: InputMaybe<Array<OrderContainer3545256dd210499b>>;
};


/**
 * Product represents an article that can be displayed and sold on e-shop. Product come in different flavours - complex
 * master / variant products, simple basic products or composed product sets. Product can be organized in categories,
 * groups. Product can relate to other products or brands. Product have prices.
 */
export type ObsoleteProductBundlesArgs = {
  filterBy?: InputMaybe<FilterContainer218d07b1e68074c9>;
  orderBy?: InputMaybe<Array<OrderContainer4c886036c02c0f05>>;
};


/**
 * Product represents an article that can be displayed and sold on e-shop. Product come in different flavours - complex
 * master / variant products, simple basic products or composed product sets. Product can be organized in categories,
 * groups. Product can relate to other products or brands. Product have prices.
 */
export type ObsoleteProductCategoriesArgs = {
  filterBy?: InputMaybe<FilterContainer86dfabccfd23aa32>;
  orderBy?: InputMaybe<Array<OrderContainer7712728df4562538>>;
};


/**
 * Product represents an article that can be displayed and sold on e-shop. Product come in different flavours - complex
 * master / variant products, simple basic products or composed product sets. Product can be organized in categories,
 * groups. Product can relate to other products or brands. Product have prices.
 */
export type ObsoleteProductGroupsArgs = {
  filterBy?: InputMaybe<FilterContainer3e99187591f187d1>;
  orderBy?: InputMaybe<Array<OrderContainera56923d3758ae7cd>>;
};


/**
 * Product represents an article that can be displayed and sold on e-shop. Product come in different flavours - complex
 * master / variant products, simple basic products or composed product sets. Product can be organized in categories,
 * groups. Product can relate to other products or brands. Product have prices.
 */
export type ObsoleteProductMasterArgs = {
  filterBy?: InputMaybe<FilterContainer25ca64b5a7fd295d>;
  orderBy?: InputMaybe<Array<OrderContainer7cfc8f23b1dd770>>;
};


/**
 * Product represents an article that can be displayed and sold on e-shop. Product come in different flavours - complex
 * master / variant products, simple basic products or composed product sets. Product can be organized in categories,
 * groups. Product can relate to other products or brands. Product have prices.
 */
export type ObsoleteProductParameterValuesArgs = {
  filterBy?: InputMaybe<FilterContainer155ce1a8713f11f>;
  orderBy?: InputMaybe<Array<OrderContainerdb7d7f11b340bf77>>;
};


/**
 * Product represents an article that can be displayed and sold on e-shop. Product come in different flavours - complex
 * master / variant products, simple basic products or composed product sets. Product can be organized in categories,
 * groups. Product can relate to other products or brands. Product have prices.
 */
export type ObsoleteProductPriceArgs = {
  currency?: InputMaybe<CatalogCurrency>;
  locale?: InputMaybe<CatalogLocale>;
  priceList: Scalars['String']['input'];
};


/**
 * Product represents an article that can be displayed and sold on e-shop. Product come in different flavours - complex
 * master / variant products, simple basic products or composed product sets. Product can be organized in categories,
 * groups. Product can relate to other products or brands. Product have prices.
 */
export type ObsoleteProductPriceForSaleArgs = {
  currency?: InputMaybe<CatalogCurrency>;
  locale?: InputMaybe<CatalogLocale>;
  priceList?: InputMaybe<Scalars['String']['input']>;
  validIn?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  validNow?: InputMaybe<Scalars['Boolean']['input']>;
};


/**
 * Product represents an article that can be displayed and sold on e-shop. Product come in different flavours - complex
 * master / variant products, simple basic products or composed product sets. Product can be organized in categories,
 * groups. Product can relate to other products or brands. Product have prices.
 */
export type ObsoleteProductPricesArgs = {
  currency?: InputMaybe<CatalogCurrency>;
  locale?: InputMaybe<CatalogLocale>;
  priceLists?: InputMaybe<Array<Scalars['String']['input']>>;
};


/**
 * Product represents an article that can be displayed and sold on e-shop. Product come in different flavours - complex
 * master / variant products, simple basic products or composed product sets. Product can be organized in categories,
 * groups. Product can relate to other products or brands. Product have prices.
 */
export type ObsoleteProductProductSetItemsArgs = {
  filterBy?: InputMaybe<FilterContainerdc998e10009e5e68>;
  orderBy?: InputMaybe<Array<OrderContainer5bd124d4214589b2>>;
};


/**
 * Product represents an article that can be displayed and sold on e-shop. Product come in different flavours - complex
 * master / variant products, simple basic products or composed product sets. Product can be organized in categories,
 * groups. Product can relate to other products or brands. Product have prices.
 */
export type ObsoleteProductRelatedProductsArgs = {
  filterBy?: InputMaybe<FilterContainer464975cef7a99c2c>;
  orderBy?: InputMaybe<Array<OrderContainer21bc50d34c2809bd>>;
};


/**
 * Product represents an article that can be displayed and sold on e-shop. Product come in different flavours - complex
 * master / variant products, simple basic products or composed product sets. Product can be organized in categories,
 * groups. Product can relate to other products or brands. Product have prices.
 */
export type ObsoleteProductStockVisibilitiesArgs = {
  filterBy?: InputMaybe<FilterContainer60712c1bd118553d>;
  orderBy?: InputMaybe<Array<OrderContainerc9679cdc80b33b45>>;
};


/**
 * Product represents an article that can be displayed and sold on e-shop. Product come in different flavours - complex
 * master / variant products, simple basic products or composed product sets. Product can be organized in categories,
 * groups. Product can relate to other products or brands. Product have prices.
 */
export type ObsoleteProductTagsArgs = {
  filterBy?: InputMaybe<FilterContainerf111a7119fe869f8>;
  orderBy?: InputMaybe<Array<OrderContainer8529c4502d048485>>;
};


/**
 * Product represents an article that can be displayed and sold on e-shop. Product come in different flavours - complex
 * master / variant products, simple basic products or composed product sets. Product can be organized in categories,
 * groups. Product can relate to other products or brands. Product have prices.
 */
export type ObsoleteProductVariantParametersArgs = {
  filterBy?: InputMaybe<FilterContainere0382ac2d2e8abf2>;
  orderBy?: InputMaybe<Array<OrderContainerc7bd19275a1d3cc6>>;
};

/**
 * Associated data carry additional data entries that are never used for filtering / sorting but may be needed to be fetched
 * along with entity in order to present data to the target consumer (i.e. user / API / bot). Associated data may be stored
 * in slower storage and may contain wide range of data types - from small ones (i.e. numbers, strings, dates) up to large
 * binary arrays representing entire files (i.e. pictures, documents).
 *
 */
export type ObsoleteProductAssociatedData = {
  __typename?: 'ObsoleteProductAssociatedData';
  /**
   * Contains a structure that keeps all currently active URLs for different locales. This information is used
   * for rendering language switching menu. We need to use correct active URL so that user stays looking
   * the exact same entity after the locale switch occurred - just in different language.
   */
  allActiveUrls?: Maybe<Scalars['ComplexDataObject']['output']>;
  /**
   * A structure that allows to reference multiple binary files related to the entity. The related files might
   * represent pictures, technical documentation, certificates, 3D models and much more. The files are expected
   * to be kept in external storage and referenced from here.
   *
   * The format of the related file string is: `code`:`storageId`:`[id1,id2,id3]` where:
   *
   * - `code` is the identificator of the related file type
   * - `storageId` is the identifiactor of the Edee.ONE storage
   * - `[id1,id2,id3]` is array of integer numbers that identify the files in the storage
   *
   * This associated data contains all data about related files and is superset of `relatedFiles`.
   */
  allRelatedFiles?: Maybe<Array<Scalars['String']['output']>>;
  /** A structure that allows to specify a set of localized labels for entity. */
  localization?: Maybe<Scalars['ComplexDataObject']['output']>;
};

/**
 * Attributes allows defining set of data that are fetched in bulk along with the entity body.
 * Attributes may be used for fast filtering or can be used to sort along.
 *
 */
export type ObsoleteProductAttributes = {
  __typename?: 'ObsoleteProductAttributes';
  /**
   * Availability level recognized by the system. The availability levels are configured in system configuration,
   * are specific to the certain project and don't change during application lifetime (application reconfiguration
   * is needed to change those). The specific settings for each availability level (those that affect visibility,
   * orderability and so on) are evaluated on the server side, and they wouldn't be probably necessary on the client
   * side. The availability name is mainly targeted to be part of the localization keys used on the client.
   *
   */
  availability: Scalars['String']['output'];
  /**
   * Provides quick access to the code of the linked brand for the sake of passing to analytics software
   * along with the other product data in event.
   */
  brandCode?: Maybe<Scalars['String']['output']>;
  /** Catalog designation of the product in the seller system. It doesn't have to be unique. */
  catalogNumber?: Maybe<Scalars['String']['output']>;
  /**
   * Date and time of the last change of this entity. This timestamp is updated only when real change
   * in entity occurs in primary data store.  This timestamp should be used on boundaries with external
   * systems (such as inventory feeds and so on).
   */
  changed: Scalars['OffsetDateTime']['output'];
  /**
   * Unique code that identifies the entity among other entities of the same kind.
   * The code is equivalent to primary key but is targeted on external consumers (systems).
   */
  code: Scalars['String']['output'];
  /**
   * The product shortcode for use in feeds and GTM, which must share the same code and have limited
   * length. For now, the shortest recorded length is 32 characters, and this shortcode is optimized for
   * that length.
   */
  codeShort: Scalars['String']['output'];
  /** Full description of the entity in HTML format. */
  description?: Maybe<Scalars['String']['output']>;
  /** Shortened version of description of the entity in plain text. */
  descriptionShort?: Maybe<Scalars['String']['output']>;
  /**
   * The EAN, or European Article Number, can have 8, 12, 13 or 14 characters. EAN-13 is most often used, which
   * consists of a prefix (special code for the given goods) or the supplier's country number (Czechia has 859,
   * Slovakia 858). The code continues with the manufacturer's number and the serial number of the product,
   * which the manufacturer chooses himself.
   *
   */
  ean?: Maybe<Scalars['String']['output']>;
  /**
   * Contains true if product is alias (kind of duplicate) of the original (origin) product.
   *  Alias products copy most of the origin properties, but allow to override and change most of them.
   *  This mechanism is provided by the EdeeShop, so this flag is just a note that this happened on this product.
   */
  isAlias: Scalars['Boolean']['output'];
  /**
   * If it is `true`, the set is worked with as a whole (it has its own stock availability independent of the
   * items), otherwise individual items are reserved directly when ordering (i.e. by purchasing any individual
   * item, the stock availability of the set will also be reduced).
   */
  isBookAsSet?: Maybe<Scalars['Boolean']['output']>;
  /** Maximal quantity of the product that can be ordered. */
  maxOrderQuantity?: Maybe<Scalars['BigDecimal']['output']>;
  /** Minimal quantity of the product that can be ordered. */
  minOrderQuantity: Scalars['BigDecimal']['output'];
  /** Localized name of the entity. */
  name: Scalars['String']['output'];
  /**
   * Order of the entity among other entities sharing the same parent in the listing. Used for sorting entities
   * in ascending order.
   */
  order: Scalars['Predecessor']['output'];
  /**
   * Defines product types:
   *
   * - BASIC: standard (basic) product
   * - MASTER: the master product represents a kind of common ancestor for all product variants.
   * 	E.g. we can have the t-shirt in multiple sizes (S, M, L, LX). Master is usually displayed in listings
   * 	instead of repeating multiple combinations of the same product. It is not possible to order or add t
   * 	the wishlist.
   * - VARIANT: single product variant (i.e. a blue medium-size T-Shirt)
   * - SET: a set of products bought as a whole
   *
   */
  productType: Scalars['String']['output'];
  /**
   * Date and time when this entity was last published in the evitaDB index. This timestamp will usually
   * be different from the `changed` attribute because the publishing process asynchronously picks up
   * changed entities and publishes them to the evitaDB index with some delay. Also, when evitaDB is
   * completely re-indexed, all timestamps in this attribute will be reset to a new timestamp, while the
   * `changed` attribute will remain the same.
   *
   */
  published: Scalars['OffsetDateTime']['output'];
  /** Contains average rating for the entity across all accepted votes. */
  rating?: Maybe<Scalars['BigDecimal']['output']>;
  /**
   * Contains all user ids that gave a rating to the product. This attribute allows to list all ratings
   * done by a particular user.
   */
  ratingUsers?: Maybe<Array<Scalars['UUID']['output']>>;
  /** Contains total number of accepted votes for this entity. */
  ratingVotes: Scalars['Int']['output'];
  /**
   * A structure that allows to reference multiple binary files related to the entity. The related files might
   * represent pictures, technical documentation, certificates, 3D models and much more. The files are expected
   * to be kept in external storage and referenced from here.
   *
   * - `code` is the identificator of the related file type
   * - `storageId` is the identificator of the Edee.ONE storage
   * - `[id1,id2,id3]` is array of integer numbers that identify the files in the storage
   *
   * This attribute contains subset of `allRelatedFiles` that is used frequently along with entity
   * in listings and so on. Usually it contains something like main motive.
   */
  relatedFiles?: Maybe<Array<Scalars['String']['output']>>;
  /**
   * Date and time when the product was removed from sale.
   *
   */
  saleEnded: Scalars['OffsetDateTime']['output'];
  /**
   * Enumeration that represents limitations for sale on this product:
   *
   * - BONUS_PRODUCT: the product can only be obtained as part of a bonus package.
   * - SET_PART_PRODUCT: the product can only be obtained as a part of the set.
   * - WITHOUT_RESTRICTION: product can be obtained without any restriction
   *
   */
  saleRestriction: Scalars['String']['output'];
  /**
   * Returns the status of the entity:
   *
   * - ACTIVE: entity is available on frontend
   * - PRIVATE: entity is  not available on frontend, but it's visible in administration
   */
  status: Scalars['String']['output'];
  /**
   * The number that represents minimal step in ordered quantity that can be made by customer (i.e. when he wants
   * to order more or less of the product).
   *
   */
  stepOrderQuantity: Scalars['BigDecimal']['output'];
  /**
   * The supplier code represents a code assigned to the product in the supplier system. This code may differ
   * from catalog number assigned by the seller. It doesn't have to be unique.
   *
   */
  supplierCode?: Maybe<Scalars['String']['output']>;
  /** Unit code (pcs, kg, cm). */
  unit: Scalars['String']['output'];
  /** Localized and globally unique URL of the entity. */
  url?: Maybe<Scalars['String']['output']>;
  /**
   * Old URLs that has been originally assigned to the entity, but are no longer active. Each value that was
   * once `url` but was changed to something else is moved to this list. Thi allows accessing the entity even
   * on the previous location (with redirect) so that remembered URLs in external systems don't end up with
   * "entity not found" response.
   */
  urlInactive?: Maybe<Array<Scalars['String']['output']>>;
  /** Warranty period for the product in #getWarrantyPeriodUnit() . */
  warrantyPeriod?: Maybe<Scalars['Int']['output']>;
};


/**
 * Attributes allows defining set of data that are fetched in bulk along with the entity body.
 * Attributes may be used for fast filtering or can be used to sort along.
 *
 */
export type ObsoleteProductAttributesMaxOrderQuantityArgs = {
  formatted?: InputMaybe<Scalars['Boolean']['input']>;
};


/**
 * Attributes allows defining set of data that are fetched in bulk along with the entity body.
 * Attributes may be used for fast filtering or can be used to sort along.
 *
 */
export type ObsoleteProductAttributesMinOrderQuantityArgs = {
  formatted?: InputMaybe<Scalars['Boolean']['input']>;
};


/**
 * Attributes allows defining set of data that are fetched in bulk along with the entity body.
 * Attributes may be used for fast filtering or can be used to sort along.
 *
 */
export type ObsoleteProductAttributesRatingArgs = {
  formatted?: InputMaybe<Scalars['Boolean']['input']>;
};


/**
 * Attributes allows defining set of data that are fetched in bulk along with the entity body.
 * Attributes may be used for fast filtering or can be used to sort along.
 *
 */
export type ObsoleteProductAttributesStepOrderQuantityArgs = {
  formatted?: InputMaybe<Scalars['Boolean']['input']>;
};

/**
 * This DTO contains information about single facet group and statistics of the facets that relates to it.
 *
 */
export type ObsoleteProductBrandFacetGroupStatistics = {
  __typename?: 'ObsoleteProductBrandFacetGroupStatistics';
  /**
   * Contains number of distinct entities in the response that possess any reference in this group.
   *
   */
  count: Scalars['Int']['output'];
  /**
   * Contains statistics of individual facets.
   *
   */
  facetStatistics: Array<ObsoleteProductBrandFacetStatistics>;
};


/**
 * This DTO contains information about single facet group and statistics of the facets that relates to it.
 *
 */
export type ObsoleteProductBrandFacetGroupStatisticsFacetStatisticsArgs = {
  filterBy?: InputMaybe<FilterContainer517d1d8ea5c4e742>;
  orderBy?: InputMaybe<Array<OrderContainer18970ca942385a0b>>;
};

/**
 * This DTO contains information about single facet statistics of the entities that are present in the response.
 *
 */
export type ObsoleteProductBrandFacetStatistics = {
  __typename?: 'ObsoleteProductBrandFacetStatistics';
  /**
   * Contains number of distinct entities in the response that possess of this reference.
   *
   */
  count: Scalars['Int']['output'];
  /**
   * Contains referenced entity representing.
   *
   */
  facetEntity?: Maybe<Brand>;
  /**
   * This field is not null only when this facet is not requested.
   * Contains projected impact on the current response if this facet is also requested in filtering constraints.
   *
   */
  impact?: Maybe<FacetRequestImpact>;
  /**
   * Contains TRUE if the facet was part of the query filtering constraints.
   *
   */
  requested: Scalars['Boolean']['output'];
};

/**
 * Contains reference to the product brand. Brand represents a manufacturer or marketing brand of the product.
 * The product may have only one such brand.
 */
export type ObsoleteProductBrandReference = {
  __typename?: 'ObsoleteProductBrandReference';
  /**
   * Returns body of the referenced entity in case its fetching was requested via entity_fetch constraint.
   *
   */
  referencedEntity?: Maybe<Brand>;
  /**
   *          Returns primary key of the referenced (internal or external) entity.
   *
   */
  referencedPrimaryKey: Scalars['Int']['output'];
};

/**
 * Attributes allows defining set of data that are fetched in bulk along with the entity body.
 * Attributes may be used for fast filtering or can be used to sort along.
 *
 */
export type ObsoleteProductBundlesAttributes = {
  __typename?: 'ObsoleteProductBundlesAttributes';
  /** Return the minimum quantity of required product that needs to be purchased to make the bundle available. */
  minRequiredQuantity: Scalars['BigDecimal']['output'];
  /** Id of the required product that needs to be purchased to make the bundle available. */
  requiredProductId: Scalars['Int']['output'];
};


/**
 * Attributes allows defining set of data that are fetched in bulk along with the entity body.
 * Attributes may be used for fast filtering or can be used to sort along.
 *
 */
export type ObsoleteProductBundlesAttributesMinRequiredQuantityArgs = {
  formatted?: InputMaybe<Scalars['Boolean']['input']>;
};

/** List of bonus bundles that can be obtained by purchasing this product. */
export type ObsoleteProductBundlesReference = {
  __typename?: 'ObsoleteProductBundlesReference';
  /**
   * Attributes allows defining set of data that are fetched in bulk along with the reference.
   * Attributes may be used for fast filtering or can be used to sort along.
   *
   */
  attributes?: Maybe<ObsoleteProductBundlesAttributes>;
  /**
   * Returns body of the referenced entity in case its fetching was requested via entity_fetch constraint.
   *
   */
  referencedEntity?: Maybe<ProductBundle>;
  /**
   *          Returns primary key of the referenced (internal or external) entity.
   *
   */
  referencedPrimaryKey: Scalars['Int']['output'];
};

/**
 * Attributes allows defining set of data that are fetched in bulk along with the entity body.
 * Attributes may be used for fast filtering or can be used to sort along.
 *
 */
export type ObsoleteProductCategoriesAttributes = {
  __typename?: 'ObsoleteProductCategoriesAttributes';
  /**
   * Order of the entity among other products within the same category in the listing. Used for sorting entities
   * in ascending order.
   */
  orderInCategory: Scalars['Predecessor']['output'];
};

/**
 * This DTO contains information about single facet group and statistics of the facets that relates to it.
 *
 */
export type ObsoleteProductCategoriesFacetGroupStatistics = {
  __typename?: 'ObsoleteProductCategoriesFacetGroupStatistics';
  /**
   * Contains number of distinct entities in the response that possess any reference in this group.
   *
   */
  count: Scalars['Int']['output'];
  /**
   * Contains statistics of individual facets.
   *
   */
  facetStatistics: Array<ObsoleteProductCategoriesFacetStatistics>;
};


/**
 * This DTO contains information about single facet group and statistics of the facets that relates to it.
 *
 */
export type ObsoleteProductCategoriesFacetGroupStatisticsFacetStatisticsArgs = {
  filterBy?: InputMaybe<FilterContainerf812d9f8dc0269a4>;
  orderBy?: InputMaybe<Array<OrderContaineraff1014cee092cf7>>;
};

/**
 * This DTO contains information about single facet statistics of the entities that are present in the response.
 *
 */
export type ObsoleteProductCategoriesFacetStatistics = {
  __typename?: 'ObsoleteProductCategoriesFacetStatistics';
  /**
   * Contains number of distinct entities in the response that possess of this reference.
   *
   */
  count: Scalars['Int']['output'];
  /**
   * Contains referenced entity representing.
   *
   */
  facetEntity?: Maybe<Category>;
  /**
   * This field is not null only when this facet is not requested.
   * Contains projected impact on the current response if this facet is also requested in filtering constraints.
   *
   */
  impact?: Maybe<FacetRequestImpact>;
  /**
   * Contains TRUE if the facet was part of the query filtering constraints.
   *
   */
  requested: Scalars['Boolean']['output'];
};

/**
 * This DTO contains hierarchical structures of entities referenced by the entities required by the query. It copies
 * hierarchical structure of those entities and contains their identification or full body as well as information on
 * cardinality of referencing entities.
 *
 */
export type ObsoleteProductCategoriesHierarchy = {
  __typename?: 'ObsoleteProductCategoriesHierarchy';
  /**
   * Note: for multiple different children hierarchies, the use of field alias is encouraged here.
   *
   */
  children: Array<ObsoleteProductCategoriesLevelInfo>;
  /**
   * Note: for multiple different hierarchies beginning from a node, the use of field alias is encouraged here.
   *
   */
  fromNode: Array<ObsoleteProductCategoriesLevelInfo>;
  /**
   * Note: for multiple different hierarchies beginning from the root, the use of field alias is encouraged here.
   *
   */
  fromRoot: Array<ObsoleteProductCategoriesLevelInfo>;
  /**
   * Note: for multiple different parents hierarchies, the use of field alias is encouraged here.
   *
   */
  parents: Array<ObsoleteProductCategoriesLevelInfo>;
  /**
   * Note: for multiple different siblings hierarchies, the use of field alias is encouraged here.
   *
   */
  siblings: Array<ObsoleteProductCategoriesLevelInfo>;
};


/**
 * This DTO contains hierarchical structures of entities referenced by the entities required by the query. It copies
 * hierarchical structure of those entities and contains their identification or full body as well as information on
 * cardinality of referencing entities.
 *
 */
export type ObsoleteProductCategoriesHierarchyChildrenArgs = {
  statisticsBase?: InputMaybe<StatisticsBase>;
  stopAt?: InputMaybe<RequireContainerfafb7379fd98a57c>;
};


/**
 * This DTO contains hierarchical structures of entities referenced by the entities required by the query. It copies
 * hierarchical structure of those entities and contains their identification or full body as well as information on
 * cardinality of referencing entities.
 *
 */
export type ObsoleteProductCategoriesHierarchyFromNodeArgs = {
  node: WrapperObject9f96d343afba626d;
  statisticsBase?: InputMaybe<StatisticsBase>;
  stopAt?: InputMaybe<RequireContainerfafb7379fd98a57c>;
};


/**
 * This DTO contains hierarchical structures of entities referenced by the entities required by the query. It copies
 * hierarchical structure of those entities and contains their identification or full body as well as information on
 * cardinality of referencing entities.
 *
 */
export type ObsoleteProductCategoriesHierarchyFromRootArgs = {
  statisticsBase?: InputMaybe<StatisticsBase>;
  stopAt?: InputMaybe<RequireContainerfafb7379fd98a57c>;
};


/**
 * This DTO contains hierarchical structures of entities referenced by the entities required by the query. It copies
 * hierarchical structure of those entities and contains their identification or full body as well as information on
 * cardinality of referencing entities.
 *
 */
export type ObsoleteProductCategoriesHierarchyParentsArgs = {
  siblings?: InputMaybe<ObsoleteProductCategoriesParentsSiblingsSpecification>;
  statisticsBase?: InputMaybe<StatisticsBase>;
  stopAt?: InputMaybe<RequireContainerfafb7379fd98a57c>;
};


/**
 * This DTO contains hierarchical structures of entities referenced by the entities required by the query. It copies
 * hierarchical structure of those entities and contains their identification or full body as well as information on
 * cardinality of referencing entities.
 *
 */
export type ObsoleteProductCategoriesHierarchySiblingsArgs = {
  statisticsBase?: InputMaybe<StatisticsBase>;
  stopAt?: InputMaybe<RequireContainerfafb7379fd98a57c>;
};

/**
 * This DTO represents single hierarchical entity in the hierarchy tree. It contains identification of the entity,
 * the cardinality of queried entities that refer to it and information about children level.
 *
 */
export type ObsoleteProductCategoriesLevelInfo = {
  __typename?: 'ObsoleteProductCategoriesLevelInfo';
  /**
   * Contains number of hierarchical entities that are referring to this `entity` as its parent.
   * The count will respect behaviour settings and will not
   * count empty children in case `REMOVE_EMPTY` is
   * used for computation.
   *
   */
  childrenCount: Scalars['Int']['output'];
  /**
   * Hierarchical entity at position in tree represented by this object.
   *
   */
  entity: Category;
  /**
   * Level on which this node is placed from root. Root is always on level 1.
   *
   */
  level: Scalars['Int']['output'];
  /**
   * Contains the number of queried entities that refer directly to this {@link #entity} or to any of its children
   * entities.
   *
   */
  queriedEntityCount: Scalars['Int']['output'];
  /**
   * 			True in case the entity was filtered by `hierarchyWithin`.
   *
   */
  requested: Scalars['Boolean']['output'];
};

/**
 *             Specifies which siblings of parents will be returned and how.
 *
 */
export type ObsoleteProductCategoriesParentsSiblingsSpecification = {
  /**
   * Defines node at which the hierarchy will stop expanding.
   *
   */
  stopAt?: InputMaybe<RequireContainerfafb7379fd98a57c>;
};

/**
 * Contains set of categories the product is assigned to. Typically, there is exactly one assignment, but
 * product can be assigned to multiple ones.
 */
export type ObsoleteProductCategoriesReference = {
  __typename?: 'ObsoleteProductCategoriesReference';
  /**
   * Attributes allows defining set of data that are fetched in bulk along with the reference.
   * Attributes may be used for fast filtering or can be used to sort along.
   *
   */
  attributes?: Maybe<ObsoleteProductCategoriesAttributes>;
  /**
   * Returns body of the referenced entity in case its fetching was requested via entity_fetch constraint.
   *
   */
  referencedEntity?: Maybe<Category>;
  /**
   *          Returns primary key of the referenced (internal or external) entity.
   *
   */
  referencedPrimaryKey: Scalars['Int']['output'];
};

/**
 * Map of requested extra results besides actual found records.
 *
 */
export type ObsoleteProductExtraResults = {
  __typename?: 'ObsoleteProductExtraResults';
  attributeHistograms?: Maybe<Array<AttributeNamedHistogram>>;
  /**
   * Returns summary of all facets that match query filter excluding those inside `userFilter`.
   * Object contains information about facet groups and individual facets in them as well as appropriate statistics for them.
   *
   */
  facetSummary?: Maybe<ObsoleteProductFacetSummary>;
  /**
   * Returns object containing hierarchical structure of entities referenced by the entities required by the query. It copies
   * hierarchical structure of those entities and contains their identification or full body as well as information on
   * cardinality of referencing entities.
   *
   */
  hierarchy?: Maybe<ObsoleteProductHierarchy>;
  /**
   * Returns computed histogram for prices satisfactory to filter constraints.
   *
   * A histogram is an approximate representation of the distribution of numerical data. For detailed description please
   * see [WikiPedia](https://en.wikipedia.org/wiki/Histogram).
   * Histogram can be computed only for numeric based properties. It visualises which property values are more common
   * in the returned data set and which are rare. Bucket count will never exceed requested bucket count specified in
   * `requestedCount` but there
   * may be less of them if there is no enough data for computation. Bucket thresholds are specified heuristically so that
   * there are as few "empty buckets" as possible.
   *
   * - buckets are defined by their lower bounds (inclusive)
   * - the upper bound is the lower bound of the next bucket
   *
   */
  priceHistogram?: Maybe<Histogram>;
  /**
   * Returns object containing detailed information about query processing time and its decomposition to single operations.
   *
   */
  queryTelemetry: Scalars['Object']['output'];
};


/**
 * Map of requested extra results besides actual found records.
 *
 */
export type ObsoleteProductExtraResultsAttributeHistogramsArgs = {
  attributes: Array<Scalars['String']['input']>;
};


/**
 * Map of requested extra results besides actual found records.
 *
 */
export type ObsoleteProductExtraResultsQueryTelemetryArgs = {
  formatted?: InputMaybe<Scalars['Boolean']['input']>;
};

/**
 * This DTO allows returning summary of all facets that match query filter excluding those inside `userFilter`.
 * DTO contains information about facet groups and individual facets in them as well as appropriate statistics for them.
 *
 */
export type ObsoleteProductFacetSummary = {
  __typename?: 'ObsoleteProductFacetSummary';
  brand?: Maybe<ObsoleteProductBrandFacetGroupStatistics>;
  categories?: Maybe<ObsoleteProductCategoriesFacetGroupStatistics>;
  groups?: Maybe<ObsoleteProductGroupsFacetGroupStatistics>;
  parameterValues?: Maybe<Array<ObsoleteProductParameterValuesFacetGroupStatistics>>;
  tags?: Maybe<Array<ObsoleteProductTagsFacetGroupStatistics>>;
  variantParameters?: Maybe<ObsoleteProductVariantParametersFacetGroupStatistics>;
};


/**
 * This DTO allows returning summary of all facets that match query filter excluding those inside `userFilter`.
 * DTO contains information about facet groups and individual facets in them as well as appropriate statistics for them.
 *
 */
export type ObsoleteProductFacetSummaryParameterValuesArgs = {
  filterGroupBy?: InputMaybe<FilterContainer9151b3bab054ab55>;
  orderGroupBy?: InputMaybe<Array<OrderContainer670a07c21adba5c9>>;
};


/**
 * This DTO allows returning summary of all facets that match query filter excluding those inside `userFilter`.
 * DTO contains information about facet groups and individual facets in them as well as appropriate statistics for them.
 *
 */
export type ObsoleteProductFacetSummaryTagsArgs = {
  filterGroupBy?: InputMaybe<FilterContainer3a2a9890a875d4bd>;
  orderGroupBy?: InputMaybe<Array<OrderContainer2cb1816184dccd3f>>;
};

/**
 * Attributes allows defining set of data that are fetched in bulk along with the entity body.
 * Attributes may be used for fast filtering or can be used to sort along.
 *
 */
export type ObsoleteProductGroupsAttributes = {
  __typename?: 'ObsoleteProductGroupsAttributes';
  /**
   * Assignment validity contains a date-time period for which the product-category relation is considered to be
   * valid. Outside this period the product should not be visible in the group listing - it should behave like
   * this relation doesn't even exist.
   */
  assignmentValidity?: Maybe<Array<Scalars['DateTimeRange']['output']>>;
  /**
   * Order of the entity among other products within the same group in the listing. Used for sorting entities
   * in ascending order.
   */
  orderInGroup: Scalars['Predecessor']['output'];
};

/**
 * This DTO contains information about single facet group and statistics of the facets that relates to it.
 *
 */
export type ObsoleteProductGroupsFacetGroupStatistics = {
  __typename?: 'ObsoleteProductGroupsFacetGroupStatistics';
  /**
   * Contains number of distinct entities in the response that possess any reference in this group.
   *
   */
  count: Scalars['Int']['output'];
  /**
   * Contains statistics of individual facets.
   *
   */
  facetStatistics: Array<ObsoleteProductGroupsFacetStatistics>;
};


/**
 * This DTO contains information about single facet group and statistics of the facets that relates to it.
 *
 */
export type ObsoleteProductGroupsFacetGroupStatisticsFacetStatisticsArgs = {
  filterBy?: InputMaybe<FilterContainerc183dce568fe08c7>;
  orderBy?: InputMaybe<Array<OrderContainer21da021e14344cc3>>;
};

/**
 * This DTO contains information about single facet statistics of the entities that are present in the response.
 *
 */
export type ObsoleteProductGroupsFacetStatistics = {
  __typename?: 'ObsoleteProductGroupsFacetStatistics';
  /**
   * Contains number of distinct entities in the response that possess of this reference.
   *
   */
  count: Scalars['Int']['output'];
  /**
   * Contains referenced entity representing.
   *
   */
  facetEntity?: Maybe<Group>;
  /**
   * This field is not null only when this facet is not requested.
   * Contains projected impact on the current response if this facet is also requested in filtering constraints.
   *
   */
  impact?: Maybe<FacetRequestImpact>;
  /**
   * Contains TRUE if the facet was part of the query filtering constraints.
   *
   */
  requested: Scalars['Boolean']['output'];
};

/**
 * Contains set of groups the product is assigned to. Groups allow categorization of products outside
 * the shared category hierarchy.
 */
export type ObsoleteProductGroupsReference = {
  __typename?: 'ObsoleteProductGroupsReference';
  /**
   * Attributes allows defining set of data that are fetched in bulk along with the reference.
   * Attributes may be used for fast filtering or can be used to sort along.
   *
   */
  attributes?: Maybe<ObsoleteProductGroupsAttributes>;
  /**
   * Returns body of the referenced entity in case its fetching was requested via entity_fetch constraint.
   *
   */
  referencedEntity?: Maybe<Group>;
  /**
   *          Returns primary key of the referenced (internal or external) entity.
   *
   */
  referencedPrimaryKey: Scalars['Int']['output'];
};

/**
 * This DTO contains hierarchical structures of self hierarchical as well as entities referenced by the entities
 * required by the query. It copies hierarchical structure of those entities and contains their identification
 * or full body as well as information on cardinality of referencing entities.
 *
 */
export type ObsoleteProductHierarchy = {
  __typename?: 'ObsoleteProductHierarchy';
  /**
   * Computes statistics for referenced entity collection `Category` as queried.
   *
   */
  categories: ObsoleteProductCategoriesHierarchy;
};


/**
 * This DTO contains hierarchical structures of self hierarchical as well as entities referenced by the entities
 * required by the query. It copies hierarchical structure of those entities and contains their identification
 * or full body as well as information on cardinality of referencing entities.
 *
 */
export type ObsoleteProductHierarchyCategoriesArgs = {
  emptyHierarchicalEntityBehaviour?: InputMaybe<EmptyHierarchicalEntityBehaviour>;
  orderBy?: InputMaybe<Array<OrderContaineraff1014cee092cf7>>;
};

/**
 * Contains all possible local mutations to perform on entity `ObsoleteProduct`.
 *
 */
export type ObsoleteProductLocalMutationAggregate = {
  /**
   * Increments or decrements existing numeric value by specified delta (negative number produces decremental of
   * existing number, positive one incrementation).
   *
   * Allows to specify the number range that is tolerated for the value after delta application has been finished to
   * verify for example that number of items on stock doesn't go below zero.
   *
   */
  applyDeltaAttributeMutation?: InputMaybe<ApplyDeltaAttributeMutation>;
  /**
   * This mutation allows to create a reference in the entity.
   *
   */
  insertReferenceMutation?: InputMaybe<InsertReferenceMutation>;
  /**
   * This mutation allows to create / update / remove attribute of the reference.
   *
   */
  referenceAttributeMutation?: InputMaybe<ReferenceAttributeMutation>;
  /**
   * Remove associated data mutation will drop existing associatedData - ie.generates new version of the associated data with tombstone
   * on it.
   *
   */
  removeAssociatedDataMutation?: InputMaybe<RemoveAssociatedDataMutation>;
  /**
   * Remove attribute mutation will drop existing attribute - ie.generates new version of the attribute with tombstone
   * on it.
   *
   */
  removeAttributeMutation?: InputMaybe<RemoveAttributeMutation>;
  /**
   * This mutation allows to remove existing `price` of the entity.
   *
   */
  removePriceMutation?: InputMaybe<RemovePriceMutation>;
  /**
   * This mutation allows to remove group in the reference.
   *
   */
  removeReferenceGroupMutation?: InputMaybe<RemoveReferenceGroupMutation>;
  /**
   * This mutation allows to remove a reference from the entity.
   *
   */
  removeReferenceMutation?: InputMaybe<RemoveReferenceMutation>;
  /**
   * This mutation allows to set / remove `priceInnerRecordHandling` behaviour of the entity.
   *
   */
  setPriceInnerRecordHandlingMutation?: InputMaybe<SetPriceInnerRecordHandlingMutation>;
  /**
   * This mutation allows to create / update group of the reference.
   *
   */
  setReferenceGroupMutation?: InputMaybe<SetReferenceGroupMutation>;
  /**
   * Upsert associatedData mutation will either update existing associatedData or create new one.
   *
   */
  upsertAssociatedDataMutation?: InputMaybe<UpsertAssociatedDataMutation>;
  /**
   * Upsert attribute mutation will either update existing attribute or create new one.
   *
   */
  upsertAttributeMutation?: InputMaybe<UpsertAttributeMutation>;
  /**
   * This mutation allows to create / update `price` of the entity.
   *
   */
  upsertPriceMutation?: InputMaybe<UpsertPriceMutation>;
};

/**
 * Contains reference to the master product. The reference is always NULL except for products of type VARIANT.
 * These products have always the reference to their master product. Master product is usually displayed
 * in listings instead of the variants to avoid cluttering the listing with similar products.
 */
export type ObsoleteProductMasterReference = {
  __typename?: 'ObsoleteProductMasterReference';
  /**
   * Returns body of the referenced entity in case its fetching was requested via entity_fetch constraint.
   *
   */
  referencedEntity?: Maybe<Product>;
  /**
   *          Returns primary key of the referenced (internal or external) entity.
   *
   */
  referencedPrimaryKey: Scalars['Int']['output'];
};

/**
 * Attributes allows defining set of data that are fetched in bulk along with the entity body.
 * Attributes may be used for fast filtering or can be used to sort along.
 *
 */
export type ObsoleteProductParameterValuesAttributes = {
  __typename?: 'ObsoleteProductParameterValuesAttributes';
  /**
   * Contains TRUE value if the parameter represents a variant parametr value.
   * Variant parameters are specific "properties" of the product that can be used for differentiating products
   * in a comprehensible way. An example of parameter value might be a specific size - XXL, or color - blue,
   * or packaging - paperback.
   * Single parameter value can be assigned to multiple products.
   */
  variant: Scalars['Boolean']['output'];
};

/**
 * This DTO contains information about single facet group and statistics of the facets that relates to it.
 *
 */
export type ObsoleteProductParameterValuesFacetGroupStatistics = {
  __typename?: 'ObsoleteProductParameterValuesFacetGroupStatistics';
  /**
   * Contains number of distinct entities in the response that possess any reference in this group.
   *
   */
  count: Scalars['Int']['output'];
  /**
   * Contains statistics of individual facets.
   *
   */
  facetStatistics: Array<ObsoleteProductParameterValuesFacetStatistics>;
  /**
   * Contains referenced entity representing this group.
   *
   */
  groupEntity?: Maybe<Parameter>;
};


/**
 * This DTO contains information about single facet group and statistics of the facets that relates to it.
 *
 */
export type ObsoleteProductParameterValuesFacetGroupStatisticsFacetStatisticsArgs = {
  filterBy?: InputMaybe<FilterContainer744027555f798cbb>;
  orderBy?: InputMaybe<Array<OrderContainer5f9032f190cf0a74>>;
};

/**
 * This DTO contains information about single facet statistics of the entities that are present in the response.
 *
 */
export type ObsoleteProductParameterValuesFacetStatistics = {
  __typename?: 'ObsoleteProductParameterValuesFacetStatistics';
  /**
   * Contains number of distinct entities in the response that possess of this reference.
   *
   */
  count: Scalars['Int']['output'];
  /**
   * Contains referenced entity representing.
   *
   */
  facetEntity?: Maybe<ParameterValue>;
  /**
   * This field is not null only when this facet is not requested.
   * Contains projected impact on the current response if this facet is also requested in filtering constraints.
   *
   */
  impact?: Maybe<FacetRequestImpact>;
  /**
   * Contains TRUE if the facet was part of the query filtering constraints.
   *
   */
  requested: Scalars['Boolean']['output'];
};

/**
 * Contains reference to all parameter values that has been assigned to the product.
 * Parameter value is a specific "property" of the product that can be used for differentiating products
 * in a comprehensible way. An example of parameter value might be a material - aluminium, plastic,
 * or ports - USB, HDMI or whatever you can think of.
 * Single parameter value can be assigned to multiple products.
 */
export type ObsoleteProductParameterValuesReference = {
  __typename?: 'ObsoleteProductParameterValuesReference';
  /**
   * Attributes allows defining set of data that are fetched in bulk along with the reference.
   * Attributes may be used for fast filtering or can be used to sort along.
   *
   */
  attributes?: Maybe<ObsoleteProductParameterValuesAttributes>;
  /**
   * Returns body of the referenced entity in case its fetching was requested via entity_groupFetch constraint.
   *
   */
  groupEntity: Parameter;
  /**
   * Returns body of the referenced entity in case its fetching was requested via entity_fetch constraint.
   *
   */
  referencedEntity?: Maybe<ParameterValue>;
  /**
   *          Returns primary key of the referenced (internal or external) entity.
   *
   */
  referencedPrimaryKey: Scalars['Int']['output'];
};

/**
 * Attributes allows defining set of data that are fetched in bulk along with the entity body.
 * Attributes may be used for fast filtering or can be used to sort along.
 *
 */
export type ObsoleteProductProductSetItemsAttributes = {
  __typename?: 'ObsoleteProductProductSetItemsAttributes';
  /**
   * Order of the entity among other products within the same set product in the components listing. Used for
   * sorting entities in ascending order.
   */
  orderInSet: Scalars['Int']['output'];
  /** The quantity represents a quantity of this particular product in the product set. */
  quantityInSet: Scalars['BigDecimal']['output'];
};


/**
 * Attributes allows defining set of data that are fetched in bulk along with the entity body.
 * Attributes may be used for fast filtering or can be used to sort along.
 *
 */
export type ObsoleteProductProductSetItemsAttributesQuantityInSetArgs = {
  formatted?: InputMaybe<Scalars['Boolean']['input']>;
};

/** Contains reference to all set products this product set consists of. */
export type ObsoleteProductProductSetItemsReference = {
  __typename?: 'ObsoleteProductProductSetItemsReference';
  /**
   * Attributes allows defining set of data that are fetched in bulk along with the reference.
   * Attributes may be used for fast filtering or can be used to sort along.
   *
   */
  attributes?: Maybe<ObsoleteProductProductSetItemsAttributes>;
  /**
   * Returns body of the referenced entity in case its fetching was requested via entity_fetch constraint.
   *
   */
  referencedEntity?: Maybe<Product>;
  /**
   *          Returns primary key of the referenced (internal or external) entity.
   *
   */
  referencedPrimaryKey: Scalars['Int']['output'];
};

/**
 * Page of records according to pagination rules in input query.
 *
 */
export type ObsoleteProductRecordPage = {
  __typename?: 'ObsoleteProductRecordPage';
  /**
   * Actual found sorted page/strip of records.
   *
   */
  data: Array<ObsoleteProduct>;
  /**
   * Returns true if there are no data available.
   *
   */
  empty: Scalars['Boolean']['output'];
  /**
   * Returns true if current page/strip is the first page/strip in the result set.
   *
   */
  first: Scalars['Boolean']['output'];
  /**
   * Returns offset of the first record of current page with current pageSize.
   *
   */
  firstPageItemNumber: Scalars['Int']['output'];
  /**
   * Returns true if there is next page/strip available.
   *
   */
  hasNext: Scalars['Boolean']['output'];
  /**
   * Returns true if there is previous page/strip available.
   *
   */
  hasPrevious: Scalars['Boolean']['output'];
  /**
   * Returns true if current page/strip is the last page/strip in the result set.
   *
   */
  last: Scalars['Boolean']['output'];
  /**
   * Returns offset of the last record of current page with current pageSize.
   *
   */
  lastPageItemNumber: Scalars['Int']['output'];
  /**
   * Returns number of the last page that can be accessed with current number of records.
   * Returns -1 when offset/limit was used for creating paginated list.
   *
   */
  lastPageNumber: Scalars['Int']['output'];
  /**
   * Returns current page number (indexed from 1).
   *
   */
  pageNumber: Scalars['Int']['output'];
  /**
   * Returns number of records per single page.
   *
   */
  pageSize: Scalars['Int']['output'];
  /**
   * Returns true if there is only single page/strip available (i.e. total record count < record count on one page).
   *
   */
  singlePage: Scalars['Boolean']['output'];
  /**
   * Returns total number of records that are possible to fetch by paginating entire result stream.
   *
   */
  totalRecordCount: Scalars['Int']['output'];
};

/**
 * Strip of records according to offset and limit rules in input query.
 *
 */
export type ObsoleteProductRecordStrip = {
  __typename?: 'ObsoleteProductRecordStrip';
  /**
   * Actual found sorted page/strip of records.
   *
   */
  data: Array<ObsoleteProduct>;
  /**
   * Returns true if there are no data available.
   *
   */
  empty: Scalars['Boolean']['output'];
  /**
   * Returns true if current page/strip is the first page/strip in the result set.
   *
   */
  first: Scalars['Boolean']['output'];
  /**
   * Returns true if there is next page/strip available.
   *
   */
  hasNext: Scalars['Boolean']['output'];
  /**
   * Returns true if there is previous page/strip available.
   *
   */
  hasPrevious: Scalars['Boolean']['output'];
  /**
   * Returns true if current page/strip is the last page/strip in the result set.
   *
   */
  last: Scalars['Boolean']['output'];
  /**
   * Returns limit - i.e. maximal number of records that are requested after offset.
   *
   */
  limit: Scalars['Int']['output'];
  /**
   * Returns current offset (indexed from 0).
   *
   */
  offset: Scalars['Int']['output'];
  /**
   * Returns true if there is only single page/strip available (i.e. total record count < record count on one page).
   *
   */
  singlePage: Scalars['Boolean']['output'];
  /**
   * Returns total number of records that are possible to fetch by paginating entire result stream.
   *
   */
  totalRecordCount: Scalars['Int']['output'];
};

/**
 * Attributes allows defining set of data that are fetched in bulk along with the entity body.
 * Attributes may be used for fast filtering or can be used to sort along.
 *
 */
export type ObsoleteProductRelatedProductsAttributes = {
  __typename?: 'ObsoleteProductRelatedProductsAttributes';
  /**
   * Category describes the form of the relation between the related products. The common ones are `alternative
   * product` or `complementary product`.
   */
  category: Scalars['String']['output'];
  /**
   * Order of the entity among other variants within the same master product in the variant listing. Used for
   * sorting entities in ascending order.
   */
  orderInRelation: Scalars['Int']['output'];
};

/**
 * Contains set of product the product is related to. The type of the relation is further categorized by
 * `category` reference attribute. This reference allows interconnect products that are similar or
 * supplementary one to another.
 */
export type ObsoleteProductRelatedProductsReference = {
  __typename?: 'ObsoleteProductRelatedProductsReference';
  /**
   * Attributes allows defining set of data that are fetched in bulk along with the reference.
   * Attributes may be used for fast filtering or can be used to sort along.
   *
   */
  attributes?: Maybe<ObsoleteProductRelatedProductsAttributes>;
  /**
   * Returns body of the referenced entity in case its fetching was requested via entity_fetch constraint.
   *
   */
  referencedEntity?: Maybe<Product>;
  /**
   *          Returns primary key of the referenced (internal or external) entity.
   *
   */
  referencedPrimaryKey: Scalars['Int']['output'];
};

/**
 * Evita response contains all results to single query. Results are divided to two parts - main results returned by
 * `recordPage`/`recordStrip` and set of extra results retrieved by `extraResults`.
 *
 */
export type ObsoleteProductResponse = {
  __typename?: 'ObsoleteProductResponse';
  /**
   * Returns map of requested extra results besides actual found records.
   *
   */
  extraResults: ObsoleteProductExtraResults;
  /**
   * Returns page of records according to pagination rules in input query.
   * Either `page` or `strip` can be used, not both.
   *
   */
  recordPage?: Maybe<ObsoleteProductRecordPage>;
  /**
   * Returns strip of records according to pagination rules in input query.
   * Either `page` or `strip` can be used, not both.
   *
   */
  recordStrip?: Maybe<ObsoleteProductRecordStrip>;
};


/**
 * Evita response contains all results to single query. Results are divided to two parts - main results returned by
 * `recordPage`/`recordStrip` and set of extra results retrieved by `extraResults`.
 *
 */
export type ObsoleteProductResponseRecordPageArgs = {
  number?: InputMaybe<Scalars['Int']['input']>;
  size?: InputMaybe<Scalars['Int']['input']>;
};


/**
 * Evita response contains all results to single query. Results are divided to two parts - main results returned by
 * `recordPage`/`recordStrip` and set of extra results retrieved by `extraResults`.
 *
 */
export type ObsoleteProductResponseRecordStripArgs = {
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
};

/**
 * It contains references to all stocks for which the product is visible (because the visibility of the product depends on the stock quantity).
 * The product is then visible to the customer according to the stock they have access to.
 */
export type ObsoleteProductStockVisibilitiesReference = {
  __typename?: 'ObsoleteProductStockVisibilitiesReference';
  /**
   * Returns body of the referenced entity in case its fetching was requested via entity_groupFetch constraint.
   *
   */
  groupEntity: EntityReference;
  /**
   * Returns body of the referenced entity in case its fetching was requested via entity_fetch constraint.
   *
   */
  referencedEntity?: Maybe<Stock>;
  /**
   *          Returns primary key of the referenced (internal or external) entity.
   *
   */
  referencedPrimaryKey: Scalars['Int']['output'];
};

/**
 * This DTO contains information about single facet group and statistics of the facets that relates to it.
 *
 */
export type ObsoleteProductTagsFacetGroupStatistics = {
  __typename?: 'ObsoleteProductTagsFacetGroupStatistics';
  /**
   * Contains number of distinct entities in the response that possess any reference in this group.
   *
   */
  count: Scalars['Int']['output'];
  /**
   * Contains statistics of individual facets.
   *
   */
  facetStatistics: Array<ObsoleteProductTagsFacetStatistics>;
  /**
   * Contains referenced entity representing this group.
   *
   */
  groupEntity?: Maybe<EntityReference>;
};


/**
 * This DTO contains information about single facet group and statistics of the facets that relates to it.
 *
 */
export type ObsoleteProductTagsFacetGroupStatisticsFacetStatisticsArgs = {
  filterBy?: InputMaybe<FilterContainer967c71ead6465215>;
  orderBy?: InputMaybe<Array<OrderContainer60ec14e01e238dfe>>;
};

/**
 * This DTO contains information about single facet statistics of the entities that are present in the response.
 *
 */
export type ObsoleteProductTagsFacetStatistics = {
  __typename?: 'ObsoleteProductTagsFacetStatistics';
  /**
   * Contains number of distinct entities in the response that possess of this reference.
   *
   */
  count: Scalars['Int']['output'];
  /**
   * Contains referenced entity representing.
   *
   */
  facetEntity?: Maybe<Tag>;
  /**
   * This field is not null only when this facet is not requested.
   * Contains projected impact on the current response if this facet is also requested in filtering constraints.
   *
   */
  impact?: Maybe<FacetRequestImpact>;
  /**
   * Contains TRUE if the facet was part of the query filtering constraints.
   *
   */
  requested: Scalars['Boolean']['output'];
};

/**
 * Tags allow non-systematic categorization (cross-structure tagging) of the entities. Tags are often more
 * digestible from the user's point of view. Tags are maintained in Edee.ONE CMS and here we just link them.
 */
export type ObsoleteProductTagsReference = {
  __typename?: 'ObsoleteProductTagsReference';
  /**
   * Returns body of the referenced entity in case its fetching was requested via entity_groupFetch constraint.
   *
   */
  groupEntity: EntityReference;
  /**
   * Returns body of the referenced entity in case its fetching was requested via entity_fetch constraint.
   *
   */
  referencedEntity?: Maybe<Tag>;
  /**
   *          Returns primary key of the referenced (internal or external) entity.
   *
   */
  referencedPrimaryKey: Scalars['Int']['output'];
};

/**
 * Attributes allows defining set of data that are fetched in bulk along with the entity body.
 * Attributes may be used for fast filtering or can be used to sort along.
 *
 */
export type ObsoleteProductVariantParametersAttributes = {
  __typename?: 'ObsoleteProductVariantParametersAttributes';
  /**
   * Order of the entity among other parameter within the same master product in the listing. Used for sorting
   * parameters in ascending order.
   */
  orderInMaster: Scalars['Int']['output'];
};

/**
 * This DTO contains information about single facet group and statistics of the facets that relates to it.
 *
 */
export type ObsoleteProductVariantParametersFacetGroupStatistics = {
  __typename?: 'ObsoleteProductVariantParametersFacetGroupStatistics';
  /**
   * Contains number of distinct entities in the response that possess any reference in this group.
   *
   */
  count: Scalars['Int']['output'];
  /**
   * Contains statistics of individual facets.
   *
   */
  facetStatistics: Array<ObsoleteProductVariantParametersFacetStatistics>;
};


/**
 * This DTO contains information about single facet group and statistics of the facets that relates to it.
 *
 */
export type ObsoleteProductVariantParametersFacetGroupStatisticsFacetStatisticsArgs = {
  filterBy?: InputMaybe<FilterContainer9151b3bab054ab55>;
  orderBy?: InputMaybe<Array<OrderContainer670a07c21adba5c9>>;
};

/**
 * This DTO contains information about single facet statistics of the entities that are present in the response.
 *
 */
export type ObsoleteProductVariantParametersFacetStatistics = {
  __typename?: 'ObsoleteProductVariantParametersFacetStatistics';
  /**
   * Contains number of distinct entities in the response that possess of this reference.
   *
   */
  count: Scalars['Int']['output'];
  /**
   * Contains referenced entity representing.
   *
   */
  facetEntity?: Maybe<Parameter>;
  /**
   * This field is not null only when this facet is not requested.
   * Contains projected impact on the current response if this facet is also requested in filtering constraints.
   *
   */
  impact?: Maybe<FacetRequestImpact>;
  /**
   * Contains TRUE if the facet was part of the query filtering constraints.
   *
   */
  requested: Scalars['Boolean']['output'];
};

/**
 * Property is present only in products of MASTER subtype - e.g. master products.
 * Contains list of all parameters that distinguish variants of this particular master product.
 */
export type ObsoleteProductVariantParametersReference = {
  __typename?: 'ObsoleteProductVariantParametersReference';
  /**
   * Attributes allows defining set of data that are fetched in bulk along with the reference.
   * Attributes may be used for fast filtering or can be used to sort along.
   *
   */
  attributes?: Maybe<ObsoleteProductVariantParametersAttributes>;
  /**
   * Returns body of the referenced entity in case its fetching was requested via entity_fetch constraint.
   *
   */
  referencedEntity?: Maybe<Parameter>;
  /**
   *          Returns primary key of the referenced (internal or external) entity.
   *
   */
  referencedPrimaryKey: Scalars['Int']['output'];
};

export type OrderContainer2cb1816184dccd3f = {
  /** The constraint sorts returned entities by ordering of the values specified in arguments. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-primary-key-order) */
  entityPrimaryKeyExact?: InputMaybe<Array<Scalars['Int']['input']>>;
  /** The constraint sorts returned entities by ordering of the values specified `entityPrimaryKeysInSet` in filter. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-primary-key-order-used-in-filter) */
  entityPrimaryKeyInFilter?: InputMaybe<Scalars['Boolean']['input']>;
  /** The constraint sorts returned entities by primary key in specific order. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/comparable#primary-key-natural) */
  entityPrimaryKeyNatural?: InputMaybe<OrderDirection>;
  /** The constraint sorts returned entities randomly. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/random#random) */
  random?: InputMaybe<Scalars['Boolean']['input']>;
};

export type OrderContainer2e85f5ede7aaa97 = {
  /** The constraint sorts returned references by applying ordering constraint on referenced entity group. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/reference#entity-group-property) */
  entityGroupProperty?: InputMaybe<Array<OrderContainere47e56ee5b3ec965>>;
  /** The constraint sorts returned entities by ordering of the values specified in arguments. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-primary-key-order) */
  entityPrimaryKeyExact?: InputMaybe<Array<Scalars['Int']['input']>>;
  /** The constraint sorts returned entities by primary key in specific order. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/comparable#primary-key-natural) */
  entityPrimaryKeyNatural?: InputMaybe<OrderDirection>;
  /** The constraint sorts returned references by applying ordering constraint on referenced entity. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/reference#entity-property) */
  entityProperty?: InputMaybe<Array<OrderContainere47e56ee5b3ec965>>;
  /** The constraint sorts returned entities randomly. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/random#random) */
  random?: InputMaybe<Scalars['Boolean']['input']>;
};

export type OrderContainer3fb06b7b13473bcc = {
  /** The constraint sorts returned references by applying ordering constraint on referenced entity group. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/reference#entity-group-property) */
  entityGroupProperty?: InputMaybe<Array<OrderContainere47e56ee5b3ec965>>;
  /** The constraint sorts returned entities by ordering of the values specified in arguments. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-primary-key-order) */
  entityPrimaryKeyExact?: InputMaybe<Array<Scalars['Int']['input']>>;
  /** The constraint sorts returned entities by primary key in specific order. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/comparable#primary-key-natural) */
  entityPrimaryKeyNatural?: InputMaybe<OrderDirection>;
  /** The constraint sorts returned references by applying ordering constraint on referenced entity. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/reference#entity-property) */
  entityProperty?: InputMaybe<Array<OrderContainere47e56ee5b3ec965>>;
  /** The constraint sorts returned entities randomly. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/random#random) */
  random?: InputMaybe<Scalars['Boolean']['input']>;
};

export type OrderContainer4c886036c02c0f05 = {
  /** The constraint sorts returned references by applying ordering constraint on referenced entity group. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/reference#entity-group-property) */
  entityGroupProperty?: InputMaybe<Array<OrderContainerc1398334fa8f22a>>;
  /** The constraint sorts returned entities by ordering of the values specified in arguments. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-primary-key-order) */
  entityPrimaryKeyExact?: InputMaybe<Array<Scalars['Int']['input']>>;
  /** The constraint sorts returned entities by primary key in specific order. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/comparable#primary-key-natural) */
  entityPrimaryKeyNatural?: InputMaybe<OrderDirection>;
  /** The constraint sorts returned references by applying ordering constraint on referenced entity. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/reference#entity-property) */
  entityProperty?: InputMaybe<Array<OrderContainerc1398334fa8f22a>>;
  /** The constraint sorts returned entities randomly. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/random#random) */
  random?: InputMaybe<Scalars['Boolean']['input']>;
};

export type OrderContainer5bd124d4214589b2 = {
  /** The constraint sorts returned entities by natural ordering of the values in the specified attribute. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/comparable#attribute-natural) */
  attributeOrderInSetNatural?: InputMaybe<OrderDirection>;
  /** The constraint sorts returned entities by ordering of the values specified in arguments matching the entity attribute of specified name. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-attribute-value-order) */
  attributeOrderInSetSetExact?: InputMaybe<Array<Scalars['Int']['input']>>;
  /** The constraint sorts returned references by applying ordering constraint on referenced entity group. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/reference#entity-group-property) */
  entityGroupProperty?: InputMaybe<Array<OrderContainer90fb661fce37688>>;
  /** The constraint sorts returned entities by ordering of the values specified in arguments. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-primary-key-order) */
  entityPrimaryKeyExact?: InputMaybe<Array<Scalars['Int']['input']>>;
  /** The constraint sorts returned entities by primary key in specific order. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/comparable#primary-key-natural) */
  entityPrimaryKeyNatural?: InputMaybe<OrderDirection>;
  /** The constraint sorts returned references by applying ordering constraint on referenced entity. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/reference#entity-property) */
  entityProperty?: InputMaybe<Array<OrderContainer90fb661fce37688>>;
  /** The constraint sorts returned entities randomly. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/random#random) */
  random?: InputMaybe<Scalars['Boolean']['input']>;
};

export type OrderContainer5e937eaca1b948e1 = {
  /** The constraint sorts returned references by applying ordering constraint on referenced entity group. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/reference#entity-group-property) */
  entityGroupProperty?: InputMaybe<Array<OrderContainer90fb661fce37688>>;
  /** The constraint sorts returned entities by ordering of the values specified in arguments. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-primary-key-order) */
  entityPrimaryKeyExact?: InputMaybe<Array<Scalars['Int']['input']>>;
  /** The constraint sorts returned entities by primary key in specific order. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/comparable#primary-key-natural) */
  entityPrimaryKeyNatural?: InputMaybe<OrderDirection>;
  /** The constraint sorts returned references by applying ordering constraint on referenced entity. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/reference#entity-property) */
  entityProperty?: InputMaybe<Array<OrderContainer90fb661fce37688>>;
  /** The constraint sorts returned entities randomly. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/random#random) */
  random?: InputMaybe<Scalars['Boolean']['input']>;
};

export type OrderContainer5f9032f190cf0a74 = {
  /** The constraint sorts returned entities by natural ordering of the values in the specified attribute. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/comparable#attribute-natural) */
  attributeChangedNatural?: InputMaybe<OrderDirection>;
  /** The constraint sorts returned entities by ordering of the values specified in arguments matching the entity attribute of specified name. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-attribute-value-order) */
  attributeChangedSetExact?: InputMaybe<Array<Scalars['OffsetDateTime']['input']>>;
  /** The constraint sorts returned entities by ordering of the values specified `attributeInSet` in filter sharing the same attribute name. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-attribute-value-order-used-in-filter) */
  attributeChangedSetInFilter?: InputMaybe<Scalars['Boolean']['input']>;
  /** The constraint sorts returned entities by natural ordering of the values in the specified attribute. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/comparable#attribute-natural) */
  attributeCodeNatural?: InputMaybe<OrderDirection>;
  /** The constraint sorts returned entities by ordering of the values specified in arguments matching the entity attribute of specified name. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-attribute-value-order) */
  attributeCodeSetExact?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint sorts returned entities by ordering of the values specified `attributeInSet` in filter sharing the same attribute name. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-attribute-value-order-used-in-filter) */
  attributeCodeSetInFilter?: InputMaybe<Scalars['Boolean']['input']>;
  /** The constraint sorts returned entities by natural ordering of the values in the specified attribute. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/comparable#attribute-natural) */
  attributeNameNatural?: InputMaybe<OrderDirection>;
  /** The constraint sorts returned entities by ordering of the values specified in arguments matching the entity attribute of specified name. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-attribute-value-order) */
  attributeNameSetExact?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint sorts returned entities by ordering of the values specified `attributeInSet` in filter sharing the same attribute name. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-attribute-value-order-used-in-filter) */
  attributeNameSetInFilter?: InputMaybe<Scalars['Boolean']['input']>;
  /** The constraint sorts returned entities by natural ordering of the values in the specified attribute. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/comparable#attribute-natural) */
  attributeOrderNatural?: InputMaybe<OrderDirection>;
  /** The constraint sorts returned entities by ordering of the values specified in arguments matching the entity attribute of specified name. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-attribute-value-order) */
  attributeOrderSetExact?: InputMaybe<Array<Scalars['Predecessor']['input']>>;
  /** The constraint sorts returned entities by ordering of the values specified `attributeInSet` in filter sharing the same attribute name. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-attribute-value-order-used-in-filter) */
  attributeOrderSetInFilter?: InputMaybe<Scalars['Boolean']['input']>;
  /** The constraint sorts returned entities by natural ordering of the values in the specified attribute. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/comparable#attribute-natural) */
  attributePublishedNatural?: InputMaybe<OrderDirection>;
  /** The constraint sorts returned entities by ordering of the values specified in arguments matching the entity attribute of specified name. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-attribute-value-order) */
  attributePublishedSetExact?: InputMaybe<Array<Scalars['OffsetDateTime']['input']>>;
  /** The constraint sorts returned entities by ordering of the values specified `attributeInSet` in filter sharing the same attribute name. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-attribute-value-order-used-in-filter) */
  attributePublishedSetInFilter?: InputMaybe<Scalars['Boolean']['input']>;
  /** The constraint sorts returned entities by ordering of the values specified in arguments. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-primary-key-order) */
  entityPrimaryKeyExact?: InputMaybe<Array<Scalars['Int']['input']>>;
  /** The constraint sorts returned entities by ordering of the values specified `entityPrimaryKeysInSet` in filter. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-primary-key-order-used-in-filter) */
  entityPrimaryKeyInFilter?: InputMaybe<Scalars['Boolean']['input']>;
  /** The constraint sorts returned entities by primary key in specific order. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/comparable#primary-key-natural) */
  entityPrimaryKeyNatural?: InputMaybe<OrderDirection>;
  /** The constraint sorts returned entities randomly. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/random#random) */
  random?: InputMaybe<Scalars['Boolean']['input']>;
  /** The constraint sorts returned entities or references by attribute specified on its reference in natural order. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/reference#reference-property) */
  referenceParameterProperty?: InputMaybe<Array<OrderContainerf2012395f0e8eb6c>>;
  /** The constraint sorts returned entities or references by attribute specified on its reference in natural order. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/reference#reference-property) */
  referenceSyntheticParameterProperty?: InputMaybe<Array<OrderContainer948579655a8280e9>>;
};

export type OrderContainer7cfc8f23b1dd770 = {
  /** The constraint sorts returned references by applying ordering constraint on referenced entity group. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/reference#entity-group-property) */
  entityGroupProperty?: InputMaybe<Array<OrderContainer90fb661fce37688>>;
  /** The constraint sorts returned entities by ordering of the values specified in arguments. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-primary-key-order) */
  entityPrimaryKeyExact?: InputMaybe<Array<Scalars['Int']['input']>>;
  /** The constraint sorts returned entities by primary key in specific order. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/comparable#primary-key-natural) */
  entityPrimaryKeyNatural?: InputMaybe<OrderDirection>;
  /** The constraint sorts returned references by applying ordering constraint on referenced entity. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/reference#entity-property) */
  entityProperty?: InputMaybe<Array<OrderContainer90fb661fce37688>>;
  /** The constraint sorts returned entities randomly. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/random#random) */
  random?: InputMaybe<Scalars['Boolean']['input']>;
};

export type OrderContainer7d9ecf1c05051af6 = {
  /** The constraint sorts returned references by applying ordering constraint on referenced entity group. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/reference#entity-group-property) */
  entityGroupProperty?: InputMaybe<Array<OrderContainer60ec14e01e238dfe>>;
  /** The constraint sorts returned entities by ordering of the values specified in arguments. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-primary-key-order) */
  entityPrimaryKeyExact?: InputMaybe<Array<Scalars['Int']['input']>>;
  /** The constraint sorts returned entities by primary key in specific order. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/comparable#primary-key-natural) */
  entityPrimaryKeyNatural?: InputMaybe<OrderDirection>;
  /** The constraint sorts returned references by applying ordering constraint on referenced entity. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/reference#entity-property) */
  entityProperty?: InputMaybe<Array<OrderContainer60ec14e01e238dfe>>;
  /** The constraint sorts returned entities randomly. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/random#random) */
  random?: InputMaybe<Scalars['Boolean']['input']>;
};

export type OrderContainer8d36138f1971f1bb = {
  /** The constraint sorts returned references by applying ordering constraint on referenced entity group. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/reference#entity-group-property) */
  entityGroupProperty?: InputMaybe<Array<OrderContainer18970ca942385a0b>>;
  /** The constraint sorts returned entities by ordering of the values specified in arguments. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-primary-key-order) */
  entityPrimaryKeyExact?: InputMaybe<Array<Scalars['Int']['input']>>;
  /** The constraint sorts returned entities by primary key in specific order. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/comparable#primary-key-natural) */
  entityPrimaryKeyNatural?: InputMaybe<OrderDirection>;
  /** The constraint sorts returned references by applying ordering constraint on referenced entity. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/reference#entity-property) */
  entityProperty?: InputMaybe<Array<OrderContainer18970ca942385a0b>>;
  /** The constraint sorts returned entities randomly. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/random#random) */
  random?: InputMaybe<Scalars['Boolean']['input']>;
};

export type OrderContainer9d8bf58d6da69dd1 = {
  /** The constraint sorts returned references by applying ordering constraint on referenced entity group. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/reference#entity-group-property) */
  entityGroupProperty?: InputMaybe<Array<OrderContainer5f9032f190cf0a74>>;
  /** The constraint sorts returned entities by ordering of the values specified in arguments. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-primary-key-order) */
  entityPrimaryKeyExact?: InputMaybe<Array<Scalars['Int']['input']>>;
  /** The constraint sorts returned entities by primary key in specific order. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/comparable#primary-key-natural) */
  entityPrimaryKeyNatural?: InputMaybe<OrderDirection>;
  /** The constraint sorts returned references by applying ordering constraint on referenced entity. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/reference#entity-property) */
  entityProperty?: InputMaybe<Array<OrderContainer5f9032f190cf0a74>>;
  /** The constraint sorts returned entities randomly. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/random#random) */
  random?: InputMaybe<Scalars['Boolean']['input']>;
};

export type OrderContainer16a68379c1882114 = {
  /** The constraint sorts returned entities by natural ordering of the values in the specified attribute. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/comparable#attribute-natural) */
  attributeOrderInCategoryNatural?: InputMaybe<OrderDirection>;
  /** The constraint sorts returned entities by ordering of the values specified in arguments matching the entity attribute of specified name. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-attribute-value-order) */
  attributeOrderInCategorySetExact?: InputMaybe<Array<Scalars['Predecessor']['input']>>;
  /** The constraint sorts returned references by applying ordering constraint on referenced entity group. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/reference#entity-group-property) */
  entityGroupProperty?: InputMaybe<Array<OrderContaineraff1014cee092cf7>>;
  /** The constraint sorts returned entities by ordering of the values specified in arguments. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-primary-key-order) */
  entityPrimaryKeyExact?: InputMaybe<Array<Scalars['Int']['input']>>;
  /** The constraint sorts returned entities by primary key in specific order. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/comparable#primary-key-natural) */
  entityPrimaryKeyNatural?: InputMaybe<OrderDirection>;
  /** The constraint sorts returned references by applying ordering constraint on referenced entity. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/reference#entity-property) */
  entityProperty?: InputMaybe<Array<OrderContaineraff1014cee092cf7>>;
  /** The constraint sorts returned entities randomly. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/random#random) */
  random?: InputMaybe<Scalars['Boolean']['input']>;
};

export type OrderContainer21bc50d34c2809bd = {
  /** The constraint sorts returned entities by natural ordering of the values in the specified attribute. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/comparable#attribute-natural) */
  attributeOrderInRelationNatural?: InputMaybe<OrderDirection>;
  /** The constraint sorts returned entities by ordering of the values specified in arguments matching the entity attribute of specified name. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-attribute-value-order) */
  attributeOrderInRelationSetExact?: InputMaybe<Array<Scalars['Int']['input']>>;
  /** The constraint sorts returned references by applying ordering constraint on referenced entity group. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/reference#entity-group-property) */
  entityGroupProperty?: InputMaybe<Array<OrderContainer90fb661fce37688>>;
  /** The constraint sorts returned entities by ordering of the values specified in arguments. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-primary-key-order) */
  entityPrimaryKeyExact?: InputMaybe<Array<Scalars['Int']['input']>>;
  /** The constraint sorts returned entities by primary key in specific order. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/comparable#primary-key-natural) */
  entityPrimaryKeyNatural?: InputMaybe<OrderDirection>;
  /** The constraint sorts returned references by applying ordering constraint on referenced entity. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/reference#entity-property) */
  entityProperty?: InputMaybe<Array<OrderContainer90fb661fce37688>>;
  /** The constraint sorts returned entities randomly. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/random#random) */
  random?: InputMaybe<Scalars['Boolean']['input']>;
};

export type OrderContainer21da021e14344cc3 = {
  /** The constraint sorts returned entities by natural ordering of the values in the specified attribute. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/comparable#attribute-natural) */
  attributeChangedNatural?: InputMaybe<OrderDirection>;
  /** The constraint sorts returned entities by ordering of the values specified in arguments matching the entity attribute of specified name. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-attribute-value-order) */
  attributeChangedSetExact?: InputMaybe<Array<Scalars['OffsetDateTime']['input']>>;
  /** The constraint sorts returned entities by ordering of the values specified `attributeInSet` in filter sharing the same attribute name. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-attribute-value-order-used-in-filter) */
  attributeChangedSetInFilter?: InputMaybe<Scalars['Boolean']['input']>;
  /** The constraint sorts returned entities by natural ordering of the values in the specified attribute. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/comparable#attribute-natural) */
  attributeCodeNatural?: InputMaybe<OrderDirection>;
  /** The constraint sorts returned entities by ordering of the values specified in arguments matching the entity attribute of specified name. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-attribute-value-order) */
  attributeCodeSetExact?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint sorts returned entities by ordering of the values specified `attributeInSet` in filter sharing the same attribute name. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-attribute-value-order-used-in-filter) */
  attributeCodeSetInFilter?: InputMaybe<Scalars['Boolean']['input']>;
  /** The constraint sorts returned entities by natural ordering of the values in the specified attribute. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/comparable#attribute-natural) */
  attributeNameNatural?: InputMaybe<OrderDirection>;
  /** The constraint sorts returned entities by ordering of the values specified in arguments matching the entity attribute of specified name. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-attribute-value-order) */
  attributeNameSetExact?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint sorts returned entities by ordering of the values specified `attributeInSet` in filter sharing the same attribute name. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-attribute-value-order-used-in-filter) */
  attributeNameSetInFilter?: InputMaybe<Scalars['Boolean']['input']>;
  /** The constraint sorts returned entities by natural ordering of the values in the specified attribute. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/comparable#attribute-natural) */
  attributeOrderNatural?: InputMaybe<OrderDirection>;
  /** The constraint sorts returned entities by ordering of the values specified in arguments matching the entity attribute of specified name. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-attribute-value-order) */
  attributeOrderSetExact?: InputMaybe<Array<Scalars['Predecessor']['input']>>;
  /** The constraint sorts returned entities by ordering of the values specified `attributeInSet` in filter sharing the same attribute name. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-attribute-value-order-used-in-filter) */
  attributeOrderSetInFilter?: InputMaybe<Scalars['Boolean']['input']>;
  /** The constraint sorts returned entities by natural ordering of the values in the specified attribute. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/comparable#attribute-natural) */
  attributePublishedNatural?: InputMaybe<OrderDirection>;
  /** The constraint sorts returned entities by ordering of the values specified in arguments matching the entity attribute of specified name. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-attribute-value-order) */
  attributePublishedSetExact?: InputMaybe<Array<Scalars['OffsetDateTime']['input']>>;
  /** The constraint sorts returned entities by ordering of the values specified `attributeInSet` in filter sharing the same attribute name. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-attribute-value-order-used-in-filter) */
  attributePublishedSetInFilter?: InputMaybe<Scalars['Boolean']['input']>;
  /** The constraint sorts returned entities by ordering of the values specified in arguments. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-primary-key-order) */
  entityPrimaryKeyExact?: InputMaybe<Array<Scalars['Int']['input']>>;
  /** The constraint sorts returned entities by ordering of the values specified `entityPrimaryKeysInSet` in filter. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-primary-key-order-used-in-filter) */
  entityPrimaryKeyInFilter?: InputMaybe<Scalars['Boolean']['input']>;
  /** The constraint sorts returned entities by primary key in specific order. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/comparable#primary-key-natural) */
  entityPrimaryKeyNatural?: InputMaybe<OrderDirection>;
  /** The constraint sorts returned entities randomly. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/random#random) */
  random?: InputMaybe<Scalars['Boolean']['input']>;
  /** The constraint sorts returned entities or references by attribute specified on its reference in natural order. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/reference#reference-property) */
  referenceTagsProperty?: InputMaybe<Array<OrderContaineraea31df67abb5839>>;
};

export type OrderContainer60ec14e01e238dfe = {
  /** The constraint sorts returned entities by natural ordering of the values in the specified attribute. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/comparable#attribute-natural) */
  attributeChangedNatural?: InputMaybe<OrderDirection>;
  /** The constraint sorts returned entities by ordering of the values specified in arguments matching the entity attribute of specified name. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-attribute-value-order) */
  attributeChangedSetExact?: InputMaybe<Array<Scalars['OffsetDateTime']['input']>>;
  /** The constraint sorts returned entities by ordering of the values specified `attributeInSet` in filter sharing the same attribute name. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-attribute-value-order-used-in-filter) */
  attributeChangedSetInFilter?: InputMaybe<Scalars['Boolean']['input']>;
  /** The constraint sorts returned entities by natural ordering of the values in the specified attribute. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/comparable#attribute-natural) */
  attributeCodeNatural?: InputMaybe<OrderDirection>;
  /** The constraint sorts returned entities by ordering of the values specified in arguments matching the entity attribute of specified name. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-attribute-value-order) */
  attributeCodeSetExact?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint sorts returned entities by ordering of the values specified `attributeInSet` in filter sharing the same attribute name. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-attribute-value-order-used-in-filter) */
  attributeCodeSetInFilter?: InputMaybe<Scalars['Boolean']['input']>;
  /** The constraint sorts returned entities by natural ordering of the values in the specified attribute. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/comparable#attribute-natural) */
  attributeNameNatural?: InputMaybe<OrderDirection>;
  /** The constraint sorts returned entities by ordering of the values specified in arguments matching the entity attribute of specified name. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-attribute-value-order) */
  attributeNameSetExact?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint sorts returned entities by ordering of the values specified `attributeInSet` in filter sharing the same attribute name. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-attribute-value-order-used-in-filter) */
  attributeNameSetInFilter?: InputMaybe<Scalars['Boolean']['input']>;
  /** The constraint sorts returned entities by natural ordering of the values in the specified attribute. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/comparable#attribute-natural) */
  attributePublishedNatural?: InputMaybe<OrderDirection>;
  /** The constraint sorts returned entities by ordering of the values specified in arguments matching the entity attribute of specified name. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-attribute-value-order) */
  attributePublishedSetExact?: InputMaybe<Array<Scalars['OffsetDateTime']['input']>>;
  /** The constraint sorts returned entities by ordering of the values specified `attributeInSet` in filter sharing the same attribute name. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-attribute-value-order-used-in-filter) */
  attributePublishedSetInFilter?: InputMaybe<Scalars['Boolean']['input']>;
  /** The constraint sorts returned entities by ordering of the values specified in arguments. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-primary-key-order) */
  entityPrimaryKeyExact?: InputMaybe<Array<Scalars['Int']['input']>>;
  /** The constraint sorts returned entities by ordering of the values specified `entityPrimaryKeysInSet` in filter. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-primary-key-order-used-in-filter) */
  entityPrimaryKeyInFilter?: InputMaybe<Scalars['Boolean']['input']>;
  /** The constraint sorts returned entities by primary key in specific order. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/comparable#primary-key-natural) */
  entityPrimaryKeyNatural?: InputMaybe<OrderDirection>;
  /** The constraint sorts returned entities randomly. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/random#random) */
  random?: InputMaybe<Scalars['Boolean']['input']>;
  /** The constraint sorts returned entities or references by attribute specified on its reference in natural order. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/reference#reference-property) */
  referenceCategoriesProperty?: InputMaybe<Array<OrderContainera6e9ec426f250857>>;
};

export type OrderContainer90fb661fce37688 = {
  /** The constraint sorts returned entities by natural ordering of the values in the specified attribute. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/comparable#attribute-natural) */
  attributeCatalogNumberNatural?: InputMaybe<OrderDirection>;
  /** The constraint sorts returned entities by ordering of the values specified in arguments matching the entity attribute of specified name. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-attribute-value-order) */
  attributeCatalogNumberSetExact?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint sorts returned entities by ordering of the values specified `attributeInSet` in filter sharing the same attribute name. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-attribute-value-order-used-in-filter) */
  attributeCatalogNumberSetInFilter?: InputMaybe<Scalars['Boolean']['input']>;
  /** The constraint sorts returned entities by natural ordering of the values in the specified attribute. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/comparable#attribute-natural) */
  attributeChangedNatural?: InputMaybe<OrderDirection>;
  /** The constraint sorts returned entities by ordering of the values specified in arguments matching the entity attribute of specified name. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-attribute-value-order) */
  attributeChangedSetExact?: InputMaybe<Array<Scalars['OffsetDateTime']['input']>>;
  /** The constraint sorts returned entities by ordering of the values specified `attributeInSet` in filter sharing the same attribute name. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-attribute-value-order-used-in-filter) */
  attributeChangedSetInFilter?: InputMaybe<Scalars['Boolean']['input']>;
  /** The constraint sorts returned entities by natural ordering of the values in the specified attribute. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/comparable#attribute-natural) */
  attributeCodeNatural?: InputMaybe<OrderDirection>;
  /** The constraint sorts returned entities by ordering of the values specified in arguments matching the entity attribute of specified name. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-attribute-value-order) */
  attributeCodeSetExact?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint sorts returned entities by ordering of the values specified `attributeInSet` in filter sharing the same attribute name. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-attribute-value-order-used-in-filter) */
  attributeCodeSetInFilter?: InputMaybe<Scalars['Boolean']['input']>;
  /** The constraint sorts returned entities by natural ordering of the values in the specified attribute. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/comparable#attribute-natural) */
  attributeEanNatural?: InputMaybe<OrderDirection>;
  /** The constraint sorts returned entities by ordering of the values specified in arguments matching the entity attribute of specified name. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-attribute-value-order) */
  attributeEanSetExact?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint sorts returned entities by ordering of the values specified `attributeInSet` in filter sharing the same attribute name. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-attribute-value-order-used-in-filter) */
  attributeEanSetInFilter?: InputMaybe<Scalars['Boolean']['input']>;
  /** The constraint sorts returned entities by natural ordering of the values in the specified attribute. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/comparable#attribute-natural) */
  attributeNameNatural?: InputMaybe<OrderDirection>;
  /** The constraint sorts returned entities by ordering of the values specified in arguments matching the entity attribute of specified name. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-attribute-value-order) */
  attributeNameSetExact?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint sorts returned entities by ordering of the values specified `attributeInSet` in filter sharing the same attribute name. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-attribute-value-order-used-in-filter) */
  attributeNameSetInFilter?: InputMaybe<Scalars['Boolean']['input']>;
  /** The constraint sorts returned entities by natural ordering of the values in the specified attribute. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/comparable#attribute-natural) */
  attributeOrderNatural?: InputMaybe<OrderDirection>;
  /** The constraint sorts returned entities by ordering of the values specified in arguments matching the entity attribute of specified name. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-attribute-value-order) */
  attributeOrderSetExact?: InputMaybe<Array<Scalars['Predecessor']['input']>>;
  /** The constraint sorts returned entities by ordering of the values specified `attributeInSet` in filter sharing the same attribute name. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-attribute-value-order-used-in-filter) */
  attributeOrderSetInFilter?: InputMaybe<Scalars['Boolean']['input']>;
  /** The constraint sorts returned entities by natural ordering of the values in the specified attribute. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/comparable#attribute-natural) */
  attributeOrderedQuantityNatural?: InputMaybe<OrderDirection>;
  /** The constraint sorts returned entities by ordering of the values specified in arguments matching the entity attribute of specified name. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-attribute-value-order) */
  attributeOrderedQuantitySetExact?: InputMaybe<Array<Scalars['BigDecimal']['input']>>;
  /** The constraint sorts returned entities by ordering of the values specified `attributeInSet` in filter sharing the same attribute name. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-attribute-value-order-used-in-filter) */
  attributeOrderedQuantitySetInFilter?: InputMaybe<Scalars['Boolean']['input']>;
  /** The constraint sorts returned entities by natural ordering of the values in the specified attribute. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/comparable#attribute-natural) */
  attributePublishedNatural?: InputMaybe<OrderDirection>;
  /** The constraint sorts returned entities by ordering of the values specified in arguments matching the entity attribute of specified name. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-attribute-value-order) */
  attributePublishedSetExact?: InputMaybe<Array<Scalars['OffsetDateTime']['input']>>;
  /** The constraint sorts returned entities by ordering of the values specified `attributeInSet` in filter sharing the same attribute name. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-attribute-value-order-used-in-filter) */
  attributePublishedSetInFilter?: InputMaybe<Scalars['Boolean']['input']>;
  /** The constraint sorts returned entities by natural ordering of the values in the specified attribute. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/comparable#attribute-natural) */
  attributeRatingNatural?: InputMaybe<OrderDirection>;
  /** The constraint sorts returned entities by ordering of the values specified in arguments matching the entity attribute of specified name. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-attribute-value-order) */
  attributeRatingSetExact?: InputMaybe<Array<Scalars['BigDecimal']['input']>>;
  /** The constraint sorts returned entities by ordering of the values specified `attributeInSet` in filter sharing the same attribute name. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-attribute-value-order-used-in-filter) */
  attributeRatingSetInFilter?: InputMaybe<Scalars['Boolean']['input']>;
  /** The constraint sorts returned entities by natural ordering of the values in the specified attribute. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/comparable#attribute-natural) */
  attributeRatingVotesNatural?: InputMaybe<OrderDirection>;
  /** The constraint sorts returned entities by ordering of the values specified in arguments matching the entity attribute of specified name. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-attribute-value-order) */
  attributeRatingVotesSetExact?: InputMaybe<Array<Scalars['Int']['input']>>;
  /** The constraint sorts returned entities by ordering of the values specified `attributeInSet` in filter sharing the same attribute name. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-attribute-value-order-used-in-filter) */
  attributeRatingVotesSetInFilter?: InputMaybe<Scalars['Boolean']['input']>;
  /** The constraint sorts returned entities by natural ordering of the values in the specified attribute. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/comparable#attribute-natural) */
  attributeSupplierCodeNatural?: InputMaybe<OrderDirection>;
  /** The constraint sorts returned entities by ordering of the values specified in arguments matching the entity attribute of specified name. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-attribute-value-order) */
  attributeSupplierCodeSetExact?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint sorts returned entities by ordering of the values specified `attributeInSet` in filter sharing the same attribute name. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-attribute-value-order-used-in-filter) */
  attributeSupplierCodeSetInFilter?: InputMaybe<Scalars['Boolean']['input']>;
  /** The constraint sorts returned entities by ordering of the values specified in arguments. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-primary-key-order) */
  entityPrimaryKeyExact?: InputMaybe<Array<Scalars['Int']['input']>>;
  /** The constraint sorts returned entities by ordering of the values specified `entityPrimaryKeysInSet` in filter. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-primary-key-order-used-in-filter) */
  entityPrimaryKeyInFilter?: InputMaybe<Scalars['Boolean']['input']>;
  /** The constraint sorts returned entities by primary key in specific order. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/comparable#primary-key-natural) */
  entityPrimaryKeyNatural?: InputMaybe<OrderDirection>;
  /** The constraint sorts returned entities by selected price for sale. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/price#price-natural) */
  priceNatural?: InputMaybe<OrderDirection>;
  /** The constraint sorts returned entities randomly. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/random#random) */
  random?: InputMaybe<Scalars['Boolean']['input']>;
  /** The constraint sorts returned entities or references by attribute specified on its reference in natural order. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/reference#reference-property) */
  referenceBrandProperty?: InputMaybe<Array<OrderContainer8d36138f1971f1bb>>;
  /** The constraint sorts returned entities or references by attribute specified on its reference in natural order. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/reference#reference-property) */
  referenceBundlesProperty?: InputMaybe<Array<OrderContainerd89b7947fe7e7154>>;
  /** The constraint sorts returned entities or references by attribute specified on its reference in natural order. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/reference#reference-property) */
  referenceCategoriesProperty?: InputMaybe<Array<OrderContainer16a68379c1882114>>;
  /** The constraint sorts returned entities or references by attribute specified on its reference in natural order. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/reference#reference-property) */
  referenceGroupsProperty?: InputMaybe<Array<OrderContainer20273f9758d7794a>>;
  /** The constraint sorts returned entities or references by attribute specified on its reference in natural order. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/reference#reference-property) */
  referenceMasterProperty?: InputMaybe<Array<OrderContainer4058d7c5a95792f>>;
  /** The constraint sorts returned entities or references by attribute specified on its reference in natural order. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/reference#reference-property) */
  referenceParameterValuesProperty?: InputMaybe<Array<OrderContainer9d8bf58d6da69dd1>>;
  /** The constraint sorts returned entities or references by attribute specified on its reference in natural order. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/reference#reference-property) */
  referenceProductSetItemsProperty?: InputMaybe<Array<OrderContainer4990bf0060fba166>>;
  /** The constraint sorts returned entities or references by attribute specified on its reference in natural order. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/reference#reference-property) */
  referenceRelatedProductsProperty?: InputMaybe<Array<OrderContainerf6e0ce132e9ec30a>>;
  /** The constraint sorts returned entities or references by attribute specified on its reference in natural order. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/reference#reference-property) */
  referenceStockVisibilitiesProperty?: InputMaybe<Array<OrderContainera528a35f723b1525>>;
  /** The constraint sorts returned entities or references by attribute specified on its reference in natural order. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/reference#reference-property) */
  referenceStocksProperty?: InputMaybe<Array<OrderContainerb6c1c3bfe403e869>>;
  /** The constraint sorts returned entities or references by attribute specified on its reference in natural order. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/reference#reference-property) */
  referenceTagsProperty?: InputMaybe<Array<OrderContainer822edbdd50a8dce1>>;
  /** The constraint sorts returned entities or references by attribute specified on its reference in natural order. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/reference#reference-property) */
  referenceVariantParametersProperty?: InputMaybe<Array<OrderContainer926d9c303216fec3>>;
};

export type OrderContainer441ef63c5ca7dd1c = {
  /** The constraint sorts returned entities by natural ordering of the values in the specified attribute. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/comparable#attribute-natural) */
  attributeChangedNatural?: InputMaybe<OrderDirection>;
  /** The constraint sorts returned entities by ordering of the values specified in arguments matching the entity attribute of specified name. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-attribute-value-order) */
  attributeChangedSetExact?: InputMaybe<Array<Scalars['OffsetDateTime']['input']>>;
  /** The constraint sorts returned entities by ordering of the values specified `attributeInSet` in filter sharing the same attribute name. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-attribute-value-order-used-in-filter) */
  attributeChangedSetInFilter?: InputMaybe<Scalars['Boolean']['input']>;
  /** The constraint sorts returned entities by natural ordering of the values in the specified attribute. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/comparable#attribute-natural) */
  attributeCodeNatural?: InputMaybe<OrderDirection>;
  /** The constraint sorts returned entities by ordering of the values specified in arguments matching the entity attribute of specified name. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-attribute-value-order) */
  attributeCodeSetExact?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint sorts returned entities by ordering of the values specified `attributeInSet` in filter sharing the same attribute name. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-attribute-value-order-used-in-filter) */
  attributeCodeSetInFilter?: InputMaybe<Scalars['Boolean']['input']>;
  /** The constraint sorts returned entities by natural ordering of the values in the specified attribute. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/comparable#attribute-natural) */
  attributeNameNatural?: InputMaybe<OrderDirection>;
  /** The constraint sorts returned entities by ordering of the values specified in arguments matching the entity attribute of specified name. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-attribute-value-order) */
  attributeNameSetExact?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint sorts returned entities by ordering of the values specified `attributeInSet` in filter sharing the same attribute name. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-attribute-value-order-used-in-filter) */
  attributeNameSetInFilter?: InputMaybe<Scalars['Boolean']['input']>;
  /** The constraint sorts returned entities by natural ordering of the values in the specified attribute. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/comparable#attribute-natural) */
  attributeOrderNatural?: InputMaybe<OrderDirection>;
  /** The constraint sorts returned entities by ordering of the values specified in arguments matching the entity attribute of specified name. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-attribute-value-order) */
  attributeOrderSetExact?: InputMaybe<Array<Scalars['Predecessor']['input']>>;
  /** The constraint sorts returned entities by ordering of the values specified `attributeInSet` in filter sharing the same attribute name. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-attribute-value-order-used-in-filter) */
  attributeOrderSetInFilter?: InputMaybe<Scalars['Boolean']['input']>;
  /** The constraint sorts returned entities by natural ordering of the values in the specified attribute. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/comparable#attribute-natural) */
  attributePublishedNatural?: InputMaybe<OrderDirection>;
  /** The constraint sorts returned entities by ordering of the values specified in arguments matching the entity attribute of specified name. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-attribute-value-order) */
  attributePublishedSetExact?: InputMaybe<Array<Scalars['OffsetDateTime']['input']>>;
  /** The constraint sorts returned entities by ordering of the values specified `attributeInSet` in filter sharing the same attribute name. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-attribute-value-order-used-in-filter) */
  attributePublishedSetInFilter?: InputMaybe<Scalars['Boolean']['input']>;
  /** The constraint sorts returned entities by ordering of the values specified in arguments. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-primary-key-order) */
  entityPrimaryKeyExact?: InputMaybe<Array<Scalars['Int']['input']>>;
  /** The constraint sorts returned entities by ordering of the values specified `entityPrimaryKeysInSet` in filter. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-primary-key-order-used-in-filter) */
  entityPrimaryKeyInFilter?: InputMaybe<Scalars['Boolean']['input']>;
  /** The constraint sorts returned entities by primary key in specific order. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/comparable#primary-key-natural) */
  entityPrimaryKeyNatural?: InputMaybe<OrderDirection>;
  /** The constraint sorts returned entities randomly. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/random#random) */
  random?: InputMaybe<Scalars['Boolean']['input']>;
};

export type OrderContainer638ffac3513b5308 = {
  /** The constraint sorts returned entities by natural ordering of the values in the specified attribute. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/comparable#attribute-natural) */
  attributeChangedNatural?: InputMaybe<OrderDirection>;
  /** The constraint sorts returned entities by ordering of the values specified in arguments matching the entity attribute of specified name. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-attribute-value-order) */
  attributeChangedSetExact?: InputMaybe<Array<Scalars['OffsetDateTime']['input']>>;
  /** The constraint sorts returned entities by ordering of the values specified `attributeInSet` in filter sharing the same attribute name. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-attribute-value-order-used-in-filter) */
  attributeChangedSetInFilter?: InputMaybe<Scalars['Boolean']['input']>;
  /** The constraint sorts returned entities by natural ordering of the values in the specified attribute. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/comparable#attribute-natural) */
  attributeCodeNatural?: InputMaybe<OrderDirection>;
  /** The constraint sorts returned entities by ordering of the values specified in arguments matching the entity attribute of specified name. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-attribute-value-order) */
  attributeCodeSetExact?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint sorts returned entities by ordering of the values specified `attributeInSet` in filter sharing the same attribute name. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-attribute-value-order-used-in-filter) */
  attributeCodeSetInFilter?: InputMaybe<Scalars['Boolean']['input']>;
  /** The constraint sorts returned entities by natural ordering of the values in the specified attribute. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/comparable#attribute-natural) */
  attributeNameNatural?: InputMaybe<OrderDirection>;
  /** The constraint sorts returned entities by ordering of the values specified in arguments matching the entity attribute of specified name. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-attribute-value-order) */
  attributeNameSetExact?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint sorts returned entities by ordering of the values specified `attributeInSet` in filter sharing the same attribute name. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-attribute-value-order-used-in-filter) */
  attributeNameSetInFilter?: InputMaybe<Scalars['Boolean']['input']>;
  /** The constraint sorts returned entities by natural ordering of the values in the specified attribute. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/comparable#attribute-natural) */
  attributeOrderNatural?: InputMaybe<OrderDirection>;
  /** The constraint sorts returned entities by ordering of the values specified in arguments matching the entity attribute of specified name. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-attribute-value-order) */
  attributeOrderSetExact?: InputMaybe<Array<Scalars['Predecessor']['input']>>;
  /** The constraint sorts returned entities by ordering of the values specified `attributeInSet` in filter sharing the same attribute name. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-attribute-value-order-used-in-filter) */
  attributeOrderSetInFilter?: InputMaybe<Scalars['Boolean']['input']>;
  /** The constraint sorts returned entities by natural ordering of the values in the specified attribute. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/comparable#attribute-natural) */
  attributePublishedNatural?: InputMaybe<OrderDirection>;
  /** The constraint sorts returned entities by ordering of the values specified in arguments matching the entity attribute of specified name. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-attribute-value-order) */
  attributePublishedSetExact?: InputMaybe<Array<Scalars['OffsetDateTime']['input']>>;
  /** The constraint sorts returned entities by ordering of the values specified `attributeInSet` in filter sharing the same attribute name. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-attribute-value-order-used-in-filter) */
  attributePublishedSetInFilter?: InputMaybe<Scalars['Boolean']['input']>;
  /** The constraint sorts returned entities by ordering of the values specified in arguments. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-primary-key-order) */
  entityPrimaryKeyExact?: InputMaybe<Array<Scalars['Int']['input']>>;
  /** The constraint sorts returned entities by ordering of the values specified `entityPrimaryKeysInSet` in filter. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-primary-key-order-used-in-filter) */
  entityPrimaryKeyInFilter?: InputMaybe<Scalars['Boolean']['input']>;
  /** The constraint sorts returned entities by primary key in specific order. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/comparable#primary-key-natural) */
  entityPrimaryKeyNatural?: InputMaybe<OrderDirection>;
  /** The constraint sorts returned entities randomly. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/random#random) */
  random?: InputMaybe<Scalars['Boolean']['input']>;
};

export type OrderContainer670a07c21adba5c9 = {
  /** The constraint sorts returned entities by natural ordering of the values in the specified attribute. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/comparable#attribute-natural) */
  attributeChangedNatural?: InputMaybe<OrderDirection>;
  /** The constraint sorts returned entities by ordering of the values specified in arguments matching the entity attribute of specified name. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-attribute-value-order) */
  attributeChangedSetExact?: InputMaybe<Array<Scalars['OffsetDateTime']['input']>>;
  /** The constraint sorts returned entities by ordering of the values specified `attributeInSet` in filter sharing the same attribute name. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-attribute-value-order-used-in-filter) */
  attributeChangedSetInFilter?: InputMaybe<Scalars['Boolean']['input']>;
  /** The constraint sorts returned entities by natural ordering of the values in the specified attribute. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/comparable#attribute-natural) */
  attributeCodeNatural?: InputMaybe<OrderDirection>;
  /** The constraint sorts returned entities by ordering of the values specified in arguments matching the entity attribute of specified name. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-attribute-value-order) */
  attributeCodeSetExact?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint sorts returned entities by ordering of the values specified `attributeInSet` in filter sharing the same attribute name. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-attribute-value-order-used-in-filter) */
  attributeCodeSetInFilter?: InputMaybe<Scalars['Boolean']['input']>;
  /** The constraint sorts returned entities by natural ordering of the values in the specified attribute. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/comparable#attribute-natural) */
  attributeNameNatural?: InputMaybe<OrderDirection>;
  /** The constraint sorts returned entities by ordering of the values specified in arguments matching the entity attribute of specified name. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-attribute-value-order) */
  attributeNameSetExact?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint sorts returned entities by ordering of the values specified `attributeInSet` in filter sharing the same attribute name. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-attribute-value-order-used-in-filter) */
  attributeNameSetInFilter?: InputMaybe<Scalars['Boolean']['input']>;
  /** The constraint sorts returned entities by natural ordering of the values in the specified attribute. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/comparable#attribute-natural) */
  attributeOrderNatural?: InputMaybe<OrderDirection>;
  /** The constraint sorts returned entities by ordering of the values specified in arguments matching the entity attribute of specified name. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-attribute-value-order) */
  attributeOrderSetExact?: InputMaybe<Array<Scalars['Predecessor']['input']>>;
  /** The constraint sorts returned entities by ordering of the values specified `attributeInSet` in filter sharing the same attribute name. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-attribute-value-order-used-in-filter) */
  attributeOrderSetInFilter?: InputMaybe<Scalars['Boolean']['input']>;
  /** The constraint sorts returned entities by natural ordering of the values in the specified attribute. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/comparable#attribute-natural) */
  attributePublishedNatural?: InputMaybe<OrderDirection>;
  /** The constraint sorts returned entities by ordering of the values specified in arguments matching the entity attribute of specified name. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-attribute-value-order) */
  attributePublishedSetExact?: InputMaybe<Array<Scalars['OffsetDateTime']['input']>>;
  /** The constraint sorts returned entities by ordering of the values specified `attributeInSet` in filter sharing the same attribute name. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-attribute-value-order-used-in-filter) */
  attributePublishedSetInFilter?: InputMaybe<Scalars['Boolean']['input']>;
  /** The constraint sorts returned entities by ordering of the values specified in arguments. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-primary-key-order) */
  entityPrimaryKeyExact?: InputMaybe<Array<Scalars['Int']['input']>>;
  /** The constraint sorts returned entities by ordering of the values specified `entityPrimaryKeysInSet` in filter. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-primary-key-order-used-in-filter) */
  entityPrimaryKeyInFilter?: InputMaybe<Scalars['Boolean']['input']>;
  /** The constraint sorts returned entities by primary key in specific order. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/comparable#primary-key-natural) */
  entityPrimaryKeyNatural?: InputMaybe<OrderDirection>;
  /** The constraint sorts returned entities randomly. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/random#random) */
  random?: InputMaybe<Scalars['Boolean']['input']>;
  /** The constraint sorts returned entities or references by attribute specified on its reference in natural order. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/reference#reference-property) */
  referenceParameterGroupsProperty?: InputMaybe<Array<OrderContainercc58d2a51136e64a>>;
};

export type OrderContainer776ab88cdf14b588 = {
  /** The constraint sorts returned references by applying ordering constraint on referenced entity group. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/reference#entity-group-property) */
  entityGroupProperty?: InputMaybe<Array<OrderContainerd961bc3fab551bb0>>;
  /** The constraint sorts returned entities by ordering of the values specified in arguments. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-primary-key-order) */
  entityPrimaryKeyExact?: InputMaybe<Array<Scalars['Int']['input']>>;
  /** The constraint sorts returned entities by primary key in specific order. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/comparable#primary-key-natural) */
  entityPrimaryKeyNatural?: InputMaybe<OrderDirection>;
  /** The constraint sorts returned references by applying ordering constraint on referenced entity. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/reference#entity-property) */
  entityProperty?: InputMaybe<Array<OrderContainerd961bc3fab551bb0>>;
  /** The constraint sorts returned entities randomly. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/random#random) */
  random?: InputMaybe<Scalars['Boolean']['input']>;
};

export type OrderContainer822edbdd50a8dce1 = {
  /** The constraint sorts returned references by applying ordering constraint on referenced entity group. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/reference#entity-group-property) */
  entityGroupProperty?: InputMaybe<Array<OrderContainer60ec14e01e238dfe>>;
  /** The constraint sorts returned entities by ordering of the values specified in arguments. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-primary-key-order) */
  entityPrimaryKeyExact?: InputMaybe<Array<Scalars['Int']['input']>>;
  /** The constraint sorts returned entities by primary key in specific order. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/comparable#primary-key-natural) */
  entityPrimaryKeyNatural?: InputMaybe<OrderDirection>;
  /** The constraint sorts returned references by applying ordering constraint on referenced entity. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/reference#entity-property) */
  entityProperty?: InputMaybe<Array<OrderContainer60ec14e01e238dfe>>;
  /** The constraint sorts returned entities randomly. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/random#random) */
  random?: InputMaybe<Scalars['Boolean']['input']>;
};

export type OrderContainer926d9c303216fec3 = {
  /** The constraint sorts returned references by applying ordering constraint on referenced entity group. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/reference#entity-group-property) */
  entityGroupProperty?: InputMaybe<Array<OrderContainer670a07c21adba5c9>>;
  /** The constraint sorts returned entities by ordering of the values specified in arguments. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-primary-key-order) */
  entityPrimaryKeyExact?: InputMaybe<Array<Scalars['Int']['input']>>;
  /** The constraint sorts returned entities by primary key in specific order. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/comparable#primary-key-natural) */
  entityPrimaryKeyNatural?: InputMaybe<OrderDirection>;
  /** The constraint sorts returned references by applying ordering constraint on referenced entity. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/reference#entity-property) */
  entityProperty?: InputMaybe<Array<OrderContainer670a07c21adba5c9>>;
  /** The constraint sorts returned entities randomly. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/random#random) */
  random?: InputMaybe<Scalars['Boolean']['input']>;
};

export type OrderContainer4058d7c5a95792f = {
  /** The constraint sorts returned references by applying ordering constraint on referenced entity group. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/reference#entity-group-property) */
  entityGroupProperty?: InputMaybe<Array<OrderContainer90fb661fce37688>>;
  /** The constraint sorts returned entities by ordering of the values specified in arguments. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-primary-key-order) */
  entityPrimaryKeyExact?: InputMaybe<Array<Scalars['Int']['input']>>;
  /** The constraint sorts returned entities by primary key in specific order. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/comparable#primary-key-natural) */
  entityPrimaryKeyNatural?: InputMaybe<OrderDirection>;
  /** The constraint sorts returned references by applying ordering constraint on referenced entity. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/reference#entity-property) */
  entityProperty?: InputMaybe<Array<OrderContainer90fb661fce37688>>;
  /** The constraint sorts returned entities randomly. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/random#random) */
  random?: InputMaybe<Scalars['Boolean']['input']>;
};

export type OrderContainer4990bf0060fba166 = {
  /** The constraint sorts returned entities by natural ordering of the values in the specified attribute. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/comparable#attribute-natural) */
  attributeOrderInSetNatural?: InputMaybe<OrderDirection>;
  /** The constraint sorts returned entities by ordering of the values specified in arguments matching the entity attribute of specified name. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-attribute-value-order) */
  attributeOrderInSetSetExact?: InputMaybe<Array<Scalars['Int']['input']>>;
  /** The constraint sorts returned references by applying ordering constraint on referenced entity group. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/reference#entity-group-property) */
  entityGroupProperty?: InputMaybe<Array<OrderContainer90fb661fce37688>>;
  /** The constraint sorts returned entities by ordering of the values specified in arguments. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-primary-key-order) */
  entityPrimaryKeyExact?: InputMaybe<Array<Scalars['Int']['input']>>;
  /** The constraint sorts returned entities by primary key in specific order. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/comparable#primary-key-natural) */
  entityPrimaryKeyNatural?: InputMaybe<OrderDirection>;
  /** The constraint sorts returned references by applying ordering constraint on referenced entity. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/reference#entity-property) */
  entityProperty?: InputMaybe<Array<OrderContainer90fb661fce37688>>;
  /** The constraint sorts returned entities randomly. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/random#random) */
  random?: InputMaybe<Scalars['Boolean']['input']>;
};

export type OrderContainer8173dcb058a60a9a = {
  /** The constraint sorts returned references by applying ordering constraint on referenced entity group. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/reference#entity-group-property) */
  entityGroupProperty?: InputMaybe<Array<OrderContainer60ec14e01e238dfe>>;
  /** The constraint sorts returned entities by ordering of the values specified in arguments. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-primary-key-order) */
  entityPrimaryKeyExact?: InputMaybe<Array<Scalars['Int']['input']>>;
  /** The constraint sorts returned entities by primary key in specific order. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/comparable#primary-key-natural) */
  entityPrimaryKeyNatural?: InputMaybe<OrderDirection>;
  /** The constraint sorts returned references by applying ordering constraint on referenced entity. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/reference#entity-property) */
  entityProperty?: InputMaybe<Array<OrderContainer60ec14e01e238dfe>>;
  /** The constraint sorts returned entities randomly. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/random#random) */
  random?: InputMaybe<Scalars['Boolean']['input']>;
};

export type OrderContainer8529c4502d048485 = {
  /** The constraint sorts returned references by applying ordering constraint on referenced entity group. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/reference#entity-group-property) */
  entityGroupProperty?: InputMaybe<Array<OrderContainer60ec14e01e238dfe>>;
  /** The constraint sorts returned entities by ordering of the values specified in arguments. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-primary-key-order) */
  entityPrimaryKeyExact?: InputMaybe<Array<Scalars['Int']['input']>>;
  /** The constraint sorts returned entities by primary key in specific order. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/comparable#primary-key-natural) */
  entityPrimaryKeyNatural?: InputMaybe<OrderDirection>;
  /** The constraint sorts returned references by applying ordering constraint on referenced entity. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/reference#entity-property) */
  entityProperty?: InputMaybe<Array<OrderContainer60ec14e01e238dfe>>;
  /** The constraint sorts returned entities randomly. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/random#random) */
  random?: InputMaybe<Scalars['Boolean']['input']>;
};

export type OrderContainer8818faf0a11a5fa2 = {
  /** The constraint sorts returned entities by natural ordering of the values in the specified attribute. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/comparable#attribute-natural) */
  attributeCatalogNumberNatural?: InputMaybe<OrderDirection>;
  /** The constraint sorts returned entities by ordering of the values specified in arguments matching the entity attribute of specified name. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-attribute-value-order) */
  attributeCatalogNumberSetExact?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint sorts returned entities by ordering of the values specified `attributeInSet` in filter sharing the same attribute name. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-attribute-value-order-used-in-filter) */
  attributeCatalogNumberSetInFilter?: InputMaybe<Scalars['Boolean']['input']>;
  /** The constraint sorts returned entities by natural ordering of the values in the specified attribute. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/comparable#attribute-natural) */
  attributeChangedNatural?: InputMaybe<OrderDirection>;
  /** The constraint sorts returned entities by ordering of the values specified in arguments matching the entity attribute of specified name. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-attribute-value-order) */
  attributeChangedSetExact?: InputMaybe<Array<Scalars['OffsetDateTime']['input']>>;
  /** The constraint sorts returned entities by ordering of the values specified `attributeInSet` in filter sharing the same attribute name. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-attribute-value-order-used-in-filter) */
  attributeChangedSetInFilter?: InputMaybe<Scalars['Boolean']['input']>;
  /** The constraint sorts returned entities by natural ordering of the values in the specified attribute. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/comparable#attribute-natural) */
  attributeCodeNatural?: InputMaybe<OrderDirection>;
  /** The constraint sorts returned entities by ordering of the values specified in arguments matching the entity attribute of specified name. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-attribute-value-order) */
  attributeCodeSetExact?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint sorts returned entities by ordering of the values specified `attributeInSet` in filter sharing the same attribute name. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-attribute-value-order-used-in-filter) */
  attributeCodeSetInFilter?: InputMaybe<Scalars['Boolean']['input']>;
  /** The constraint sorts returned entities by natural ordering of the values in the specified attribute. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/comparable#attribute-natural) */
  attributeEanNatural?: InputMaybe<OrderDirection>;
  /** The constraint sorts returned entities by ordering of the values specified in arguments matching the entity attribute of specified name. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-attribute-value-order) */
  attributeEanSetExact?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint sorts returned entities by ordering of the values specified `attributeInSet` in filter sharing the same attribute name. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-attribute-value-order-used-in-filter) */
  attributeEanSetInFilter?: InputMaybe<Scalars['Boolean']['input']>;
  /** The constraint sorts returned entities by natural ordering of the values in the specified attribute. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/comparable#attribute-natural) */
  attributeNameNatural?: InputMaybe<OrderDirection>;
  /** The constraint sorts returned entities by ordering of the values specified in arguments matching the entity attribute of specified name. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-attribute-value-order) */
  attributeNameSetExact?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint sorts returned entities by ordering of the values specified `attributeInSet` in filter sharing the same attribute name. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-attribute-value-order-used-in-filter) */
  attributeNameSetInFilter?: InputMaybe<Scalars['Boolean']['input']>;
  /** The constraint sorts returned entities by natural ordering of the values in the specified attribute. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/comparable#attribute-natural) */
  attributeOrderNatural?: InputMaybe<OrderDirection>;
  /** The constraint sorts returned entities by ordering of the values specified in arguments matching the entity attribute of specified name. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-attribute-value-order) */
  attributeOrderSetExact?: InputMaybe<Array<Scalars['Predecessor']['input']>>;
  /** The constraint sorts returned entities by ordering of the values specified `attributeInSet` in filter sharing the same attribute name. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-attribute-value-order-used-in-filter) */
  attributeOrderSetInFilter?: InputMaybe<Scalars['Boolean']['input']>;
  /** The constraint sorts returned entities by natural ordering of the values in the specified attribute. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/comparable#attribute-natural) */
  attributePublishedNatural?: InputMaybe<OrderDirection>;
  /** The constraint sorts returned entities by ordering of the values specified in arguments matching the entity attribute of specified name. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-attribute-value-order) */
  attributePublishedSetExact?: InputMaybe<Array<Scalars['OffsetDateTime']['input']>>;
  /** The constraint sorts returned entities by ordering of the values specified `attributeInSet` in filter sharing the same attribute name. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-attribute-value-order-used-in-filter) */
  attributePublishedSetInFilter?: InputMaybe<Scalars['Boolean']['input']>;
  /** The constraint sorts returned entities by natural ordering of the values in the specified attribute. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/comparable#attribute-natural) */
  attributeRatingNatural?: InputMaybe<OrderDirection>;
  /** The constraint sorts returned entities by ordering of the values specified in arguments matching the entity attribute of specified name. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-attribute-value-order) */
  attributeRatingSetExact?: InputMaybe<Array<Scalars['BigDecimal']['input']>>;
  /** The constraint sorts returned entities by ordering of the values specified `attributeInSet` in filter sharing the same attribute name. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-attribute-value-order-used-in-filter) */
  attributeRatingSetInFilter?: InputMaybe<Scalars['Boolean']['input']>;
  /** The constraint sorts returned entities by natural ordering of the values in the specified attribute. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/comparable#attribute-natural) */
  attributeRatingVotesNatural?: InputMaybe<OrderDirection>;
  /** The constraint sorts returned entities by ordering of the values specified in arguments matching the entity attribute of specified name. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-attribute-value-order) */
  attributeRatingVotesSetExact?: InputMaybe<Array<Scalars['Int']['input']>>;
  /** The constraint sorts returned entities by ordering of the values specified `attributeInSet` in filter sharing the same attribute name. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-attribute-value-order-used-in-filter) */
  attributeRatingVotesSetInFilter?: InputMaybe<Scalars['Boolean']['input']>;
  /** The constraint sorts returned entities by natural ordering of the values in the specified attribute. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/comparable#attribute-natural) */
  attributeSupplierCodeNatural?: InputMaybe<OrderDirection>;
  /** The constraint sorts returned entities by ordering of the values specified in arguments matching the entity attribute of specified name. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-attribute-value-order) */
  attributeSupplierCodeSetExact?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint sorts returned entities by ordering of the values specified `attributeInSet` in filter sharing the same attribute name. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-attribute-value-order-used-in-filter) */
  attributeSupplierCodeSetInFilter?: InputMaybe<Scalars['Boolean']['input']>;
  /** The constraint sorts returned entities by ordering of the values specified in arguments. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-primary-key-order) */
  entityPrimaryKeyExact?: InputMaybe<Array<Scalars['Int']['input']>>;
  /** The constraint sorts returned entities by ordering of the values specified `entityPrimaryKeysInSet` in filter. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-primary-key-order-used-in-filter) */
  entityPrimaryKeyInFilter?: InputMaybe<Scalars['Boolean']['input']>;
  /** The constraint sorts returned entities by primary key in specific order. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/comparable#primary-key-natural) */
  entityPrimaryKeyNatural?: InputMaybe<OrderDirection>;
  /** The constraint sorts returned entities by selected price for sale. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/price#price-natural) */
  priceNatural?: InputMaybe<OrderDirection>;
  /** The constraint sorts returned entities randomly. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/random#random) */
  random?: InputMaybe<Scalars['Boolean']['input']>;
  /** The constraint sorts returned entities or references by attribute specified on its reference in natural order. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/reference#reference-property) */
  referenceBrandProperty?: InputMaybe<Array<OrderContainer3545256dd210499b>>;
  /** The constraint sorts returned entities or references by attribute specified on its reference in natural order. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/reference#reference-property) */
  referenceBundlesProperty?: InputMaybe<Array<OrderContainer4c886036c02c0f05>>;
  /** The constraint sorts returned entities or references by attribute specified on its reference in natural order. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/reference#reference-property) */
  referenceCategoriesProperty?: InputMaybe<Array<OrderContainer7712728df4562538>>;
  /** The constraint sorts returned entities or references by attribute specified on its reference in natural order. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/reference#reference-property) */
  referenceGroupsProperty?: InputMaybe<Array<OrderContainera56923d3758ae7cd>>;
  /** The constraint sorts returned entities or references by attribute specified on its reference in natural order. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/reference#reference-property) */
  referenceMasterProperty?: InputMaybe<Array<OrderContainer7cfc8f23b1dd770>>;
  /** The constraint sorts returned entities or references by attribute specified on its reference in natural order. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/reference#reference-property) */
  referenceParameterValuesProperty?: InputMaybe<Array<OrderContainerdb7d7f11b340bf77>>;
  /** The constraint sorts returned entities or references by attribute specified on its reference in natural order. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/reference#reference-property) */
  referenceProductSetItemsProperty?: InputMaybe<Array<OrderContainer5bd124d4214589b2>>;
  /** The constraint sorts returned entities or references by attribute specified on its reference in natural order. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/reference#reference-property) */
  referenceRelatedProductsProperty?: InputMaybe<Array<OrderContainer21bc50d34c2809bd>>;
  /** The constraint sorts returned entities or references by attribute specified on its reference in natural order. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/reference#reference-property) */
  referenceStockVisibilitiesProperty?: InputMaybe<Array<OrderContainerc9679cdc80b33b45>>;
  /** The constraint sorts returned entities or references by attribute specified on its reference in natural order. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/reference#reference-property) */
  referenceTagsProperty?: InputMaybe<Array<OrderContainer8529c4502d048485>>;
  /** The constraint sorts returned entities or references by attribute specified on its reference in natural order. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/reference#reference-property) */
  referenceVariantParametersProperty?: InputMaybe<Array<OrderContainerc7bd19275a1d3cc6>>;
};

export type OrderContainer18970ca942385a0b = {
  /** The constraint sorts returned entities by natural ordering of the values in the specified attribute. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/comparable#attribute-natural) */
  attributeChangedNatural?: InputMaybe<OrderDirection>;
  /** The constraint sorts returned entities by ordering of the values specified in arguments matching the entity attribute of specified name. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-attribute-value-order) */
  attributeChangedSetExact?: InputMaybe<Array<Scalars['OffsetDateTime']['input']>>;
  /** The constraint sorts returned entities by ordering of the values specified `attributeInSet` in filter sharing the same attribute name. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-attribute-value-order-used-in-filter) */
  attributeChangedSetInFilter?: InputMaybe<Scalars['Boolean']['input']>;
  /** The constraint sorts returned entities by natural ordering of the values in the specified attribute. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/comparable#attribute-natural) */
  attributeCodeNatural?: InputMaybe<OrderDirection>;
  /** The constraint sorts returned entities by ordering of the values specified in arguments matching the entity attribute of specified name. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-attribute-value-order) */
  attributeCodeSetExact?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint sorts returned entities by ordering of the values specified `attributeInSet` in filter sharing the same attribute name. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-attribute-value-order-used-in-filter) */
  attributeCodeSetInFilter?: InputMaybe<Scalars['Boolean']['input']>;
  /** The constraint sorts returned entities by natural ordering of the values in the specified attribute. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/comparable#attribute-natural) */
  attributeNameNatural?: InputMaybe<OrderDirection>;
  /** The constraint sorts returned entities by ordering of the values specified in arguments matching the entity attribute of specified name. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-attribute-value-order) */
  attributeNameSetExact?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint sorts returned entities by ordering of the values specified `attributeInSet` in filter sharing the same attribute name. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-attribute-value-order-used-in-filter) */
  attributeNameSetInFilter?: InputMaybe<Scalars['Boolean']['input']>;
  /** The constraint sorts returned entities by natural ordering of the values in the specified attribute. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/comparable#attribute-natural) */
  attributeOrderNatural?: InputMaybe<OrderDirection>;
  /** The constraint sorts returned entities by ordering of the values specified in arguments matching the entity attribute of specified name. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-attribute-value-order) */
  attributeOrderSetExact?: InputMaybe<Array<Scalars['Predecessor']['input']>>;
  /** The constraint sorts returned entities by ordering of the values specified `attributeInSet` in filter sharing the same attribute name. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-attribute-value-order-used-in-filter) */
  attributeOrderSetInFilter?: InputMaybe<Scalars['Boolean']['input']>;
  /** The constraint sorts returned entities by natural ordering of the values in the specified attribute. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/comparable#attribute-natural) */
  attributePublishedNatural?: InputMaybe<OrderDirection>;
  /** The constraint sorts returned entities by ordering of the values specified in arguments matching the entity attribute of specified name. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-attribute-value-order) */
  attributePublishedSetExact?: InputMaybe<Array<Scalars['OffsetDateTime']['input']>>;
  /** The constraint sorts returned entities by ordering of the values specified `attributeInSet` in filter sharing the same attribute name. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-attribute-value-order-used-in-filter) */
  attributePublishedSetInFilter?: InputMaybe<Scalars['Boolean']['input']>;
  /** The constraint sorts returned entities by ordering of the values specified in arguments. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-primary-key-order) */
  entityPrimaryKeyExact?: InputMaybe<Array<Scalars['Int']['input']>>;
  /** The constraint sorts returned entities by ordering of the values specified `entityPrimaryKeysInSet` in filter. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-primary-key-order-used-in-filter) */
  entityPrimaryKeyInFilter?: InputMaybe<Scalars['Boolean']['input']>;
  /** The constraint sorts returned entities by primary key in specific order. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/comparable#primary-key-natural) */
  entityPrimaryKeyNatural?: InputMaybe<OrderDirection>;
  /** The constraint sorts returned entities randomly. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/random#random) */
  random?: InputMaybe<Scalars['Boolean']['input']>;
  /** The constraint sorts returned entities or references by attribute specified on its reference in natural order. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/reference#reference-property) */
  referenceTagsProperty?: InputMaybe<Array<OrderContainer8173dcb058a60a9a>>;
};

export type OrderContainer20273f9758d7794a = {
  /** The constraint sorts returned entities by natural ordering of the values in the specified attribute. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/comparable#attribute-natural) */
  attributeOrderInGroupNatural?: InputMaybe<OrderDirection>;
  /** The constraint sorts returned entities by ordering of the values specified in arguments matching the entity attribute of specified name. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-attribute-value-order) */
  attributeOrderInGroupSetExact?: InputMaybe<Array<Scalars['Predecessor']['input']>>;
  /** The constraint sorts returned references by applying ordering constraint on referenced entity group. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/reference#entity-group-property) */
  entityGroupProperty?: InputMaybe<Array<OrderContainer21da021e14344cc3>>;
  /** The constraint sorts returned entities by ordering of the values specified in arguments. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-primary-key-order) */
  entityPrimaryKeyExact?: InputMaybe<Array<Scalars['Int']['input']>>;
  /** The constraint sorts returned entities by primary key in specific order. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/comparable#primary-key-natural) */
  entityPrimaryKeyNatural?: InputMaybe<OrderDirection>;
  /** The constraint sorts returned references by applying ordering constraint on referenced entity. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/reference#entity-property) */
  entityProperty?: InputMaybe<Array<OrderContainer21da021e14344cc3>>;
  /** The constraint sorts returned entities randomly. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/random#random) */
  random?: InputMaybe<Scalars['Boolean']['input']>;
};

export type OrderContainer3545256dd210499b = {
  /** The constraint sorts returned references by applying ordering constraint on referenced entity group. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/reference#entity-group-property) */
  entityGroupProperty?: InputMaybe<Array<OrderContainer18970ca942385a0b>>;
  /** The constraint sorts returned entities by ordering of the values specified in arguments. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-primary-key-order) */
  entityPrimaryKeyExact?: InputMaybe<Array<Scalars['Int']['input']>>;
  /** The constraint sorts returned entities by primary key in specific order. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/comparable#primary-key-natural) */
  entityPrimaryKeyNatural?: InputMaybe<OrderDirection>;
  /** The constraint sorts returned references by applying ordering constraint on referenced entity. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/reference#entity-property) */
  entityProperty?: InputMaybe<Array<OrderContainer18970ca942385a0b>>;
  /** The constraint sorts returned entities randomly. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/random#random) */
  random?: InputMaybe<Scalars['Boolean']['input']>;
};

export type OrderContainer7712728df4562538 = {
  /** The constraint sorts returned entities by natural ordering of the values in the specified attribute. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/comparable#attribute-natural) */
  attributeOrderInCategoryNatural?: InputMaybe<OrderDirection>;
  /** The constraint sorts returned entities by ordering of the values specified in arguments matching the entity attribute of specified name. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-attribute-value-order) */
  attributeOrderInCategorySetExact?: InputMaybe<Array<Scalars['Predecessor']['input']>>;
  /** The constraint sorts returned references by applying ordering constraint on referenced entity group. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/reference#entity-group-property) */
  entityGroupProperty?: InputMaybe<Array<OrderContaineraff1014cee092cf7>>;
  /** The constraint sorts returned entities by ordering of the values specified in arguments. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-primary-key-order) */
  entityPrimaryKeyExact?: InputMaybe<Array<Scalars['Int']['input']>>;
  /** The constraint sorts returned entities by primary key in specific order. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/comparable#primary-key-natural) */
  entityPrimaryKeyNatural?: InputMaybe<OrderDirection>;
  /** The constraint sorts returned references by applying ordering constraint on referenced entity. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/reference#entity-property) */
  entityProperty?: InputMaybe<Array<OrderContaineraff1014cee092cf7>>;
  /** The constraint sorts returned entities randomly. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/random#random) */
  random?: InputMaybe<Scalars['Boolean']['input']>;
};

export type OrderContainer948579655a8280e9 = {
  /** The constraint sorts returned references by applying ordering constraint on referenced entity group. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/reference#entity-group-property) */
  entityGroupProperty?: InputMaybe<Array<OrderContainer670a07c21adba5c9>>;
  /** The constraint sorts returned entities by ordering of the values specified in arguments. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-primary-key-order) */
  entityPrimaryKeyExact?: InputMaybe<Array<Scalars['Int']['input']>>;
  /** The constraint sorts returned entities by primary key in specific order. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/comparable#primary-key-natural) */
  entityPrimaryKeyNatural?: InputMaybe<OrderDirection>;
  /** The constraint sorts returned references by applying ordering constraint on referenced entity. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/reference#entity-property) */
  entityProperty?: InputMaybe<Array<OrderContainer670a07c21adba5c9>>;
  /** The constraint sorts returned entities randomly. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/random#random) */
  random?: InputMaybe<Scalars['Boolean']['input']>;
};

export type OrderContainer7388522944352f3a = {
  /** The constraint sorts returned references by applying ordering constraint on referenced entity group. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/reference#entity-group-property) */
  entityGroupProperty?: InputMaybe<Array<OrderContainer60ec14e01e238dfe>>;
  /** The constraint sorts returned entities by ordering of the values specified in arguments. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-primary-key-order) */
  entityPrimaryKeyExact?: InputMaybe<Array<Scalars['Int']['input']>>;
  /** The constraint sorts returned entities by primary key in specific order. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/comparable#primary-key-natural) */
  entityPrimaryKeyNatural?: InputMaybe<OrderDirection>;
  /** The constraint sorts returned references by applying ordering constraint on referenced entity. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/reference#entity-property) */
  entityProperty?: InputMaybe<Array<OrderContainer60ec14e01e238dfe>>;
  /** The constraint sorts returned entities randomly. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/random#random) */
  random?: InputMaybe<Scalars['Boolean']['input']>;
};

export type OrderContainera4ea5eee8d85420a = {
  /** The constraint sorts returned entities by ordering of the values specified in arguments. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-primary-key-order) */
  entityPrimaryKeyExact?: InputMaybe<Array<Scalars['Int']['input']>>;
  /** The constraint sorts returned entities by ordering of the values specified `entityPrimaryKeysInSet` in filter. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-primary-key-order-used-in-filter) */
  entityPrimaryKeyInFilter?: InputMaybe<Scalars['Boolean']['input']>;
  /** The constraint sorts returned entities by primary key in specific order. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/comparable#primary-key-natural) */
  entityPrimaryKeyNatural?: InputMaybe<OrderDirection>;
  /** The constraint sorts returned entities randomly. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/random#random) */
  random?: InputMaybe<Scalars['Boolean']['input']>;
};

export type OrderContainera6e9ec426f250857 = {
  /** The constraint sorts returned references by applying ordering constraint on referenced entity group. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/reference#entity-group-property) */
  entityGroupProperty?: InputMaybe<Array<OrderContainer2cb1816184dccd3f>>;
  /** The constraint sorts returned entities by ordering of the values specified in arguments. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-primary-key-order) */
  entityPrimaryKeyExact?: InputMaybe<Array<Scalars['Int']['input']>>;
  /** The constraint sorts returned entities by primary key in specific order. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/comparable#primary-key-natural) */
  entityPrimaryKeyNatural?: InputMaybe<OrderDirection>;
  /** The constraint sorts returned references by applying ordering constraint on referenced entity. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/reference#entity-property) */
  entityProperty?: InputMaybe<Array<OrderContainer2cb1816184dccd3f>>;
  /** The constraint sorts returned entities randomly. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/random#random) */
  random?: InputMaybe<Scalars['Boolean']['input']>;
};

export type OrderContainera528a35f723b1525 = {
  /** The constraint sorts returned references by applying ordering constraint on referenced entity group. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/reference#entity-group-property) */
  entityGroupProperty?: InputMaybe<Array<OrderContainer441ef63c5ca7dd1c>>;
  /** The constraint sorts returned entities by ordering of the values specified in arguments. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-primary-key-order) */
  entityPrimaryKeyExact?: InputMaybe<Array<Scalars['Int']['input']>>;
  /** The constraint sorts returned entities by primary key in specific order. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/comparable#primary-key-natural) */
  entityPrimaryKeyNatural?: InputMaybe<OrderDirection>;
  /** The constraint sorts returned references by applying ordering constraint on referenced entity. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/reference#entity-property) */
  entityProperty?: InputMaybe<Array<OrderContainer441ef63c5ca7dd1c>>;
  /** The constraint sorts returned entities randomly. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/random#random) */
  random?: InputMaybe<Scalars['Boolean']['input']>;
};

export type OrderContainera56923d3758ae7cd = {
  /** The constraint sorts returned entities by natural ordering of the values in the specified attribute. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/comparable#attribute-natural) */
  attributeOrderInGroupNatural?: InputMaybe<OrderDirection>;
  /** The constraint sorts returned entities by ordering of the values specified in arguments matching the entity attribute of specified name. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-attribute-value-order) */
  attributeOrderInGroupSetExact?: InputMaybe<Array<Scalars['Predecessor']['input']>>;
  /** The constraint sorts returned references by applying ordering constraint on referenced entity group. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/reference#entity-group-property) */
  entityGroupProperty?: InputMaybe<Array<OrderContainer21da021e14344cc3>>;
  /** The constraint sorts returned entities by ordering of the values specified in arguments. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-primary-key-order) */
  entityPrimaryKeyExact?: InputMaybe<Array<Scalars['Int']['input']>>;
  /** The constraint sorts returned entities by primary key in specific order. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/comparable#primary-key-natural) */
  entityPrimaryKeyNatural?: InputMaybe<OrderDirection>;
  /** The constraint sorts returned references by applying ordering constraint on referenced entity. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/reference#entity-property) */
  entityProperty?: InputMaybe<Array<OrderContainer21da021e14344cc3>>;
  /** The constraint sorts returned entities randomly. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/random#random) */
  random?: InputMaybe<Scalars['Boolean']['input']>;
};

export type OrderContaineraea31df67abb5839 = {
  /** The constraint sorts returned references by applying ordering constraint on referenced entity group. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/reference#entity-group-property) */
  entityGroupProperty?: InputMaybe<Array<OrderContainer60ec14e01e238dfe>>;
  /** The constraint sorts returned entities by ordering of the values specified in arguments. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-primary-key-order) */
  entityPrimaryKeyExact?: InputMaybe<Array<Scalars['Int']['input']>>;
  /** The constraint sorts returned entities by primary key in specific order. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/comparable#primary-key-natural) */
  entityPrimaryKeyNatural?: InputMaybe<OrderDirection>;
  /** The constraint sorts returned references by applying ordering constraint on referenced entity. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/reference#entity-property) */
  entityProperty?: InputMaybe<Array<OrderContainer60ec14e01e238dfe>>;
  /** The constraint sorts returned entities randomly. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/random#random) */
  random?: InputMaybe<Scalars['Boolean']['input']>;
};

export type OrderContaineraff1014cee092cf7 = {
  /** The constraint sorts returned entities by natural ordering of the values in the specified attribute. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/comparable#attribute-natural) */
  attributeChangedNatural?: InputMaybe<OrderDirection>;
  /** The constraint sorts returned entities by ordering of the values specified in arguments matching the entity attribute of specified name. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-attribute-value-order) */
  attributeChangedSetExact?: InputMaybe<Array<Scalars['OffsetDateTime']['input']>>;
  /** The constraint sorts returned entities by ordering of the values specified `attributeInSet` in filter sharing the same attribute name. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-attribute-value-order-used-in-filter) */
  attributeChangedSetInFilter?: InputMaybe<Scalars['Boolean']['input']>;
  /** The constraint sorts returned entities by natural ordering of the values in the specified attribute. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/comparable#attribute-natural) */
  attributeCodeNatural?: InputMaybe<OrderDirection>;
  /** The constraint sorts returned entities by ordering of the values specified in arguments matching the entity attribute of specified name. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-attribute-value-order) */
  attributeCodeSetExact?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint sorts returned entities by ordering of the values specified `attributeInSet` in filter sharing the same attribute name. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-attribute-value-order-used-in-filter) */
  attributeCodeSetInFilter?: InputMaybe<Scalars['Boolean']['input']>;
  /** The constraint sorts returned entities by natural ordering of the values in the specified attribute. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/comparable#attribute-natural) */
  attributeNameNatural?: InputMaybe<OrderDirection>;
  /** The constraint sorts returned entities by ordering of the values specified in arguments matching the entity attribute of specified name. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-attribute-value-order) */
  attributeNameSetExact?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint sorts returned entities by ordering of the values specified `attributeInSet` in filter sharing the same attribute name. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-attribute-value-order-used-in-filter) */
  attributeNameSetInFilter?: InputMaybe<Scalars['Boolean']['input']>;
  /** The constraint sorts returned entities by natural ordering of the values in the specified attribute. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/comparable#attribute-natural) */
  attributeOrderNatural?: InputMaybe<OrderDirection>;
  /** The constraint sorts returned entities by ordering of the values specified in arguments matching the entity attribute of specified name. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-attribute-value-order) */
  attributeOrderSetExact?: InputMaybe<Array<Scalars['Predecessor']['input']>>;
  /** The constraint sorts returned entities by ordering of the values specified `attributeInSet` in filter sharing the same attribute name. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-attribute-value-order-used-in-filter) */
  attributeOrderSetInFilter?: InputMaybe<Scalars['Boolean']['input']>;
  /** The constraint sorts returned entities by natural ordering of the values in the specified attribute. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/comparable#attribute-natural) */
  attributePublishedNatural?: InputMaybe<OrderDirection>;
  /** The constraint sorts returned entities by ordering of the values specified in arguments matching the entity attribute of specified name. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-attribute-value-order) */
  attributePublishedSetExact?: InputMaybe<Array<Scalars['OffsetDateTime']['input']>>;
  /** The constraint sorts returned entities by ordering of the values specified `attributeInSet` in filter sharing the same attribute name. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-attribute-value-order-used-in-filter) */
  attributePublishedSetInFilter?: InputMaybe<Scalars['Boolean']['input']>;
  /** The constraint sorts returned entities by ordering of the values specified in arguments. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-primary-key-order) */
  entityPrimaryKeyExact?: InputMaybe<Array<Scalars['Int']['input']>>;
  /** The constraint sorts returned entities by ordering of the values specified `entityPrimaryKeysInSet` in filter. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-primary-key-order-used-in-filter) */
  entityPrimaryKeyInFilter?: InputMaybe<Scalars['Boolean']['input']>;
  /** The constraint sorts returned entities by primary key in specific order. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/comparable#primary-key-natural) */
  entityPrimaryKeyNatural?: InputMaybe<OrderDirection>;
  /** The constraint sorts returned entities randomly. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/random#random) */
  random?: InputMaybe<Scalars['Boolean']['input']>;
  /** The constraint sorts returned entities or references by attribute specified on its reference in natural order. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/reference#reference-property) */
  referenceRelatedProductsProperty?: InputMaybe<Array<OrderContainerd0162863fcee4fc6>>;
  /** The constraint sorts returned entities or references by attribute specified on its reference in natural order. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/reference#reference-property) */
  referenceTagsProperty?: InputMaybe<Array<OrderContainerc445bae2bad3e58>>;
};

export type OrderContainerb6c1c3bfe403e869 = {
  /** The constraint sorts returned references by applying ordering constraint on referenced entity group. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/reference#entity-group-property) */
  entityGroupProperty?: InputMaybe<Array<OrderContainer441ef63c5ca7dd1c>>;
  /** The constraint sorts returned entities by ordering of the values specified in arguments. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-primary-key-order) */
  entityPrimaryKeyExact?: InputMaybe<Array<Scalars['Int']['input']>>;
  /** The constraint sorts returned entities by primary key in specific order. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/comparable#primary-key-natural) */
  entityPrimaryKeyNatural?: InputMaybe<OrderDirection>;
  /** The constraint sorts returned references by applying ordering constraint on referenced entity. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/reference#entity-property) */
  entityProperty?: InputMaybe<Array<OrderContainer441ef63c5ca7dd1c>>;
  /** The constraint sorts returned entities randomly. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/random#random) */
  random?: InputMaybe<Scalars['Boolean']['input']>;
};

export type OrderContainerb836a731b242bb0 = {
  /** The constraint sorts returned entities by natural ordering of the values in the specified attribute. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/comparable#attribute-natural) */
  attributeChangedNatural?: InputMaybe<OrderDirection>;
  /** The constraint sorts returned entities by ordering of the values specified in arguments matching the entity attribute of specified name. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-attribute-value-order) */
  attributeChangedSetExact?: InputMaybe<Array<Scalars['OffsetDateTime']['input']>>;
  /** The constraint sorts returned entities by ordering of the values specified `attributeInSet` in filter sharing the same attribute name. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-attribute-value-order-used-in-filter) */
  attributeChangedSetInFilter?: InputMaybe<Scalars['Boolean']['input']>;
  /** The constraint sorts returned entities by natural ordering of the values in the specified attribute. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/comparable#attribute-natural) */
  attributeCodeNatural?: InputMaybe<OrderDirection>;
  /** The constraint sorts returned entities by ordering of the values specified in arguments matching the entity attribute of specified name. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-attribute-value-order) */
  attributeCodeSetExact?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint sorts returned entities by ordering of the values specified `attributeInSet` in filter sharing the same attribute name. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-attribute-value-order-used-in-filter) */
  attributeCodeSetInFilter?: InputMaybe<Scalars['Boolean']['input']>;
  /** The constraint sorts returned entities by natural ordering of the values in the specified attribute. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/comparable#attribute-natural) */
  attributeNameNatural?: InputMaybe<OrderDirection>;
  /** The constraint sorts returned entities by ordering of the values specified in arguments matching the entity attribute of specified name. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-attribute-value-order) */
  attributeNameSetExact?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint sorts returned entities by ordering of the values specified `attributeInSet` in filter sharing the same attribute name. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-attribute-value-order-used-in-filter) */
  attributeNameSetInFilter?: InputMaybe<Scalars['Boolean']['input']>;
  /** The constraint sorts returned entities by natural ordering of the values in the specified attribute. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/comparable#attribute-natural) */
  attributeOrderNatural?: InputMaybe<OrderDirection>;
  /** The constraint sorts returned entities by ordering of the values specified in arguments matching the entity attribute of specified name. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-attribute-value-order) */
  attributeOrderSetExact?: InputMaybe<Array<Scalars['Predecessor']['input']>>;
  /** The constraint sorts returned entities by ordering of the values specified `attributeInSet` in filter sharing the same attribute name. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-attribute-value-order-used-in-filter) */
  attributeOrderSetInFilter?: InputMaybe<Scalars['Boolean']['input']>;
  /** The constraint sorts returned entities by natural ordering of the values in the specified attribute. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/comparable#attribute-natural) */
  attributePublishedNatural?: InputMaybe<OrderDirection>;
  /** The constraint sorts returned entities by ordering of the values specified in arguments matching the entity attribute of specified name. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-attribute-value-order) */
  attributePublishedSetExact?: InputMaybe<Array<Scalars['OffsetDateTime']['input']>>;
  /** The constraint sorts returned entities by ordering of the values specified `attributeInSet` in filter sharing the same attribute name. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-attribute-value-order-used-in-filter) */
  attributePublishedSetInFilter?: InputMaybe<Scalars['Boolean']['input']>;
  /** The constraint sorts returned entities by ordering of the values specified in arguments. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-primary-key-order) */
  entityPrimaryKeyExact?: InputMaybe<Array<Scalars['Int']['input']>>;
  /** The constraint sorts returned entities by ordering of the values specified `entityPrimaryKeysInSet` in filter. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-primary-key-order-used-in-filter) */
  entityPrimaryKeyInFilter?: InputMaybe<Scalars['Boolean']['input']>;
  /** The constraint sorts returned entities by primary key in specific order. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/comparable#primary-key-natural) */
  entityPrimaryKeyNatural?: InputMaybe<OrderDirection>;
  /** The constraint sorts returned entities randomly. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/random#random) */
  random?: InputMaybe<Scalars['Boolean']['input']>;
};

export type OrderContainerc7bd19275a1d3cc6 = {
  /** The constraint sorts returned references by applying ordering constraint on referenced entity group. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/reference#entity-group-property) */
  entityGroupProperty?: InputMaybe<Array<OrderContainer670a07c21adba5c9>>;
  /** The constraint sorts returned entities by ordering of the values specified in arguments. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-primary-key-order) */
  entityPrimaryKeyExact?: InputMaybe<Array<Scalars['Int']['input']>>;
  /** The constraint sorts returned entities by primary key in specific order. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/comparable#primary-key-natural) */
  entityPrimaryKeyNatural?: InputMaybe<OrderDirection>;
  /** The constraint sorts returned references by applying ordering constraint on referenced entity. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/reference#entity-property) */
  entityProperty?: InputMaybe<Array<OrderContainer670a07c21adba5c9>>;
  /** The constraint sorts returned entities randomly. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/random#random) */
  random?: InputMaybe<Scalars['Boolean']['input']>;
};

export type OrderContainerc48ced511efb6976 = {
  /** The constraint sorts returned references by applying ordering constraint on referenced entity group. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/reference#entity-group-property) */
  entityGroupProperty?: InputMaybe<Array<OrderContaineraff1014cee092cf7>>;
  /** The constraint sorts returned entities by ordering of the values specified in arguments. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-primary-key-order) */
  entityPrimaryKeyExact?: InputMaybe<Array<Scalars['Int']['input']>>;
  /** The constraint sorts returned entities by primary key in specific order. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/comparable#primary-key-natural) */
  entityPrimaryKeyNatural?: InputMaybe<OrderDirection>;
  /** The constraint sorts returned references by applying ordering constraint on referenced entity. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/reference#entity-property) */
  entityProperty?: InputMaybe<Array<OrderContaineraff1014cee092cf7>>;
  /** The constraint sorts returned entities randomly. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/random#random) */
  random?: InputMaybe<Scalars['Boolean']['input']>;
};

export type OrderContainerc445bae2bad3e58 = {
  /** The constraint sorts returned references by applying ordering constraint on referenced entity group. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/reference#entity-group-property) */
  entityGroupProperty?: InputMaybe<Array<OrderContainer60ec14e01e238dfe>>;
  /** The constraint sorts returned entities by ordering of the values specified in arguments. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-primary-key-order) */
  entityPrimaryKeyExact?: InputMaybe<Array<Scalars['Int']['input']>>;
  /** The constraint sorts returned entities by primary key in specific order. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/comparable#primary-key-natural) */
  entityPrimaryKeyNatural?: InputMaybe<OrderDirection>;
  /** The constraint sorts returned references by applying ordering constraint on referenced entity. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/reference#entity-property) */
  entityProperty?: InputMaybe<Array<OrderContainer60ec14e01e238dfe>>;
  /** The constraint sorts returned entities randomly. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/random#random) */
  random?: InputMaybe<Scalars['Boolean']['input']>;
};

export type OrderContainerc9679cdc80b33b45 = {
  /** The constraint sorts returned references by applying ordering constraint on referenced entity group. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/reference#entity-group-property) */
  entityGroupProperty?: InputMaybe<Array<OrderContainer441ef63c5ca7dd1c>>;
  /** The constraint sorts returned entities by ordering of the values specified in arguments. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-primary-key-order) */
  entityPrimaryKeyExact?: InputMaybe<Array<Scalars['Int']['input']>>;
  /** The constraint sorts returned entities by primary key in specific order. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/comparable#primary-key-natural) */
  entityPrimaryKeyNatural?: InputMaybe<OrderDirection>;
  /** The constraint sorts returned references by applying ordering constraint on referenced entity. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/reference#entity-property) */
  entityProperty?: InputMaybe<Array<OrderContainer441ef63c5ca7dd1c>>;
  /** The constraint sorts returned entities randomly. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/random#random) */
  random?: InputMaybe<Scalars['Boolean']['input']>;
};

export type OrderContainerc1398334fa8f22a = {
  /** The constraint sorts returned entities by natural ordering of the values in the specified attribute. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/comparable#attribute-natural) */
  attributeChangedNatural?: InputMaybe<OrderDirection>;
  /** The constraint sorts returned entities by ordering of the values specified in arguments matching the entity attribute of specified name. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-attribute-value-order) */
  attributeChangedSetExact?: InputMaybe<Array<Scalars['OffsetDateTime']['input']>>;
  /** The constraint sorts returned entities by ordering of the values specified `attributeInSet` in filter sharing the same attribute name. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-attribute-value-order-used-in-filter) */
  attributeChangedSetInFilter?: InputMaybe<Scalars['Boolean']['input']>;
  /** The constraint sorts returned entities by natural ordering of the values in the specified attribute. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/comparable#attribute-natural) */
  attributeCodeNatural?: InputMaybe<OrderDirection>;
  /** The constraint sorts returned entities by ordering of the values specified in arguments matching the entity attribute of specified name. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-attribute-value-order) */
  attributeCodeSetExact?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint sorts returned entities by ordering of the values specified `attributeInSet` in filter sharing the same attribute name. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-attribute-value-order-used-in-filter) */
  attributeCodeSetInFilter?: InputMaybe<Scalars['Boolean']['input']>;
  /** The constraint sorts returned entities by natural ordering of the values in the specified attribute. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/comparable#attribute-natural) */
  attributeNameNatural?: InputMaybe<OrderDirection>;
  /** The constraint sorts returned entities by ordering of the values specified in arguments matching the entity attribute of specified name. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-attribute-value-order) */
  attributeNameSetExact?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint sorts returned entities by ordering of the values specified `attributeInSet` in filter sharing the same attribute name. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-attribute-value-order-used-in-filter) */
  attributeNameSetInFilter?: InputMaybe<Scalars['Boolean']['input']>;
  /** The constraint sorts returned entities by natural ordering of the values in the specified attribute. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/comparable#attribute-natural) */
  attributeOrderNatural?: InputMaybe<OrderDirection>;
  /** The constraint sorts returned entities by ordering of the values specified in arguments matching the entity attribute of specified name. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-attribute-value-order) */
  attributeOrderSetExact?: InputMaybe<Array<Scalars['Predecessor']['input']>>;
  /** The constraint sorts returned entities by ordering of the values specified `attributeInSet` in filter sharing the same attribute name. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-attribute-value-order-used-in-filter) */
  attributeOrderSetInFilter?: InputMaybe<Scalars['Boolean']['input']>;
  /** The constraint sorts returned entities by natural ordering of the values in the specified attribute. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/comparable#attribute-natural) */
  attributePublishedNatural?: InputMaybe<OrderDirection>;
  /** The constraint sorts returned entities by ordering of the values specified in arguments matching the entity attribute of specified name. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-attribute-value-order) */
  attributePublishedSetExact?: InputMaybe<Array<Scalars['OffsetDateTime']['input']>>;
  /** The constraint sorts returned entities by ordering of the values specified `attributeInSet` in filter sharing the same attribute name. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-attribute-value-order-used-in-filter) */
  attributePublishedSetInFilter?: InputMaybe<Scalars['Boolean']['input']>;
  /** The constraint sorts returned entities by ordering of the values specified in arguments. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-primary-key-order) */
  entityPrimaryKeyExact?: InputMaybe<Array<Scalars['Int']['input']>>;
  /** The constraint sorts returned entities by ordering of the values specified `entityPrimaryKeysInSet` in filter. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-primary-key-order-used-in-filter) */
  entityPrimaryKeyInFilter?: InputMaybe<Scalars['Boolean']['input']>;
  /** The constraint sorts returned entities by primary key in specific order. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/comparable#primary-key-natural) */
  entityPrimaryKeyNatural?: InputMaybe<OrderDirection>;
  /** The constraint sorts returned entities randomly. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/random#random) */
  random?: InputMaybe<Scalars['Boolean']['input']>;
  /** The constraint sorts returned entities or references by attribute specified on its reference in natural order. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/reference#reference-property) */
  referenceBonusItemsProperty?: InputMaybe<Array<OrderContainer5e937eaca1b948e1>>;
};

export type OrderContainercc58d2a51136e64a = {
  /** The constraint sorts returned entities by natural ordering of the values in the specified attribute. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/comparable#attribute-natural) */
  attributeOrderInGroupNatural?: InputMaybe<OrderDirection>;
  /** The constraint sorts returned entities by ordering of the values specified in arguments matching the entity attribute of specified name. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-attribute-value-order) */
  attributeOrderInGroupSetExact?: InputMaybe<Array<Scalars['Int']['input']>>;
  /** The constraint sorts returned references by applying ordering constraint on referenced entity group. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/reference#entity-group-property) */
  entityGroupProperty?: InputMaybe<Array<OrderContainerd7735c5c37d5547c>>;
  /** The constraint sorts returned entities by ordering of the values specified in arguments. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-primary-key-order) */
  entityPrimaryKeyExact?: InputMaybe<Array<Scalars['Int']['input']>>;
  /** The constraint sorts returned entities by primary key in specific order. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/comparable#primary-key-natural) */
  entityPrimaryKeyNatural?: InputMaybe<OrderDirection>;
  /** The constraint sorts returned references by applying ordering constraint on referenced entity. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/reference#entity-property) */
  entityProperty?: InputMaybe<Array<OrderContainerd7735c5c37d5547c>>;
  /** The constraint sorts returned entities randomly. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/random#random) */
  random?: InputMaybe<Scalars['Boolean']['input']>;
};

export type OrderContainerd0162863fcee4fc6 = {
  /** The constraint sorts returned entities by natural ordering of the values in the specified attribute. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/comparable#attribute-natural) */
  attributeOrderInRelationNatural?: InputMaybe<OrderDirection>;
  /** The constraint sorts returned entities by ordering of the values specified in arguments matching the entity attribute of specified name. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-attribute-value-order) */
  attributeOrderInRelationSetExact?: InputMaybe<Array<Scalars['Int']['input']>>;
  /** The constraint sorts returned references by applying ordering constraint on referenced entity group. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/reference#entity-group-property) */
  entityGroupProperty?: InputMaybe<Array<OrderContainer90fb661fce37688>>;
  /** The constraint sorts returned entities by ordering of the values specified in arguments. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-primary-key-order) */
  entityPrimaryKeyExact?: InputMaybe<Array<Scalars['Int']['input']>>;
  /** The constraint sorts returned entities by primary key in specific order. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/comparable#primary-key-natural) */
  entityPrimaryKeyNatural?: InputMaybe<OrderDirection>;
  /** The constraint sorts returned references by applying ordering constraint on referenced entity. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/reference#entity-property) */
  entityProperty?: InputMaybe<Array<OrderContainer90fb661fce37688>>;
  /** The constraint sorts returned entities randomly. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/random#random) */
  random?: InputMaybe<Scalars['Boolean']['input']>;
};

export type OrderContainerd89b7947fe7e7154 = {
  /** The constraint sorts returned references by applying ordering constraint on referenced entity group. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/reference#entity-group-property) */
  entityGroupProperty?: InputMaybe<Array<OrderContainerc1398334fa8f22a>>;
  /** The constraint sorts returned entities by ordering of the values specified in arguments. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-primary-key-order) */
  entityPrimaryKeyExact?: InputMaybe<Array<Scalars['Int']['input']>>;
  /** The constraint sorts returned entities by primary key in specific order. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/comparable#primary-key-natural) */
  entityPrimaryKeyNatural?: InputMaybe<OrderDirection>;
  /** The constraint sorts returned references by applying ordering constraint on referenced entity. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/reference#entity-property) */
  entityProperty?: InputMaybe<Array<OrderContainerc1398334fa8f22a>>;
  /** The constraint sorts returned entities randomly. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/random#random) */
  random?: InputMaybe<Scalars['Boolean']['input']>;
};

export type OrderContainerd961bc3fab551bb0 = {
  /** The constraint sorts returned entities by natural ordering of the values in the specified attribute. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/comparable#attribute-natural) */
  attributeChangedNatural?: InputMaybe<OrderDirection>;
  /** The constraint sorts returned entities by ordering of the values specified in arguments matching the entity attribute of specified name. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-attribute-value-order) */
  attributeChangedSetExact?: InputMaybe<Array<Scalars['OffsetDateTime']['input']>>;
  /** The constraint sorts returned entities by ordering of the values specified `attributeInSet` in filter sharing the same attribute name. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-attribute-value-order-used-in-filter) */
  attributeChangedSetInFilter?: InputMaybe<Scalars['Boolean']['input']>;
  /** The constraint sorts returned entities by natural ordering of the values in the specified attribute. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/comparable#attribute-natural) */
  attributeCodeNatural?: InputMaybe<OrderDirection>;
  /** The constraint sorts returned entities by ordering of the values specified in arguments matching the entity attribute of specified name. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-attribute-value-order) */
  attributeCodeSetExact?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint sorts returned entities by ordering of the values specified `attributeInSet` in filter sharing the same attribute name. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-attribute-value-order-used-in-filter) */
  attributeCodeSetInFilter?: InputMaybe<Scalars['Boolean']['input']>;
  /** The constraint sorts returned entities by natural ordering of the values in the specified attribute. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/comparable#attribute-natural) */
  attributeNameNatural?: InputMaybe<OrderDirection>;
  /** The constraint sorts returned entities by ordering of the values specified in arguments matching the entity attribute of specified name. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-attribute-value-order) */
  attributeNameSetExact?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint sorts returned entities by ordering of the values specified `attributeInSet` in filter sharing the same attribute name. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-attribute-value-order-used-in-filter) */
  attributeNameSetInFilter?: InputMaybe<Scalars['Boolean']['input']>;
  /** The constraint sorts returned entities by natural ordering of the values in the specified attribute. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/comparable#attribute-natural) */
  attributeOrderNatural?: InputMaybe<OrderDirection>;
  /** The constraint sorts returned entities by ordering of the values specified in arguments matching the entity attribute of specified name. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-attribute-value-order) */
  attributeOrderSetExact?: InputMaybe<Array<Scalars['Predecessor']['input']>>;
  /** The constraint sorts returned entities by ordering of the values specified `attributeInSet` in filter sharing the same attribute name. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-attribute-value-order-used-in-filter) */
  attributeOrderSetInFilter?: InputMaybe<Scalars['Boolean']['input']>;
  /** The constraint sorts returned entities by natural ordering of the values in the specified attribute. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/comparable#attribute-natural) */
  attributePublishedNatural?: InputMaybe<OrderDirection>;
  /** The constraint sorts returned entities by ordering of the values specified in arguments matching the entity attribute of specified name. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-attribute-value-order) */
  attributePublishedSetExact?: InputMaybe<Array<Scalars['OffsetDateTime']['input']>>;
  /** The constraint sorts returned entities by ordering of the values specified `attributeInSet` in filter sharing the same attribute name. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-attribute-value-order-used-in-filter) */
  attributePublishedSetInFilter?: InputMaybe<Scalars['Boolean']['input']>;
  /** The constraint sorts returned entities by ordering of the values specified in arguments. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-primary-key-order) */
  entityPrimaryKeyExact?: InputMaybe<Array<Scalars['Int']['input']>>;
  /** The constraint sorts returned entities by ordering of the values specified `entityPrimaryKeysInSet` in filter. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-primary-key-order-used-in-filter) */
  entityPrimaryKeyInFilter?: InputMaybe<Scalars['Boolean']['input']>;
  /** The constraint sorts returned entities by primary key in specific order. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/comparable#primary-key-natural) */
  entityPrimaryKeyNatural?: InputMaybe<OrderDirection>;
  /** The constraint sorts returned entities by selected price for sale. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/price#price-natural) */
  priceNatural?: InputMaybe<OrderDirection>;
  /** The constraint sorts returned entities randomly. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/random#random) */
  random?: InputMaybe<Scalars['Boolean']['input']>;
  /** The constraint sorts returned entities or references by attribute specified on its reference in natural order. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/reference#reference-property) */
  referenceRestrictedShippingMethodsProperty?: InputMaybe<Array<OrderContainer2e85f5ede7aaa97>>;
};

export type OrderContainerd7735c5c37d5547c = {
  /** The constraint sorts returned entities by natural ordering of the values in the specified attribute. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/comparable#attribute-natural) */
  attributeChangedNatural?: InputMaybe<OrderDirection>;
  /** The constraint sorts returned entities by ordering of the values specified in arguments matching the entity attribute of specified name. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-attribute-value-order) */
  attributeChangedSetExact?: InputMaybe<Array<Scalars['OffsetDateTime']['input']>>;
  /** The constraint sorts returned entities by ordering of the values specified `attributeInSet` in filter sharing the same attribute name. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-attribute-value-order-used-in-filter) */
  attributeChangedSetInFilter?: InputMaybe<Scalars['Boolean']['input']>;
  /** The constraint sorts returned entities by natural ordering of the values in the specified attribute. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/comparable#attribute-natural) */
  attributeCodeNatural?: InputMaybe<OrderDirection>;
  /** The constraint sorts returned entities by ordering of the values specified in arguments matching the entity attribute of specified name. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-attribute-value-order) */
  attributeCodeSetExact?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint sorts returned entities by ordering of the values specified `attributeInSet` in filter sharing the same attribute name. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-attribute-value-order-used-in-filter) */
  attributeCodeSetInFilter?: InputMaybe<Scalars['Boolean']['input']>;
  /** The constraint sorts returned entities by natural ordering of the values in the specified attribute. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/comparable#attribute-natural) */
  attributeNameNatural?: InputMaybe<OrderDirection>;
  /** The constraint sorts returned entities by ordering of the values specified in arguments matching the entity attribute of specified name. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-attribute-value-order) */
  attributeNameSetExact?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint sorts returned entities by ordering of the values specified `attributeInSet` in filter sharing the same attribute name. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-attribute-value-order-used-in-filter) */
  attributeNameSetInFilter?: InputMaybe<Scalars['Boolean']['input']>;
  /** The constraint sorts returned entities by natural ordering of the values in the specified attribute. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/comparable#attribute-natural) */
  attributeOrderNatural?: InputMaybe<OrderDirection>;
  /** The constraint sorts returned entities by ordering of the values specified in arguments matching the entity attribute of specified name. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-attribute-value-order) */
  attributeOrderSetExact?: InputMaybe<Array<Scalars['Predecessor']['input']>>;
  /** The constraint sorts returned entities by ordering of the values specified `attributeInSet` in filter sharing the same attribute name. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-attribute-value-order-used-in-filter) */
  attributeOrderSetInFilter?: InputMaybe<Scalars['Boolean']['input']>;
  /** The constraint sorts returned entities by natural ordering of the values in the specified attribute. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/comparable#attribute-natural) */
  attributePublishedNatural?: InputMaybe<OrderDirection>;
  /** The constraint sorts returned entities by ordering of the values specified in arguments matching the entity attribute of specified name. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-attribute-value-order) */
  attributePublishedSetExact?: InputMaybe<Array<Scalars['OffsetDateTime']['input']>>;
  /** The constraint sorts returned entities by ordering of the values specified `attributeInSet` in filter sharing the same attribute name. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-attribute-value-order-used-in-filter) */
  attributePublishedSetInFilter?: InputMaybe<Scalars['Boolean']['input']>;
  /** The constraint sorts returned entities by ordering of the values specified in arguments. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-primary-key-order) */
  entityPrimaryKeyExact?: InputMaybe<Array<Scalars['Int']['input']>>;
  /** The constraint sorts returned entities by ordering of the values specified `entityPrimaryKeysInSet` in filter. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-primary-key-order-used-in-filter) */
  entityPrimaryKeyInFilter?: InputMaybe<Scalars['Boolean']['input']>;
  /** The constraint sorts returned entities by primary key in specific order. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/comparable#primary-key-natural) */
  entityPrimaryKeyNatural?: InputMaybe<OrderDirection>;
  /** The constraint sorts returned entities randomly. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/random#random) */
  random?: InputMaybe<Scalars['Boolean']['input']>;
};

export type OrderContainerdb7d7f11b340bf77 = {
  /** The constraint sorts returned references by applying ordering constraint on referenced entity group. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/reference#entity-group-property) */
  entityGroupProperty?: InputMaybe<Array<OrderContainer5f9032f190cf0a74>>;
  /** The constraint sorts returned entities by ordering of the values specified in arguments. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-primary-key-order) */
  entityPrimaryKeyExact?: InputMaybe<Array<Scalars['Int']['input']>>;
  /** The constraint sorts returned entities by primary key in specific order. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/comparable#primary-key-natural) */
  entityPrimaryKeyNatural?: InputMaybe<OrderDirection>;
  /** The constraint sorts returned references by applying ordering constraint on referenced entity. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/reference#entity-property) */
  entityProperty?: InputMaybe<Array<OrderContainer5f9032f190cf0a74>>;
  /** The constraint sorts returned entities randomly. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/random#random) */
  random?: InputMaybe<Scalars['Boolean']['input']>;
};

export type OrderContainerdfe938cf264d6dc0 = {
  /** The constraint sorts returned entities by natural ordering of the values in the specified attribute. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/comparable#attribute-natural) */
  attributeChangedNatural?: InputMaybe<OrderDirection>;
  /** The constraint sorts returned entities by ordering of the values specified in arguments matching the entity attribute of specified name. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-attribute-value-order) */
  attributeChangedSetExact?: InputMaybe<Array<Scalars['OffsetDateTime']['input']>>;
  /** The constraint sorts returned entities by ordering of the values specified `attributeInSet` in filter sharing the same attribute name. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-attribute-value-order-used-in-filter) */
  attributeChangedSetInFilter?: InputMaybe<Scalars['Boolean']['input']>;
  /** The constraint sorts returned entities by natural ordering of the values in the specified attribute. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/comparable#attribute-natural) */
  attributeCodeNatural?: InputMaybe<OrderDirection>;
  /** The constraint sorts returned entities by ordering of the values specified in arguments matching the entity attribute of specified name. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-attribute-value-order) */
  attributeCodeSetExact?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint sorts returned entities by ordering of the values specified `attributeInSet` in filter sharing the same attribute name. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-attribute-value-order-used-in-filter) */
  attributeCodeSetInFilter?: InputMaybe<Scalars['Boolean']['input']>;
  /** The constraint sorts returned entities by natural ordering of the values in the specified attribute. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/comparable#attribute-natural) */
  attributeNameNatural?: InputMaybe<OrderDirection>;
  /** The constraint sorts returned entities by ordering of the values specified in arguments matching the entity attribute of specified name. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-attribute-value-order) */
  attributeNameSetExact?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint sorts returned entities by ordering of the values specified `attributeInSet` in filter sharing the same attribute name. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-attribute-value-order-used-in-filter) */
  attributeNameSetInFilter?: InputMaybe<Scalars['Boolean']['input']>;
  /** The constraint sorts returned entities by natural ordering of the values in the specified attribute. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/comparable#attribute-natural) */
  attributeOrderNatural?: InputMaybe<OrderDirection>;
  /** The constraint sorts returned entities by ordering of the values specified in arguments matching the entity attribute of specified name. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-attribute-value-order) */
  attributeOrderSetExact?: InputMaybe<Array<Scalars['Predecessor']['input']>>;
  /** The constraint sorts returned entities by ordering of the values specified `attributeInSet` in filter sharing the same attribute name. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-attribute-value-order-used-in-filter) */
  attributeOrderSetInFilter?: InputMaybe<Scalars['Boolean']['input']>;
  /** The constraint sorts returned entities by natural ordering of the values in the specified attribute. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/comparable#attribute-natural) */
  attributePublishedNatural?: InputMaybe<OrderDirection>;
  /** The constraint sorts returned entities by ordering of the values specified in arguments matching the entity attribute of specified name. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-attribute-value-order) */
  attributePublishedSetExact?: InputMaybe<Array<Scalars['OffsetDateTime']['input']>>;
  /** The constraint sorts returned entities by ordering of the values specified `attributeInSet` in filter sharing the same attribute name. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-attribute-value-order-used-in-filter) */
  attributePublishedSetInFilter?: InputMaybe<Scalars['Boolean']['input']>;
  /** The constraint sorts returned entities by ordering of the values specified in arguments. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-primary-key-order) */
  entityPrimaryKeyExact?: InputMaybe<Array<Scalars['Int']['input']>>;
  /** The constraint sorts returned entities by ordering of the values specified `entityPrimaryKeysInSet` in filter. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-primary-key-order-used-in-filter) */
  entityPrimaryKeyInFilter?: InputMaybe<Scalars['Boolean']['input']>;
  /** The constraint sorts returned entities by primary key in specific order. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/comparable#primary-key-natural) */
  entityPrimaryKeyNatural?: InputMaybe<OrderDirection>;
  /** The constraint sorts returned entities randomly. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/random#random) */
  random?: InputMaybe<Scalars['Boolean']['input']>;
  /** The constraint sorts returned entities or references by attribute specified on its reference in natural order. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/reference#reference-property) */
  referenceShippingMethodProperty?: InputMaybe<Array<OrderContainer3fb06b7b13473bcc>>;
};

export type OrderContainere47e56ee5b3ec965 = {
  /** The constraint sorts returned entities by natural ordering of the values in the specified attribute. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/comparable#attribute-natural) */
  attributeChangedNatural?: InputMaybe<OrderDirection>;
  /** The constraint sorts returned entities by ordering of the values specified in arguments matching the entity attribute of specified name. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-attribute-value-order) */
  attributeChangedSetExact?: InputMaybe<Array<Scalars['OffsetDateTime']['input']>>;
  /** The constraint sorts returned entities by ordering of the values specified `attributeInSet` in filter sharing the same attribute name. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-attribute-value-order-used-in-filter) */
  attributeChangedSetInFilter?: InputMaybe<Scalars['Boolean']['input']>;
  /** The constraint sorts returned entities by natural ordering of the values in the specified attribute. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/comparable#attribute-natural) */
  attributeCodeNatural?: InputMaybe<OrderDirection>;
  /** The constraint sorts returned entities by ordering of the values specified in arguments matching the entity attribute of specified name. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-attribute-value-order) */
  attributeCodeSetExact?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint sorts returned entities by ordering of the values specified `attributeInSet` in filter sharing the same attribute name. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-attribute-value-order-used-in-filter) */
  attributeCodeSetInFilter?: InputMaybe<Scalars['Boolean']['input']>;
  /** The constraint sorts returned entities by natural ordering of the values in the specified attribute. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/comparable#attribute-natural) */
  attributeNameNatural?: InputMaybe<OrderDirection>;
  /** The constraint sorts returned entities by ordering of the values specified in arguments matching the entity attribute of specified name. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-attribute-value-order) */
  attributeNameSetExact?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The constraint sorts returned entities by ordering of the values specified `attributeInSet` in filter sharing the same attribute name. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-attribute-value-order-used-in-filter) */
  attributeNameSetInFilter?: InputMaybe<Scalars['Boolean']['input']>;
  /** The constraint sorts returned entities by natural ordering of the values in the specified attribute. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/comparable#attribute-natural) */
  attributeOrderNatural?: InputMaybe<OrderDirection>;
  /** The constraint sorts returned entities by ordering of the values specified in arguments matching the entity attribute of specified name. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-attribute-value-order) */
  attributeOrderSetExact?: InputMaybe<Array<Scalars['Predecessor']['input']>>;
  /** The constraint sorts returned entities by ordering of the values specified `attributeInSet` in filter sharing the same attribute name. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-attribute-value-order-used-in-filter) */
  attributeOrderSetInFilter?: InputMaybe<Scalars['Boolean']['input']>;
  /** The constraint sorts returned entities by natural ordering of the values in the specified attribute. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/comparable#attribute-natural) */
  attributePublishedNatural?: InputMaybe<OrderDirection>;
  /** The constraint sorts returned entities by ordering of the values specified in arguments matching the entity attribute of specified name. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-attribute-value-order) */
  attributePublishedSetExact?: InputMaybe<Array<Scalars['OffsetDateTime']['input']>>;
  /** The constraint sorts returned entities by ordering of the values specified `attributeInSet` in filter sharing the same attribute name. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-attribute-value-order-used-in-filter) */
  attributePublishedSetInFilter?: InputMaybe<Scalars['Boolean']['input']>;
  /** The constraint sorts returned entities by ordering of the values specified in arguments. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-primary-key-order) */
  entityPrimaryKeyExact?: InputMaybe<Array<Scalars['Int']['input']>>;
  /** The constraint sorts returned entities by ordering of the values specified `entityPrimaryKeysInSet` in filter. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-primary-key-order-used-in-filter) */
  entityPrimaryKeyInFilter?: InputMaybe<Scalars['Boolean']['input']>;
  /** The constraint sorts returned entities by primary key in specific order. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/comparable#primary-key-natural) */
  entityPrimaryKeyNatural?: InputMaybe<OrderDirection>;
  /** The constraint sorts returned entities by selected price for sale. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/price#price-natural) */
  priceNatural?: InputMaybe<OrderDirection>;
  /** The constraint sorts returned entities randomly. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/random#random) */
  random?: InputMaybe<Scalars['Boolean']['input']>;
  /** The constraint sorts returned entities or references by attribute specified on its reference in natural order. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/reference#reference-property) */
  referenceCalculationTagsProperty?: InputMaybe<Array<OrderContainer7d9ecf1c05051af6>>;
  /** The constraint sorts returned entities or references by attribute specified on its reference in natural order. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/reference#reference-property) */
  referenceRestrictedPaymentMethodsProperty?: InputMaybe<Array<OrderContainer776ab88cdf14b588>>;
  /** The constraint sorts returned entities or references by attribute specified on its reference in natural order. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/reference#reference-property) */
  referenceTagsProperty?: InputMaybe<Array<OrderContainer7388522944352f3a>>;
};

export type OrderContainerf6e0ce132e9ec30a = {
  /** The constraint sorts returned entities by natural ordering of the values in the specified attribute. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/comparable#attribute-natural) */
  attributeOrderInRelationNatural?: InputMaybe<OrderDirection>;
  /** The constraint sorts returned entities by ordering of the values specified in arguments matching the entity attribute of specified name. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-attribute-value-order) */
  attributeOrderInRelationSetExact?: InputMaybe<Array<Scalars['Int']['input']>>;
  /** The constraint sorts returned references by applying ordering constraint on referenced entity group. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/reference#entity-group-property) */
  entityGroupProperty?: InputMaybe<Array<OrderContainer90fb661fce37688>>;
  /** The constraint sorts returned entities by ordering of the values specified in arguments. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-primary-key-order) */
  entityPrimaryKeyExact?: InputMaybe<Array<Scalars['Int']['input']>>;
  /** The constraint sorts returned entities by primary key in specific order. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/comparable#primary-key-natural) */
  entityPrimaryKeyNatural?: InputMaybe<OrderDirection>;
  /** The constraint sorts returned references by applying ordering constraint on referenced entity. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/reference#entity-property) */
  entityProperty?: InputMaybe<Array<OrderContainer90fb661fce37688>>;
  /** The constraint sorts returned entities randomly. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/random#random) */
  random?: InputMaybe<Scalars['Boolean']['input']>;
};

export type OrderContainerf2012395f0e8eb6c = {
  /** The constraint sorts returned entities by natural ordering of the values in the specified attribute. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/comparable#attribute-natural) */
  attributeOrderInParameterNatural?: InputMaybe<OrderDirection>;
  /** The constraint sorts returned entities by ordering of the values specified in arguments matching the entity attribute of specified name. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-attribute-value-order) */
  attributeOrderInParameterSetExact?: InputMaybe<Array<Scalars['Predecessor']['input']>>;
  /** The constraint sorts returned references by applying ordering constraint on referenced entity group. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/reference#entity-group-property) */
  entityGroupProperty?: InputMaybe<Array<OrderContainer670a07c21adba5c9>>;
  /** The constraint sorts returned entities by ordering of the values specified in arguments. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/constant#exact-entity-primary-key-order) */
  entityPrimaryKeyExact?: InputMaybe<Array<Scalars['Int']['input']>>;
  /** The constraint sorts returned entities by primary key in specific order. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/comparable#primary-key-natural) */
  entityPrimaryKeyNatural?: InputMaybe<OrderDirection>;
  /** The constraint sorts returned references by applying ordering constraint on referenced entity. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/reference#entity-property) */
  entityProperty?: InputMaybe<Array<OrderContainer670a07c21adba5c9>>;
  /** The constraint sorts returned entities randomly. [Check detailed documentation](https://evitadb.io/documentation/query/ordering/random#random) */
  random?: InputMaybe<Scalars['Boolean']['input']>;
};

export enum OrderDirection {
  Asc = 'ASC',
  Desc = 'DESC'
}

/**
 * Parameter is a set of parameter values that represents the same "property". An example might be a different
 * colors, different sizes, different weights, different packaging and so on.
 * Parameters are not assigned to products - only their exact parameter values. Parameters only group those values
 * together in logical fashion.
 */
export type Parameter = Entity & {
  __typename?: 'Parameter';
  /**
   * Contains set of all locales that were used for localized attributes or associated data of
   * this particular entity.
   *
   */
  allLocales: Array<CatalogLocale>;
  /**
   * Associated data carry additional data entries that are never used for filtering / sorting but may be needed to be fetched
   * along with entity in order to present data to the target consumer (i.e. user / API / bot). Associated data may be stored
   * in slower storage and may contain wide range of data types - from small ones (i.e. numbers, strings, dates) up to large
   * binary arrays representing entire files (i.e. pictures, documents).
   *
   */
  associatedData?: Maybe<ParameterAssociatedData>;
  /**
   * Attributes allows defining set of data that are fetched in bulk along with the reference.
   * Attributes may be used for fast filtering or can be used to sort along.
   *
   */
  attributes?: Maybe<ParameterAttributes>;
  /**
   * Contains set of requested locales for this particular entity.
   *
   */
  locales: Array<CatalogLocale>;
  /**
   * Contains references to parameter groups that allow grouping parameters into logical blocks on product
   * detail page.
   */
  parameterGroups: Array<ParameterParameterGroupsReference>;
  /**
   * Unique Integer positive number representing the entity. Can be used for fast lookup for
   * entity (entities). Primary key must be unique within the same entity type.
   *
   */
  primaryKey: Scalars['Int']['output'];
  /**
   * Type of entity.
   * Entity type is main sharding key - all data of entities with same type are stored in separated collections. Within the
   * entity type entity is uniquely represented by primary key.
   *
   */
  type: Scalars['String']['output'];
  /**
   * Contains version of this definition object and gets increased with any entity type update. Allows to execute
   * optimistic locking i.e. avoiding parallel modifications.
   *
   */
  version: Scalars['Int']['output'];
};


/**
 * Parameter is a set of parameter values that represents the same "property". An example might be a different
 * colors, different sizes, different weights, different packaging and so on.
 * Parameters are not assigned to products - only their exact parameter values. Parameters only group those values
 * together in logical fashion.
 */
export type ParameterAssociatedDataArgs = {
  locale?: InputMaybe<CatalogLocale>;
};


/**
 * Parameter is a set of parameter values that represents the same "property". An example might be a different
 * colors, different sizes, different weights, different packaging and so on.
 * Parameters are not assigned to products - only their exact parameter values. Parameters only group those values
 * together in logical fashion.
 */
export type ParameterAttributesArgs = {
  locale?: InputMaybe<CatalogLocale>;
};


/**
 * Parameter is a set of parameter values that represents the same "property". An example might be a different
 * colors, different sizes, different weights, different packaging and so on.
 * Parameters are not assigned to products - only their exact parameter values. Parameters only group those values
 * together in logical fashion.
 */
export type ParameterParameterGroupsArgs = {
  filterBy?: InputMaybe<FilterContainerdada3d3e768d055c>;
  orderBy?: InputMaybe<Array<OrderContainercc58d2a51136e64a>>;
};

/**
 * Associated data carry additional data entries that are never used for filtering / sorting but may be needed to be fetched
 * along with entity in order to present data to the target consumer (i.e. user / API / bot). Associated data may be stored
 * in slower storage and may contain wide range of data types - from small ones (i.e. numbers, strings, dates) up to large
 * binary arrays representing entire files (i.e. pictures, documents).
 *
 */
export type ParameterAssociatedData = {
  __typename?: 'ParameterAssociatedData';
  /**
   * Contains a structure that keeps all currently active URLs for different locales. This information is used
   * for rendering language switching menu. We need to use correct active URL so that user stays looking
   * the exact same entity after the locale switch occurred - just in different language.
   */
  allActiveUrls?: Maybe<Scalars['ComplexDataObject']['output']>;
  /** A structure that allows to specify a set of localized labels for entity. */
  localization?: Maybe<Scalars['ComplexDataObject']['output']>;
};

/**
 * Attributes allows defining set of data that are fetched in bulk along with the entity body.
 * Attributes may be used for fast filtering or can be used to sort along.
 *
 */
export type ParameterAttributes = {
  __typename?: 'ParameterAttributes';
  /**
   * Date and time of the last change of this entity. This timestamp is updated only when real change
   * in entity occurs in primary data store.  This timestamp should be used on boundaries with external
   * systems (such as inventory feeds and so on).
   */
  changed: Scalars['OffsetDateTime']['output'];
  /**
   * Unique code that identifies the entity among other entities of the same kind.
   * The code is equivalent to primary key but is targeted on external consumers (systems).
   */
  code: Scalars['String']['output'];
  /** Full description of the entity in HTML format. */
  description?: Maybe<Scalars['String']['output']>;
  /** Shortened version of description of the entity in plain text. */
  descriptionShort?: Maybe<Scalars['String']['output']>;
  /**
   * Contains type of the widget that should be used for parameter input in filter.
   * Currently supported are only:
   *
   *    - checkbox
   *    - interval
   */
  inputWidgetType: Scalars['String']['output'];
  /** Contains true if parameter should be expanded (open) on first display of the filter. */
  isExpandedInFilter: Scalars['Boolean']['output'];
  /**
   * Contains true if parameter should behave in negative fashion - i.e. not to display product that has certain
   * parameter value but on contrary display all other, that do not possess it.
   */
  isNegativeInFilter: Scalars['Boolean']['output'];
  /**
   * Contains true if parameter selection should prevail while user changes displayed category. The selection
   * should be left untouched as long as it produces any sensible result.
   */
  isPersistedInFilter: Scalars['Boolean']['output'];
  /** Contains true if parameter should be displayed as a part of the product detail. */
  isVisibleInDetail: Scalars['Boolean']['output'];
  /** Contains true if parameter should be displayed as a part of the product filter. */
  isVisibleInFilter: Scalars['Boolean']['output'];
  /** Localized name of the entity. */
  name: Scalars['String']['output'];
  /**
   * Order of the entity among other entities sharing the same parent in the listing. Used for sorting entities
   * in ascending order.
   */
  order: Scalars['Predecessor']['output'];
  /**
   * Date and time when this entity was last published in the evitaDB index. This timestamp will usually
   * be different from the `changed` attribute because the publishing process asynchronously picks up
   * changed entities and publishes them to the evitaDB index with some delay. Also, when evitaDB is
   * completely re-indexed, all timestamps in this attribute will be reset to a new timestamp, while the
   * `changed` attribute will remain the same.
   *
   */
  published: Scalars['OffsetDateTime']['output'];
  /**
   * Returns the status of the entity:
   *
   * - ACTIVE: entity is available on frontend
   * - PRIVATE: entity is  not available on frontend, but it's visible in administration
   */
  status: Scalars['String']['output'];
  /**
   * There are currently three types of parameter sub-types:
   *
   * - STANDARD: is a parameter type that is commonly used
   * - SYNTHETIC: is a parameter type that encapsulates / combines several standard types into one synthetic type
   * - Example:
   *    - dark red     \
   *    - light red     => RED
   *    - red          /
   */
  subType: Scalars['String']['output'];
  /** Localized and globally unique URL of the entity. */
  url?: Maybe<Scalars['String']['output']>;
  /**
   * Old URLs that has been originally assigned to the entity, but are no longer active. Each value that was
   * once `url` but was changed to something else is moved to this list. Thi allows accessing the entity even
   * on the previous location (with redirect) so that remembered URLs in external systems don't end up with
   * "entity not found" response.
   */
  urlInactive?: Maybe<Array<Scalars['String']['output']>>;
  /**
   * Date time range of general accessibility to the entity. Outside this range the entity behaves like if
   * the status was set to PRIVATE.
   */
  validity?: Maybe<Scalars['DateTimeRange']['output']>;
  /**
   * Returns the visibility state of the entity:
   * 	- VISIBLE: entity is visible in signposts, searchable, accessible on detail page
   * 	- INVISIBLE: the entity is only available on a specific detail page (with URL knowledge),
   * 		is not searchable and is not present in listings
   */
  visibility: Scalars['String']['output'];
};

/**
 * Map of requested extra results besides actual found records.
 *
 */
export type ParameterExtraResults = {
  __typename?: 'ParameterExtraResults';
  attributeHistograms?: Maybe<Array<AttributeNamedHistogram>>;
  /**
   * Returns object containing detailed information about query processing time and its decomposition to single operations.
   *
   */
  queryTelemetry: Scalars['Object']['output'];
};


/**
 * Map of requested extra results besides actual found records.
 *
 */
export type ParameterExtraResultsAttributeHistogramsArgs = {
  attributes: Array<Scalars['String']['input']>;
};


/**
 * Map of requested extra results besides actual found records.
 *
 */
export type ParameterExtraResultsQueryTelemetryArgs = {
  formatted?: InputMaybe<Scalars['Boolean']['input']>;
};

/**
 * Parameter group allows grouping multiple product parameter into one logical block. The group has no other
 * purpose except this one.
 */
export type ParameterGroup = Entity & {
  __typename?: 'ParameterGroup';
  /**
   * Contains set of all locales that were used for localized attributes or associated data of
   * this particular entity.
   *
   */
  allLocales: Array<CatalogLocale>;
  /**
   * Associated data carry additional data entries that are never used for filtering / sorting but may be needed to be fetched
   * along with entity in order to present data to the target consumer (i.e. user / API / bot). Associated data may be stored
   * in slower storage and may contain wide range of data types - from small ones (i.e. numbers, strings, dates) up to large
   * binary arrays representing entire files (i.e. pictures, documents).
   *
   */
  associatedData?: Maybe<ParameterGroupAssociatedData>;
  /**
   * Attributes allows defining set of data that are fetched in bulk along with the reference.
   * Attributes may be used for fast filtering or can be used to sort along.
   *
   */
  attributes?: Maybe<ParameterGroupAttributes>;
  /**
   * Contains set of requested locales for this particular entity.
   *
   */
  locales: Array<CatalogLocale>;
  /**
   * Unique Integer positive number representing the entity. Can be used for fast lookup for
   * entity (entities). Primary key must be unique within the same entity type.
   *
   */
  primaryKey: Scalars['Int']['output'];
  /**
   * Type of entity.
   * Entity type is main sharding key - all data of entities with same type are stored in separated collections. Within the
   * entity type entity is uniquely represented by primary key.
   *
   */
  type: Scalars['String']['output'];
  /**
   * Contains version of this definition object and gets increased with any entity type update. Allows to execute
   * optimistic locking i.e. avoiding parallel modifications.
   *
   */
  version: Scalars['Int']['output'];
};


/**
 * Parameter group allows grouping multiple product parameter into one logical block. The group has no other
 * purpose except this one.
 */
export type ParameterGroupAssociatedDataArgs = {
  locale?: InputMaybe<CatalogLocale>;
};


/**
 * Parameter group allows grouping multiple product parameter into one logical block. The group has no other
 * purpose except this one.
 */
export type ParameterGroupAttributesArgs = {
  locale?: InputMaybe<CatalogLocale>;
};

/**
 * Associated data carry additional data entries that are never used for filtering / sorting but may be needed to be fetched
 * along with entity in order to present data to the target consumer (i.e. user / API / bot). Associated data may be stored
 * in slower storage and may contain wide range of data types - from small ones (i.e. numbers, strings, dates) up to large
 * binary arrays representing entire files (i.e. pictures, documents).
 *
 */
export type ParameterGroupAssociatedData = {
  __typename?: 'ParameterGroupAssociatedData';
  /**
   * Contains a structure that keeps all currently active URLs for different locales. This information is used
   * for rendering language switching menu. We need to use correct active URL so that user stays looking
   * the exact same entity after the locale switch occurred - just in different language.
   */
  allActiveUrls?: Maybe<Scalars['ComplexDataObject']['output']>;
  /** A structure that allows to specify a set of localized labels for entity. */
  localization?: Maybe<Scalars['ComplexDataObject']['output']>;
};

/**
 * Attributes allows defining set of data that are fetched in bulk along with the entity body.
 * Attributes may be used for fast filtering or can be used to sort along.
 *
 */
export type ParameterGroupAttributes = {
  __typename?: 'ParameterGroupAttributes';
  /**
   * Date and time of the last change of this entity. This timestamp is updated only when real change
   * in entity occurs in primary data store.  This timestamp should be used on boundaries with external
   * systems (such as inventory feeds and so on).
   */
  changed: Scalars['OffsetDateTime']['output'];
  /**
   * Unique code that identifies the entity among other entities of the same kind.
   * The code is equivalent to primary key but is targeted on external consumers (systems).
   */
  code: Scalars['String']['output'];
  /** Full description of the entity in HTML format. */
  description?: Maybe<Scalars['String']['output']>;
  /** Shortened version of description of the entity in plain text. */
  descriptionShort?: Maybe<Scalars['String']['output']>;
  /** Localized name of the entity. */
  name: Scalars['String']['output'];
  /**
   * Order of the entity among other entities sharing the same parent in the listing. Used for sorting entities
   * in ascending order.
   */
  order: Scalars['Predecessor']['output'];
  /**
   * Date and time when this entity was last published in the evitaDB index. This timestamp will usually
   * be different from the `changed` attribute because the publishing process asynchronously picks up
   * changed entities and publishes them to the evitaDB index with some delay. Also, when evitaDB is
   * completely re-indexed, all timestamps in this attribute will be reset to a new timestamp, while the
   * `changed` attribute will remain the same.
   *
   */
  published: Scalars['OffsetDateTime']['output'];
  /**
   * Returns the status of the entity:
   *
   * - ACTIVE: entity is available on frontend
   * - PRIVATE: entity is  not available on frontend, but it's visible in administration
   */
  status: Scalars['String']['output'];
  /** Localized and globally unique URL of the entity. */
  url?: Maybe<Scalars['String']['output']>;
  /**
   * Old URLs that has been originally assigned to the entity, but are no longer active. Each value that was
   * once `url` but was changed to something else is moved to this list. Thi allows accessing the entity even
   * on the previous location (with redirect) so that remembered URLs in external systems don't end up with
   * "entity not found" response.
   */
  urlInactive?: Maybe<Array<Scalars['String']['output']>>;
  /**
   * Date time range of general accessibility to the entity. Outside this range the entity behaves like if
   * the status was set to PRIVATE.
   */
  validity?: Maybe<Scalars['DateTimeRange']['output']>;
  /**
   * Returns the visibility state of the entity:
   * 	- VISIBLE: entity is visible in signposts, searchable, accessible on detail page
   * 	- INVISIBLE: the entity is only available on a specific detail page (with URL knowledge),
   * 		is not searchable and is not present in listings
   */
  visibility: Scalars['String']['output'];
};

/**
 * Map of requested extra results besides actual found records.
 *
 */
export type ParameterGroupExtraResults = {
  __typename?: 'ParameterGroupExtraResults';
  attributeHistograms?: Maybe<Array<AttributeNamedHistogram>>;
  /**
   * Returns object containing detailed information about query processing time and its decomposition to single operations.
   *
   */
  queryTelemetry: Scalars['Object']['output'];
};


/**
 * Map of requested extra results besides actual found records.
 *
 */
export type ParameterGroupExtraResultsAttributeHistogramsArgs = {
  attributes: Array<Scalars['String']['input']>;
};


/**
 * Map of requested extra results besides actual found records.
 *
 */
export type ParameterGroupExtraResultsQueryTelemetryArgs = {
  formatted?: InputMaybe<Scalars['Boolean']['input']>;
};

/**
 * Contains all possible local mutations to perform on entity `ParameterGroup`.
 *
 */
export type ParameterGroupLocalMutationAggregate = {
  /**
   * Increments or decrements existing numeric value by specified delta (negative number produces decremental of
   * existing number, positive one incrementation).
   *
   * Allows to specify the number range that is tolerated for the value after delta application has been finished to
   * verify for example that number of items on stock doesn't go below zero.
   *
   */
  applyDeltaAttributeMutation?: InputMaybe<ApplyDeltaAttributeMutation>;
  /**
   * Remove associated data mutation will drop existing associatedData - ie.generates new version of the associated data with tombstone
   * on it.
   *
   */
  removeAssociatedDataMutation?: InputMaybe<RemoveAssociatedDataMutation>;
  /**
   * Remove attribute mutation will drop existing attribute - ie.generates new version of the attribute with tombstone
   * on it.
   *
   */
  removeAttributeMutation?: InputMaybe<RemoveAttributeMutation>;
  /**
   * Upsert associatedData mutation will either update existing associatedData or create new one.
   *
   */
  upsertAssociatedDataMutation?: InputMaybe<UpsertAssociatedDataMutation>;
  /**
   * Upsert attribute mutation will either update existing attribute or create new one.
   *
   */
  upsertAttributeMutation?: InputMaybe<UpsertAttributeMutation>;
};

/**
 * Page of records according to pagination rules in input query.
 *
 */
export type ParameterGroupRecordPage = {
  __typename?: 'ParameterGroupRecordPage';
  /**
   * Actual found sorted page/strip of records.
   *
   */
  data: Array<ParameterGroup>;
  /**
   * Returns true if there are no data available.
   *
   */
  empty: Scalars['Boolean']['output'];
  /**
   * Returns true if current page/strip is the first page/strip in the result set.
   *
   */
  first: Scalars['Boolean']['output'];
  /**
   * Returns offset of the first record of current page with current pageSize.
   *
   */
  firstPageItemNumber: Scalars['Int']['output'];
  /**
   * Returns true if there is next page/strip available.
   *
   */
  hasNext: Scalars['Boolean']['output'];
  /**
   * Returns true if there is previous page/strip available.
   *
   */
  hasPrevious: Scalars['Boolean']['output'];
  /**
   * Returns true if current page/strip is the last page/strip in the result set.
   *
   */
  last: Scalars['Boolean']['output'];
  /**
   * Returns offset of the last record of current page with current pageSize.
   *
   */
  lastPageItemNumber: Scalars['Int']['output'];
  /**
   * Returns number of the last page that can be accessed with current number of records.
   * Returns -1 when offset/limit was used for creating paginated list.
   *
   */
  lastPageNumber: Scalars['Int']['output'];
  /**
   * Returns current page number (indexed from 1).
   *
   */
  pageNumber: Scalars['Int']['output'];
  /**
   * Returns number of records per single page.
   *
   */
  pageSize: Scalars['Int']['output'];
  /**
   * Returns true if there is only single page/strip available (i.e. total record count < record count on one page).
   *
   */
  singlePage: Scalars['Boolean']['output'];
  /**
   * Returns total number of records that are possible to fetch by paginating entire result stream.
   *
   */
  totalRecordCount: Scalars['Int']['output'];
};

/**
 * Strip of records according to offset and limit rules in input query.
 *
 */
export type ParameterGroupRecordStrip = {
  __typename?: 'ParameterGroupRecordStrip';
  /**
   * Actual found sorted page/strip of records.
   *
   */
  data: Array<ParameterGroup>;
  /**
   * Returns true if there are no data available.
   *
   */
  empty: Scalars['Boolean']['output'];
  /**
   * Returns true if current page/strip is the first page/strip in the result set.
   *
   */
  first: Scalars['Boolean']['output'];
  /**
   * Returns true if there is next page/strip available.
   *
   */
  hasNext: Scalars['Boolean']['output'];
  /**
   * Returns true if there is previous page/strip available.
   *
   */
  hasPrevious: Scalars['Boolean']['output'];
  /**
   * Returns true if current page/strip is the last page/strip in the result set.
   *
   */
  last: Scalars['Boolean']['output'];
  /**
   * Returns limit - i.e. maximal number of records that are requested after offset.
   *
   */
  limit: Scalars['Int']['output'];
  /**
   * Returns current offset (indexed from 0).
   *
   */
  offset: Scalars['Int']['output'];
  /**
   * Returns true if there is only single page/strip available (i.e. total record count < record count on one page).
   *
   */
  singlePage: Scalars['Boolean']['output'];
  /**
   * Returns total number of records that are possible to fetch by paginating entire result stream.
   *
   */
  totalRecordCount: Scalars['Int']['output'];
};

/**
 * Evita response contains all results to single query. Results are divided to two parts - main results returned by
 * `recordPage`/`recordStrip` and set of extra results retrieved by `extraResults`.
 *
 */
export type ParameterGroupResponse = {
  __typename?: 'ParameterGroupResponse';
  /**
   * Returns map of requested extra results besides actual found records.
   *
   */
  extraResults: ParameterGroupExtraResults;
  /**
   * Returns page of records according to pagination rules in input query.
   * Either `page` or `strip` can be used, not both.
   *
   */
  recordPage?: Maybe<ParameterGroupRecordPage>;
  /**
   * Returns strip of records according to pagination rules in input query.
   * Either `page` or `strip` can be used, not both.
   *
   */
  recordStrip?: Maybe<ParameterGroupRecordStrip>;
};


/**
 * Evita response contains all results to single query. Results are divided to two parts - main results returned by
 * `recordPage`/`recordStrip` and set of extra results retrieved by `extraResults`.
 *
 */
export type ParameterGroupResponseRecordPageArgs = {
  number?: InputMaybe<Scalars['Int']['input']>;
  size?: InputMaybe<Scalars['Int']['input']>;
};


/**
 * Evita response contains all results to single query. Results are divided to two parts - main results returned by
 * `recordPage`/`recordStrip` and set of extra results retrieved by `extraResults`.
 *
 */
export type ParameterGroupResponseRecordStripArgs = {
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
};

/**
 * Contains all possible local mutations to perform on entity `Parameter`.
 *
 */
export type ParameterLocalMutationAggregate = {
  /**
   * Increments or decrements existing numeric value by specified delta (negative number produces decremental of
   * existing number, positive one incrementation).
   *
   * Allows to specify the number range that is tolerated for the value after delta application has been finished to
   * verify for example that number of items on stock doesn't go below zero.
   *
   */
  applyDeltaAttributeMutation?: InputMaybe<ApplyDeltaAttributeMutation>;
  /**
   * This mutation allows to create a reference in the entity.
   *
   */
  insertReferenceMutation?: InputMaybe<InsertReferenceMutation>;
  /**
   * This mutation allows to create / update / remove attribute of the reference.
   *
   */
  referenceAttributeMutation?: InputMaybe<ReferenceAttributeMutation>;
  /**
   * Remove associated data mutation will drop existing associatedData - ie.generates new version of the associated data with tombstone
   * on it.
   *
   */
  removeAssociatedDataMutation?: InputMaybe<RemoveAssociatedDataMutation>;
  /**
   * Remove attribute mutation will drop existing attribute - ie.generates new version of the attribute with tombstone
   * on it.
   *
   */
  removeAttributeMutation?: InputMaybe<RemoveAttributeMutation>;
  /**
   * This mutation allows to remove group in the reference.
   *
   */
  removeReferenceGroupMutation?: InputMaybe<RemoveReferenceGroupMutation>;
  /**
   * This mutation allows to remove a reference from the entity.
   *
   */
  removeReferenceMutation?: InputMaybe<RemoveReferenceMutation>;
  /**
   * This mutation allows to create / update group of the reference.
   *
   */
  setReferenceGroupMutation?: InputMaybe<SetReferenceGroupMutation>;
  /**
   * Upsert associatedData mutation will either update existing associatedData or create new one.
   *
   */
  upsertAssociatedDataMutation?: InputMaybe<UpsertAssociatedDataMutation>;
  /**
   * Upsert attribute mutation will either update existing attribute or create new one.
   *
   */
  upsertAttributeMutation?: InputMaybe<UpsertAttributeMutation>;
};

/**
 * Attributes allows defining set of data that are fetched in bulk along with the entity body.
 * Attributes may be used for fast filtering or can be used to sort along.
 *
 */
export type ParameterParameterGroupsAttributes = {
  __typename?: 'ParameterParameterGroupsAttributes';
  /**
   * Order of the entity among other parameters within the same group in the listing. Used for sorting entities
   * in ascending order.
   */
  orderInGroup: Scalars['Int']['output'];
};

/**
 * Contains references to parameter groups that allow grouping parameters into logical blocks on product
 * detail page.
 */
export type ParameterParameterGroupsReference = {
  __typename?: 'ParameterParameterGroupsReference';
  /**
   * Attributes allows defining set of data that are fetched in bulk along with the reference.
   * Attributes may be used for fast filtering or can be used to sort along.
   *
   */
  attributes?: Maybe<ParameterParameterGroupsAttributes>;
  /**
   * Returns body of the referenced entity in case its fetching was requested via entity_fetch constraint.
   *
   */
  referencedEntity?: Maybe<ParameterGroup>;
  /**
   *          Returns primary key of the referenced (internal or external) entity.
   *
   */
  referencedPrimaryKey: Scalars['Int']['output'];
};

/**
 * Page of records according to pagination rules in input query.
 *
 */
export type ParameterRecordPage = {
  __typename?: 'ParameterRecordPage';
  /**
   * Actual found sorted page/strip of records.
   *
   */
  data: Array<Parameter>;
  /**
   * Returns true if there are no data available.
   *
   */
  empty: Scalars['Boolean']['output'];
  /**
   * Returns true if current page/strip is the first page/strip in the result set.
   *
   */
  first: Scalars['Boolean']['output'];
  /**
   * Returns offset of the first record of current page with current pageSize.
   *
   */
  firstPageItemNumber: Scalars['Int']['output'];
  /**
   * Returns true if there is next page/strip available.
   *
   */
  hasNext: Scalars['Boolean']['output'];
  /**
   * Returns true if there is previous page/strip available.
   *
   */
  hasPrevious: Scalars['Boolean']['output'];
  /**
   * Returns true if current page/strip is the last page/strip in the result set.
   *
   */
  last: Scalars['Boolean']['output'];
  /**
   * Returns offset of the last record of current page with current pageSize.
   *
   */
  lastPageItemNumber: Scalars['Int']['output'];
  /**
   * Returns number of the last page that can be accessed with current number of records.
   * Returns -1 when offset/limit was used for creating paginated list.
   *
   */
  lastPageNumber: Scalars['Int']['output'];
  /**
   * Returns current page number (indexed from 1).
   *
   */
  pageNumber: Scalars['Int']['output'];
  /**
   * Returns number of records per single page.
   *
   */
  pageSize: Scalars['Int']['output'];
  /**
   * Returns true if there is only single page/strip available (i.e. total record count < record count on one page).
   *
   */
  singlePage: Scalars['Boolean']['output'];
  /**
   * Returns total number of records that are possible to fetch by paginating entire result stream.
   *
   */
  totalRecordCount: Scalars['Int']['output'];
};

/**
 * Strip of records according to offset and limit rules in input query.
 *
 */
export type ParameterRecordStrip = {
  __typename?: 'ParameterRecordStrip';
  /**
   * Actual found sorted page/strip of records.
   *
   */
  data: Array<Parameter>;
  /**
   * Returns true if there are no data available.
   *
   */
  empty: Scalars['Boolean']['output'];
  /**
   * Returns true if current page/strip is the first page/strip in the result set.
   *
   */
  first: Scalars['Boolean']['output'];
  /**
   * Returns true if there is next page/strip available.
   *
   */
  hasNext: Scalars['Boolean']['output'];
  /**
   * Returns true if there is previous page/strip available.
   *
   */
  hasPrevious: Scalars['Boolean']['output'];
  /**
   * Returns true if current page/strip is the last page/strip in the result set.
   *
   */
  last: Scalars['Boolean']['output'];
  /**
   * Returns limit - i.e. maximal number of records that are requested after offset.
   *
   */
  limit: Scalars['Int']['output'];
  /**
   * Returns current offset (indexed from 0).
   *
   */
  offset: Scalars['Int']['output'];
  /**
   * Returns true if there is only single page/strip available (i.e. total record count < record count on one page).
   *
   */
  singlePage: Scalars['Boolean']['output'];
  /**
   * Returns total number of records that are possible to fetch by paginating entire result stream.
   *
   */
  totalRecordCount: Scalars['Int']['output'];
};

/**
 * Evita response contains all results to single query. Results are divided to two parts - main results returned by
 * `recordPage`/`recordStrip` and set of extra results retrieved by `extraResults`.
 *
 */
export type ParameterResponse = {
  __typename?: 'ParameterResponse';
  /**
   * Returns map of requested extra results besides actual found records.
   *
   */
  extraResults: ParameterExtraResults;
  /**
   * Returns page of records according to pagination rules in input query.
   * Either `page` or `strip` can be used, not both.
   *
   */
  recordPage?: Maybe<ParameterRecordPage>;
  /**
   * Returns strip of records according to pagination rules in input query.
   * Either `page` or `strip` can be used, not both.
   *
   */
  recordStrip?: Maybe<ParameterRecordStrip>;
};


/**
 * Evita response contains all results to single query. Results are divided to two parts - main results returned by
 * `recordPage`/`recordStrip` and set of extra results retrieved by `extraResults`.
 *
 */
export type ParameterResponseRecordPageArgs = {
  number?: InputMaybe<Scalars['Int']['input']>;
  size?: InputMaybe<Scalars['Int']['input']>;
};


/**
 * Evita response contains all results to single query. Results are divided to two parts - main results returned by
 * `recordPage`/`recordStrip` and set of extra results retrieved by `extraResults`.
 *
 */
export type ParameterResponseRecordStripArgs = {
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
};

/**
 * Parameter value is a specific "property" of the product that can be used for differentiating products
 * in a comprehensible way. An example of parameter value might be a specific size - XXL, or color - blue,
 * or packaging - paperback.
 * Single parameter value can be assigned to multiple products. Parameter value can be part of only one parameter.
 */
export type ParameterValue = Entity & {
  __typename?: 'ParameterValue';
  /**
   * Contains set of all locales that were used for localized attributes or associated data of
   * this particular entity.
   *
   */
  allLocales: Array<CatalogLocale>;
  /**
   * Associated data carry additional data entries that are never used for filtering / sorting but may be needed to be fetched
   * along with entity in order to present data to the target consumer (i.e. user / API / bot). Associated data may be stored
   * in slower storage and may contain wide range of data types - from small ones (i.e. numbers, strings, dates) up to large
   * binary arrays representing entire files (i.e. pictures, documents).
   *
   */
  associatedData?: Maybe<ParameterValueAssociatedData>;
  /**
   * Attributes allows defining set of data that are fetched in bulk along with the reference.
   * Attributes may be used for fast filtering or can be used to sort along.
   *
   */
  attributes?: Maybe<ParameterValueAttributes>;
  /**
   * Contains set of requested locales for this particular entity.
   *
   */
  locales: Array<CatalogLocale>;
  /**
   * Contains data about parameter this value relates to. The relation contains also a vital information about
   * the order of the parameter value inside the type.
   */
  parameter?: Maybe<ParameterValueParameterReference>;
  /**
   * Unique Integer positive number representing the entity. Can be used for fast lookup for
   * entity (entities). Primary key must be unique within the same entity type.
   *
   */
  primaryKey: Scalars['Int']['output'];
  /**
   * Contains data about synthetic parameter (if set) this value relates to. The relation contains also vital
   * information about the order of the parameter value inside the type. Synthetic parameter is a parameter
   * that groups multiple parameters together to form a unified one.
   */
  syntheticParameter?: Maybe<ParameterValueSyntheticParameterReference>;
  /**
   * Type of entity.
   * Entity type is main sharding key - all data of entities with same type are stored in separated collections. Within the
   * entity type entity is uniquely represented by primary key.
   *
   */
  type: Scalars['String']['output'];
  /**
   * Contains version of this definition object and gets increased with any entity type update. Allows to execute
   * optimistic locking i.e. avoiding parallel modifications.
   *
   */
  version: Scalars['Int']['output'];
};


/**
 * Parameter value is a specific "property" of the product that can be used for differentiating products
 * in a comprehensible way. An example of parameter value might be a specific size - XXL, or color - blue,
 * or packaging - paperback.
 * Single parameter value can be assigned to multiple products. Parameter value can be part of only one parameter.
 */
export type ParameterValueAssociatedDataArgs = {
  locale?: InputMaybe<CatalogLocale>;
};


/**
 * Parameter value is a specific "property" of the product that can be used for differentiating products
 * in a comprehensible way. An example of parameter value might be a specific size - XXL, or color - blue,
 * or packaging - paperback.
 * Single parameter value can be assigned to multiple products. Parameter value can be part of only one parameter.
 */
export type ParameterValueAttributesArgs = {
  locale?: InputMaybe<CatalogLocale>;
};


/**
 * Parameter value is a specific "property" of the product that can be used for differentiating products
 * in a comprehensible way. An example of parameter value might be a specific size - XXL, or color - blue,
 * or packaging - paperback.
 * Single parameter value can be assigned to multiple products. Parameter value can be part of only one parameter.
 */
export type ParameterValueParameterArgs = {
  filterBy?: InputMaybe<FilterContaineraf11c41d5e9f5526>;
  orderBy?: InputMaybe<Array<OrderContainerf2012395f0e8eb6c>>;
};


/**
 * Parameter value is a specific "property" of the product that can be used for differentiating products
 * in a comprehensible way. An example of parameter value might be a specific size - XXL, or color - blue,
 * or packaging - paperback.
 * Single parameter value can be assigned to multiple products. Parameter value can be part of only one parameter.
 */
export type ParameterValueSyntheticParameterArgs = {
  filterBy?: InputMaybe<FilterContainerde14524bdc4e7315>;
  orderBy?: InputMaybe<Array<OrderContainer948579655a8280e9>>;
};

/**
 * Associated data carry additional data entries that are never used for filtering / sorting but may be needed to be fetched
 * along with entity in order to present data to the target consumer (i.e. user / API / bot). Associated data may be stored
 * in slower storage and may contain wide range of data types - from small ones (i.e. numbers, strings, dates) up to large
 * binary arrays representing entire files (i.e. pictures, documents).
 *
 */
export type ParameterValueAssociatedData = {
  __typename?: 'ParameterValueAssociatedData';
  /**
   * Contains a structure that keeps all currently active URLs for different locales. This information is used
   * for rendering language switching menu. We need to use correct active URL so that user stays looking
   * the exact same entity after the locale switch occurred - just in different language.
   */
  allActiveUrls?: Maybe<Scalars['ComplexDataObject']['output']>;
  /** A structure that allows to specify a set of localized labels for entity. */
  localization?: Maybe<Scalars['ComplexDataObject']['output']>;
};

/**
 * Attributes allows defining set of data that are fetched in bulk along with the entity body.
 * Attributes may be used for fast filtering or can be used to sort along.
 *
 */
export type ParameterValueAttributes = {
  __typename?: 'ParameterValueAttributes';
  /**
   * A numeric value that represents a given parameter value. Value is used when the parameter type is
   * of "interval" type, i.e. its values are fundamentally continuous (e.g. height, width, etc.) to determine
   * the unit of the magnitude.
   */
  basicUnitValue?: Maybe<Scalars['BigDecimal']['output']>;
  /**
   * Date and time of the last change of this entity. This timestamp is updated only when real change
   * in entity occurs in primary data store.  This timestamp should be used on boundaries with external
   * systems (such as inventory feeds and so on).
   */
  changed: Scalars['OffsetDateTime']['output'];
  /**
   * Unique code that identifies the entity among other entities of the same kind.
   * The code is equivalent to primary key but is targeted on external consumers (systems).
   */
  code: Scalars['String']['output'];
  /** Full description of the entity in HTML format. */
  description?: Maybe<Scalars['String']['output']>;
  /** Shortened version of description of the entity in plain text. */
  descriptionShort?: Maybe<Scalars['String']['output']>;
  /** Localized name of the entity. */
  name: Scalars['String']['output'];
  /**
   * Order of the entity among other entities sharing the same parent in the listing. Used for sorting entities
   * in ascending order.
   */
  order: Scalars['Predecessor']['output'];
  /**
   * Date and time when this entity was last published in the evitaDB index. This timestamp will usually
   * be different from the `changed` attribute because the publishing process asynchronously picks up
   * changed entities and publishes them to the evitaDB index with some delay. Also, when evitaDB is
   * completely re-indexed, all timestamps in this attribute will be reset to a new timestamp, while the
   * `changed` attribute will remain the same.
   *
   */
  published: Scalars['OffsetDateTime']['output'];
  /**
   * Returns the status of the entity:
   *
   * - ACTIVE: entity is available on frontend
   * - PRIVATE: entity is  not available on frontend, but it's visible in administration
   */
  status: Scalars['String']['output'];
  /** Localized and globally unique URL of the entity. */
  url?: Maybe<Scalars['String']['output']>;
  /**
   * Old URLs that has been originally assigned to the entity, but are no longer active. Each value that was
   * once `url` but was changed to something else is moved to this list. Thi allows accessing the entity even
   * on the previous location (with redirect) so that remembered URLs in external systems don't end up with
   * "entity not found" response.
   */
  urlInactive?: Maybe<Array<Scalars['String']['output']>>;
  /**
   * Date time range of general accessibility to the entity. Outside this range the entity behaves like if
   * the status was set to PRIVATE.
   */
  validity?: Maybe<Scalars['DateTimeRange']['output']>;
  /**
   * Returns the visibility state of the entity:
   * 	- VISIBLE: entity is visible in signposts, searchable, accessible on detail page
   * 	- INVISIBLE: the entity is only available on a specific detail page (with URL knowledge),
   * 		is not searchable and is not present in listings
   */
  visibility: Scalars['String']['output'];
};


/**
 * Attributes allows defining set of data that are fetched in bulk along with the entity body.
 * Attributes may be used for fast filtering or can be used to sort along.
 *
 */
export type ParameterValueAttributesBasicUnitValueArgs = {
  formatted?: InputMaybe<Scalars['Boolean']['input']>;
};

/**
 * Map of requested extra results besides actual found records.
 *
 */
export type ParameterValueExtraResults = {
  __typename?: 'ParameterValueExtraResults';
  attributeHistograms?: Maybe<Array<AttributeNamedHistogram>>;
  /**
   * Returns summary of all facets that match query filter excluding those inside `userFilter`.
   * Object contains information about facet groups and individual facets in them as well as appropriate statistics for them.
   *
   */
  facetSummary?: Maybe<ParameterValueFacetSummary>;
  /**
   * Returns object containing detailed information about query processing time and its decomposition to single operations.
   *
   */
  queryTelemetry: Scalars['Object']['output'];
};


/**
 * Map of requested extra results besides actual found records.
 *
 */
export type ParameterValueExtraResultsAttributeHistogramsArgs = {
  attributes: Array<Scalars['String']['input']>;
};


/**
 * Map of requested extra results besides actual found records.
 *
 */
export type ParameterValueExtraResultsQueryTelemetryArgs = {
  formatted?: InputMaybe<Scalars['Boolean']['input']>;
};

/**
 * This DTO allows returning summary of all facets that match query filter excluding those inside `userFilter`.
 * DTO contains information about facet groups and individual facets in them as well as appropriate statistics for them.
 *
 */
export type ParameterValueFacetSummary = {
  __typename?: 'ParameterValueFacetSummary';
  syntheticParameter?: Maybe<ParameterValueSyntheticParameterFacetGroupStatistics>;
};

/**
 * Contains all possible local mutations to perform on entity `ParameterValue`.
 *
 */
export type ParameterValueLocalMutationAggregate = {
  /**
   * Increments or decrements existing numeric value by specified delta (negative number produces decremental of
   * existing number, positive one incrementation).
   *
   * Allows to specify the number range that is tolerated for the value after delta application has been finished to
   * verify for example that number of items on stock doesn't go below zero.
   *
   */
  applyDeltaAttributeMutation?: InputMaybe<ApplyDeltaAttributeMutation>;
  /**
   * This mutation allows to create a reference in the entity.
   *
   */
  insertReferenceMutation?: InputMaybe<InsertReferenceMutation>;
  /**
   * This mutation allows to create / update / remove attribute of the reference.
   *
   */
  referenceAttributeMutation?: InputMaybe<ReferenceAttributeMutation>;
  /**
   * Remove associated data mutation will drop existing associatedData - ie.generates new version of the associated data with tombstone
   * on it.
   *
   */
  removeAssociatedDataMutation?: InputMaybe<RemoveAssociatedDataMutation>;
  /**
   * Remove attribute mutation will drop existing attribute - ie.generates new version of the attribute with tombstone
   * on it.
   *
   */
  removeAttributeMutation?: InputMaybe<RemoveAttributeMutation>;
  /**
   * This mutation allows to remove group in the reference.
   *
   */
  removeReferenceGroupMutation?: InputMaybe<RemoveReferenceGroupMutation>;
  /**
   * This mutation allows to remove a reference from the entity.
   *
   */
  removeReferenceMutation?: InputMaybe<RemoveReferenceMutation>;
  /**
   * This mutation allows to create / update group of the reference.
   *
   */
  setReferenceGroupMutation?: InputMaybe<SetReferenceGroupMutation>;
  /**
   * Upsert associatedData mutation will either update existing associatedData or create new one.
   *
   */
  upsertAssociatedDataMutation?: InputMaybe<UpsertAssociatedDataMutation>;
  /**
   * Upsert attribute mutation will either update existing attribute or create new one.
   *
   */
  upsertAttributeMutation?: InputMaybe<UpsertAttributeMutation>;
};

/**
 * Attributes allows defining set of data that are fetched in bulk along with the entity body.
 * Attributes may be used for fast filtering or can be used to sort along.
 *
 */
export type ParameterValueParameterAttributes = {
  __typename?: 'ParameterValueParameterAttributes';
  /**
   * Order of the entity among other parameter values within the same parameter in the listing. Used for sorting
   * entities in ascending order.
   */
  orderInParameter: Scalars['Predecessor']['output'];
};

/**
 * Contains data about parameter this value relates to. The relation contains also a vital information about
 * the order of the parameter value inside the type.
 */
export type ParameterValueParameterReference = {
  __typename?: 'ParameterValueParameterReference';
  /**
   * Attributes allows defining set of data that are fetched in bulk along with the reference.
   * Attributes may be used for fast filtering or can be used to sort along.
   *
   */
  attributes?: Maybe<ParameterValueParameterAttributes>;
  /**
   * Returns body of the referenced entity in case its fetching was requested via entity_fetch constraint.
   *
   */
  referencedEntity?: Maybe<Parameter>;
  /**
   *          Returns primary key of the referenced (internal or external) entity.
   *
   */
  referencedPrimaryKey: Scalars['Int']['output'];
};

/**
 * Page of records according to pagination rules in input query.
 *
 */
export type ParameterValueRecordPage = {
  __typename?: 'ParameterValueRecordPage';
  /**
   * Actual found sorted page/strip of records.
   *
   */
  data: Array<ParameterValue>;
  /**
   * Returns true if there are no data available.
   *
   */
  empty: Scalars['Boolean']['output'];
  /**
   * Returns true if current page/strip is the first page/strip in the result set.
   *
   */
  first: Scalars['Boolean']['output'];
  /**
   * Returns offset of the first record of current page with current pageSize.
   *
   */
  firstPageItemNumber: Scalars['Int']['output'];
  /**
   * Returns true if there is next page/strip available.
   *
   */
  hasNext: Scalars['Boolean']['output'];
  /**
   * Returns true if there is previous page/strip available.
   *
   */
  hasPrevious: Scalars['Boolean']['output'];
  /**
   * Returns true if current page/strip is the last page/strip in the result set.
   *
   */
  last: Scalars['Boolean']['output'];
  /**
   * Returns offset of the last record of current page with current pageSize.
   *
   */
  lastPageItemNumber: Scalars['Int']['output'];
  /**
   * Returns number of the last page that can be accessed with current number of records.
   * Returns -1 when offset/limit was used for creating paginated list.
   *
   */
  lastPageNumber: Scalars['Int']['output'];
  /**
   * Returns current page number (indexed from 1).
   *
   */
  pageNumber: Scalars['Int']['output'];
  /**
   * Returns number of records per single page.
   *
   */
  pageSize: Scalars['Int']['output'];
  /**
   * Returns true if there is only single page/strip available (i.e. total record count < record count on one page).
   *
   */
  singlePage: Scalars['Boolean']['output'];
  /**
   * Returns total number of records that are possible to fetch by paginating entire result stream.
   *
   */
  totalRecordCount: Scalars['Int']['output'];
};

/**
 * Strip of records according to offset and limit rules in input query.
 *
 */
export type ParameterValueRecordStrip = {
  __typename?: 'ParameterValueRecordStrip';
  /**
   * Actual found sorted page/strip of records.
   *
   */
  data: Array<ParameterValue>;
  /**
   * Returns true if there are no data available.
   *
   */
  empty: Scalars['Boolean']['output'];
  /**
   * Returns true if current page/strip is the first page/strip in the result set.
   *
   */
  first: Scalars['Boolean']['output'];
  /**
   * Returns true if there is next page/strip available.
   *
   */
  hasNext: Scalars['Boolean']['output'];
  /**
   * Returns true if there is previous page/strip available.
   *
   */
  hasPrevious: Scalars['Boolean']['output'];
  /**
   * Returns true if current page/strip is the last page/strip in the result set.
   *
   */
  last: Scalars['Boolean']['output'];
  /**
   * Returns limit - i.e. maximal number of records that are requested after offset.
   *
   */
  limit: Scalars['Int']['output'];
  /**
   * Returns current offset (indexed from 0).
   *
   */
  offset: Scalars['Int']['output'];
  /**
   * Returns true if there is only single page/strip available (i.e. total record count < record count on one page).
   *
   */
  singlePage: Scalars['Boolean']['output'];
  /**
   * Returns total number of records that are possible to fetch by paginating entire result stream.
   *
   */
  totalRecordCount: Scalars['Int']['output'];
};

/**
 * Evita response contains all results to single query. Results are divided to two parts - main results returned by
 * `recordPage`/`recordStrip` and set of extra results retrieved by `extraResults`.
 *
 */
export type ParameterValueResponse = {
  __typename?: 'ParameterValueResponse';
  /**
   * Returns map of requested extra results besides actual found records.
   *
   */
  extraResults: ParameterValueExtraResults;
  /**
   * Returns page of records according to pagination rules in input query.
   * Either `page` or `strip` can be used, not both.
   *
   */
  recordPage?: Maybe<ParameterValueRecordPage>;
  /**
   * Returns strip of records according to pagination rules in input query.
   * Either `page` or `strip` can be used, not both.
   *
   */
  recordStrip?: Maybe<ParameterValueRecordStrip>;
};


/**
 * Evita response contains all results to single query. Results are divided to two parts - main results returned by
 * `recordPage`/`recordStrip` and set of extra results retrieved by `extraResults`.
 *
 */
export type ParameterValueResponseRecordPageArgs = {
  number?: InputMaybe<Scalars['Int']['input']>;
  size?: InputMaybe<Scalars['Int']['input']>;
};


/**
 * Evita response contains all results to single query. Results are divided to two parts - main results returned by
 * `recordPage`/`recordStrip` and set of extra results retrieved by `extraResults`.
 *
 */
export type ParameterValueResponseRecordStripArgs = {
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
};

/**
 * Attributes allows defining set of data that are fetched in bulk along with the entity body.
 * Attributes may be used for fast filtering or can be used to sort along.
 *
 */
export type ParameterValueSyntheticParameterAttributes = {
  __typename?: 'ParameterValueSyntheticParameterAttributes';
  /**
   * Order of the entity among other parameter values within the same parameter in the listing. Used for sorting
   * entities in ascending order.
   */
  orderInSyntheticParameter: Scalars['Predecessor']['output'];
};

/**
 * This DTO contains information about single facet group and statistics of the facets that relates to it.
 *
 */
export type ParameterValueSyntheticParameterFacetGroupStatistics = {
  __typename?: 'ParameterValueSyntheticParameterFacetGroupStatistics';
  /**
   * Contains number of distinct entities in the response that possess any reference in this group.
   *
   */
  count: Scalars['Int']['output'];
  /**
   * Contains statistics of individual facets.
   *
   */
  facetStatistics: Array<ParameterValueSyntheticParameterFacetStatistics>;
};


/**
 * This DTO contains information about single facet group and statistics of the facets that relates to it.
 *
 */
export type ParameterValueSyntheticParameterFacetGroupStatisticsFacetStatisticsArgs = {
  filterBy?: InputMaybe<FilterContainer9151b3bab054ab55>;
  orderBy?: InputMaybe<Array<OrderContainer670a07c21adba5c9>>;
};

/**
 * This DTO contains information about single facet statistics of the entities that are present in the response.
 *
 */
export type ParameterValueSyntheticParameterFacetStatistics = {
  __typename?: 'ParameterValueSyntheticParameterFacetStatistics';
  /**
   * Contains number of distinct entities in the response that possess of this reference.
   *
   */
  count: Scalars['Int']['output'];
  /**
   * Contains referenced entity representing.
   *
   */
  facetEntity?: Maybe<Parameter>;
  /**
   * This field is not null only when this facet is not requested.
   * Contains projected impact on the current response if this facet is also requested in filtering constraints.
   *
   */
  impact?: Maybe<FacetRequestImpact>;
  /**
   * Contains TRUE if the facet was part of the query filtering constraints.
   *
   */
  requested: Scalars['Boolean']['output'];
};

/**
 * Contains data about synthetic parameter (if set) this value relates to. The relation contains also vital
 * information about the order of the parameter value inside the type. Synthetic parameter is a parameter
 * that groups multiple parameters together to form a unified one.
 */
export type ParameterValueSyntheticParameterReference = {
  __typename?: 'ParameterValueSyntheticParameterReference';
  /**
   * Attributes allows defining set of data that are fetched in bulk along with the reference.
   * Attributes may be used for fast filtering or can be used to sort along.
   *
   */
  attributes?: Maybe<ParameterValueSyntheticParameterAttributes>;
  /**
   * Returns body of the referenced entity in case its fetching was requested via entity_fetch constraint.
   *
   */
  referencedEntity?: Maybe<Parameter>;
  /**
   *          Returns primary key of the referenced (internal or external) entity.
   *
   */
  referencedPrimaryKey: Scalars['Int']['output'];
};

/** Payment method describes a form of payment procedure that can be selected to pay for the goods by the customer. */
export type PaymentMethod = Entity & {
  __typename?: 'PaymentMethod';
  /**
   * Contains set of all locales that were used for localized attributes or associated data of
   * this particular entity.
   *
   */
  allLocales: Array<CatalogLocale>;
  /**
   * Associated data carry additional data entries that are never used for filtering / sorting but may be needed to be fetched
   * along with entity in order to present data to the target consumer (i.e. user / API / bot). Associated data may be stored
   * in slower storage and may contain wide range of data types - from small ones (i.e. numbers, strings, dates) up to large
   * binary arrays representing entire files (i.e. pictures, documents).
   *
   */
  associatedData?: Maybe<PaymentMethodAssociatedData>;
  /**
   * Attributes allows defining set of data that are fetched in bulk along with the reference.
   * Attributes may be used for fast filtering or can be used to sort along.
   *
   */
  attributes?: Maybe<PaymentMethodAttributes>;
  /**
   * Contains set of requested locales for this particular entity.
   *
   */
  locales: Array<CatalogLocale>;
  /**
   * Single price corresponding to defined arguments picked up from set of all `prices`.
   * If more than one price is found, the valid one is picked. Validity is check based on query, if desired
   * validity is not specified in query, current time is used.
   *
   */
  price?: Maybe<Price>;
  /**
   * Price for which the entity should be sold. This method can be used only when appropriate
   * price related constraints are present so that `currency` and `priceList` priority can be extracted from the query.
   * The moment is either extracted from the query as well (if present) or current date and time is used.
   *
   */
  priceForSale?: Maybe<Price>;
  /**
   * Price inner record handling controls how prices that share same `inner entity id` will behave during filtering and sorting.
   *
   */
  priceInnerRecordHandling: PriceInnerRecordHandling;
  /**
   * Prices allows defining set of prices of entity for complex filtering and ordering.
   *
   */
  prices: Array<Price>;
  /**
   * Unique Integer positive number representing the entity. Can be used for fast lookup for
   * entity (entities). Primary key must be unique within the same entity type.
   *
   */
  primaryKey: Scalars['Int']['output'];
  /** Set of shippings methods that limits the offer of this payment methods when this shipping method is selected. */
  restrictedShippingMethods: Array<PaymentMethodRestrictedShippingMethodsReference>;
  /**
   * Type of entity.
   * Entity type is main sharding key - all data of entities with same type are stored in separated collections. Within the
   * entity type entity is uniquely represented by primary key.
   *
   */
  type: Scalars['String']['output'];
  /**
   * Contains version of this definition object and gets increased with any entity type update. Allows to execute
   * optimistic locking i.e. avoiding parallel modifications.
   *
   */
  version: Scalars['Int']['output'];
};


/** Payment method describes a form of payment procedure that can be selected to pay for the goods by the customer. */
export type PaymentMethodAssociatedDataArgs = {
  locale?: InputMaybe<CatalogLocale>;
};


/** Payment method describes a form of payment procedure that can be selected to pay for the goods by the customer. */
export type PaymentMethodAttributesArgs = {
  locale?: InputMaybe<CatalogLocale>;
};


/** Payment method describes a form of payment procedure that can be selected to pay for the goods by the customer. */
export type PaymentMethodPriceArgs = {
  currency?: InputMaybe<CatalogCurrency>;
  locale?: InputMaybe<CatalogLocale>;
  priceList: Scalars['String']['input'];
};


/** Payment method describes a form of payment procedure that can be selected to pay for the goods by the customer. */
export type PaymentMethodPriceForSaleArgs = {
  currency?: InputMaybe<CatalogCurrency>;
  locale?: InputMaybe<CatalogLocale>;
  priceList?: InputMaybe<Scalars['String']['input']>;
  validIn?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  validNow?: InputMaybe<Scalars['Boolean']['input']>;
};


/** Payment method describes a form of payment procedure that can be selected to pay for the goods by the customer. */
export type PaymentMethodPricesArgs = {
  currency?: InputMaybe<CatalogCurrency>;
  locale?: InputMaybe<CatalogLocale>;
  priceLists?: InputMaybe<Array<Scalars['String']['input']>>;
};


/** Payment method describes a form of payment procedure that can be selected to pay for the goods by the customer. */
export type PaymentMethodRestrictedShippingMethodsArgs = {
  filterBy?: InputMaybe<FilterContainer114b400452e41fc1>;
  orderBy?: InputMaybe<Array<OrderContainer2e85f5ede7aaa97>>;
};

/**
 * Associated data carry additional data entries that are never used for filtering / sorting but may be needed to be fetched
 * along with entity in order to present data to the target consumer (i.e. user / API / bot). Associated data may be stored
 * in slower storage and may contain wide range of data types - from small ones (i.e. numbers, strings, dates) up to large
 * binary arrays representing entire files (i.e. pictures, documents).
 *
 */
export type PaymentMethodAssociatedData = {
  __typename?: 'PaymentMethodAssociatedData';
  /**
   * Contains a structure that keeps all currently active URLs for different locales. This information is used
   * for rendering language switching menu. We need to use correct active URL so that user stays looking
   * the exact same entity after the locale switch occurred - just in different language.
   */
  allActiveUrls?: Maybe<Scalars['ComplexDataObject']['output']>;
  /** A structure that allows to specify a set of localized labels for entity. */
  localization?: Maybe<Scalars['ComplexDataObject']['output']>;
  /**
   * Detail settings of the payment method that must be taken into an account when providing selection of
   * the available payment methods for the user. Detailed documentation can be found on class
   * `com.fg.cps.eshop.payment.model.PaymentMethod`.
   */
  paymentDetails: Scalars['ComplexDataObject']['output'];
};

/**
 * Attributes allows defining set of data that are fetched in bulk along with the entity body.
 * Attributes may be used for fast filtering or can be used to sort along.
 *
 */
export type PaymentMethodAttributes = {
  __typename?: 'PaymentMethodAttributes';
  /**
   * Date and time of the last change of this entity. This timestamp is updated only when real change
   * in entity occurs in primary data store.  This timestamp should be used on boundaries with external
   * systems (such as inventory feeds and so on).
   */
  changed: Scalars['OffsetDateTime']['output'];
  /**
   * Unique code that identifies the entity among other entities of the same kind.
   * The code is equivalent to primary key but is targeted on external consumers (systems).
   */
  code: Scalars['String']['output'];
  /** Full description of the entity in HTML format. */
  description?: Maybe<Scalars['String']['output']>;
  /** Shortened version of description of the entity in plain text. */
  descriptionShort?: Maybe<Scalars['String']['output']>;
  /** Localized name of the entity. */
  name: Scalars['String']['output'];
  /**
   * Order of the entity among other entities sharing the same parent in the listing. Used for sorting entities
   * in ascending order.
   */
  order: Scalars['Predecessor']['output'];
  /** The type of the payment method - one of the `com.fg.cps.eshop.order.model.PaymentType` constants. */
  paymentType: Scalars['String']['output'];
  /**
   * Date and time when this entity was last published in the evitaDB index. This timestamp will usually
   * be different from the `changed` attribute because the publishing process asynchronously picks up
   * changed entities and publishes them to the evitaDB index with some delay. Also, when evitaDB is
   * completely re-indexed, all timestamps in this attribute will be reset to a new timestamp, while the
   * `changed` attribute will remain the same.
   *
   */
  published: Scalars['OffsetDateTime']['output'];
  /**
   * Returns the status of the entity:
   *
   * - ACTIVE: entity is available on frontend
   * - PRIVATE: entity is  not available on frontend, but it's visible in administration
   */
  status: Scalars['String']['output'];
  /** Localized and globally unique URL of the entity. */
  url?: Maybe<Scalars['String']['output']>;
  /**
   * Old URLs that has been originally assigned to the entity, but are no longer active. Each value that was
   * once `url` but was changed to something else is moved to this list. Thi allows accessing the entity even
   * on the previous location (with redirect) so that remembered URLs in external systems don't end up with
   * "entity not found" response.
   */
  urlInactive?: Maybe<Array<Scalars['String']['output']>>;
  /**
   * Date time range of general accessibility to the entity. Outside this range the entity behaves like if
   * the status was set to PRIVATE.
   */
  validity?: Maybe<Scalars['DateTimeRange']['output']>;
  /**
   * Returns the visibility state of the entity:
   * 	- VISIBLE: entity is visible in signposts, searchable, accessible on detail page
   * 	- INVISIBLE: the entity is only available on a specific detail page (with URL knowledge),
   * 		is not searchable and is not present in listings
   */
  visibility: Scalars['String']['output'];
};

/**
 * Map of requested extra results besides actual found records.
 *
 */
export type PaymentMethodExtraResults = {
  __typename?: 'PaymentMethodExtraResults';
  attributeHistograms?: Maybe<Array<AttributeNamedHistogram>>;
  /**
   * Returns computed histogram for prices satisfactory to filter constraints.
   *
   * A histogram is an approximate representation of the distribution of numerical data. For detailed description please
   * see [WikiPedia](https://en.wikipedia.org/wiki/Histogram).
   * Histogram can be computed only for numeric based properties. It visualises which property values are more common
   * in the returned data set and which are rare. Bucket count will never exceed requested bucket count specified in
   * `requestedCount` but there
   * may be less of them if there is no enough data for computation. Bucket thresholds are specified heuristically so that
   * there are as few "empty buckets" as possible.
   *
   * - buckets are defined by their lower bounds (inclusive)
   * - the upper bound is the lower bound of the next bucket
   *
   */
  priceHistogram?: Maybe<Histogram>;
  /**
   * Returns object containing detailed information about query processing time and its decomposition to single operations.
   *
   */
  queryTelemetry: Scalars['Object']['output'];
};


/**
 * Map of requested extra results besides actual found records.
 *
 */
export type PaymentMethodExtraResultsAttributeHistogramsArgs = {
  attributes: Array<Scalars['String']['input']>;
};


/**
 * Map of requested extra results besides actual found records.
 *
 */
export type PaymentMethodExtraResultsQueryTelemetryArgs = {
  formatted?: InputMaybe<Scalars['Boolean']['input']>;
};

/**
 * Contains all possible local mutations to perform on entity `PaymentMethod`.
 *
 */
export type PaymentMethodLocalMutationAggregate = {
  /**
   * Increments or decrements existing numeric value by specified delta (negative number produces decremental of
   * existing number, positive one incrementation).
   *
   * Allows to specify the number range that is tolerated for the value after delta application has been finished to
   * verify for example that number of items on stock doesn't go below zero.
   *
   */
  applyDeltaAttributeMutation?: InputMaybe<ApplyDeltaAttributeMutation>;
  /**
   * This mutation allows to create a reference in the entity.
   *
   */
  insertReferenceMutation?: InputMaybe<InsertReferenceMutation>;
  /**
   * This mutation allows to create / update / remove attribute of the reference.
   *
   */
  referenceAttributeMutation?: InputMaybe<ReferenceAttributeMutation>;
  /**
   * Remove associated data mutation will drop existing associatedData - ie.generates new version of the associated data with tombstone
   * on it.
   *
   */
  removeAssociatedDataMutation?: InputMaybe<RemoveAssociatedDataMutation>;
  /**
   * Remove attribute mutation will drop existing attribute - ie.generates new version of the attribute with tombstone
   * on it.
   *
   */
  removeAttributeMutation?: InputMaybe<RemoveAttributeMutation>;
  /**
   * This mutation allows to remove existing `price` of the entity.
   *
   */
  removePriceMutation?: InputMaybe<RemovePriceMutation>;
  /**
   * This mutation allows to remove group in the reference.
   *
   */
  removeReferenceGroupMutation?: InputMaybe<RemoveReferenceGroupMutation>;
  /**
   * This mutation allows to remove a reference from the entity.
   *
   */
  removeReferenceMutation?: InputMaybe<RemoveReferenceMutation>;
  /**
   * This mutation allows to set / remove `priceInnerRecordHandling` behaviour of the entity.
   *
   */
  setPriceInnerRecordHandlingMutation?: InputMaybe<SetPriceInnerRecordHandlingMutation>;
  /**
   * This mutation allows to create / update group of the reference.
   *
   */
  setReferenceGroupMutation?: InputMaybe<SetReferenceGroupMutation>;
  /**
   * Upsert associatedData mutation will either update existing associatedData or create new one.
   *
   */
  upsertAssociatedDataMutation?: InputMaybe<UpsertAssociatedDataMutation>;
  /**
   * Upsert attribute mutation will either update existing attribute or create new one.
   *
   */
  upsertAttributeMutation?: InputMaybe<UpsertAttributeMutation>;
  /**
   * This mutation allows to create / update `price` of the entity.
   *
   */
  upsertPriceMutation?: InputMaybe<UpsertPriceMutation>;
};

/**
 * Page of records according to pagination rules in input query.
 *
 */
export type PaymentMethodRecordPage = {
  __typename?: 'PaymentMethodRecordPage';
  /**
   * Actual found sorted page/strip of records.
   *
   */
  data: Array<PaymentMethod>;
  /**
   * Returns true if there are no data available.
   *
   */
  empty: Scalars['Boolean']['output'];
  /**
   * Returns true if current page/strip is the first page/strip in the result set.
   *
   */
  first: Scalars['Boolean']['output'];
  /**
   * Returns offset of the first record of current page with current pageSize.
   *
   */
  firstPageItemNumber: Scalars['Int']['output'];
  /**
   * Returns true if there is next page/strip available.
   *
   */
  hasNext: Scalars['Boolean']['output'];
  /**
   * Returns true if there is previous page/strip available.
   *
   */
  hasPrevious: Scalars['Boolean']['output'];
  /**
   * Returns true if current page/strip is the last page/strip in the result set.
   *
   */
  last: Scalars['Boolean']['output'];
  /**
   * Returns offset of the last record of current page with current pageSize.
   *
   */
  lastPageItemNumber: Scalars['Int']['output'];
  /**
   * Returns number of the last page that can be accessed with current number of records.
   * Returns -1 when offset/limit was used for creating paginated list.
   *
   */
  lastPageNumber: Scalars['Int']['output'];
  /**
   * Returns current page number (indexed from 1).
   *
   */
  pageNumber: Scalars['Int']['output'];
  /**
   * Returns number of records per single page.
   *
   */
  pageSize: Scalars['Int']['output'];
  /**
   * Returns true if there is only single page/strip available (i.e. total record count < record count on one page).
   *
   */
  singlePage: Scalars['Boolean']['output'];
  /**
   * Returns total number of records that are possible to fetch by paginating entire result stream.
   *
   */
  totalRecordCount: Scalars['Int']['output'];
};

/**
 * Strip of records according to offset and limit rules in input query.
 *
 */
export type PaymentMethodRecordStrip = {
  __typename?: 'PaymentMethodRecordStrip';
  /**
   * Actual found sorted page/strip of records.
   *
   */
  data: Array<PaymentMethod>;
  /**
   * Returns true if there are no data available.
   *
   */
  empty: Scalars['Boolean']['output'];
  /**
   * Returns true if current page/strip is the first page/strip in the result set.
   *
   */
  first: Scalars['Boolean']['output'];
  /**
   * Returns true if there is next page/strip available.
   *
   */
  hasNext: Scalars['Boolean']['output'];
  /**
   * Returns true if there is previous page/strip available.
   *
   */
  hasPrevious: Scalars['Boolean']['output'];
  /**
   * Returns true if current page/strip is the last page/strip in the result set.
   *
   */
  last: Scalars['Boolean']['output'];
  /**
   * Returns limit - i.e. maximal number of records that are requested after offset.
   *
   */
  limit: Scalars['Int']['output'];
  /**
   * Returns current offset (indexed from 0).
   *
   */
  offset: Scalars['Int']['output'];
  /**
   * Returns true if there is only single page/strip available (i.e. total record count < record count on one page).
   *
   */
  singlePage: Scalars['Boolean']['output'];
  /**
   * Returns total number of records that are possible to fetch by paginating entire result stream.
   *
   */
  totalRecordCount: Scalars['Int']['output'];
};

/**
 * Evita response contains all results to single query. Results are divided to two parts - main results returned by
 * `recordPage`/`recordStrip` and set of extra results retrieved by `extraResults`.
 *
 */
export type PaymentMethodResponse = {
  __typename?: 'PaymentMethodResponse';
  /**
   * Returns map of requested extra results besides actual found records.
   *
   */
  extraResults: PaymentMethodExtraResults;
  /**
   * Returns page of records according to pagination rules in input query.
   * Either `page` or `strip` can be used, not both.
   *
   */
  recordPage?: Maybe<PaymentMethodRecordPage>;
  /**
   * Returns strip of records according to pagination rules in input query.
   * Either `page` or `strip` can be used, not both.
   *
   */
  recordStrip?: Maybe<PaymentMethodRecordStrip>;
};


/**
 * Evita response contains all results to single query. Results are divided to two parts - main results returned by
 * `recordPage`/`recordStrip` and set of extra results retrieved by `extraResults`.
 *
 */
export type PaymentMethodResponseRecordPageArgs = {
  number?: InputMaybe<Scalars['Int']['input']>;
  size?: InputMaybe<Scalars['Int']['input']>;
};


/**
 * Evita response contains all results to single query. Results are divided to two parts - main results returned by
 * `recordPage`/`recordStrip` and set of extra results retrieved by `extraResults`.
 *
 */
export type PaymentMethodResponseRecordStripArgs = {
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
};

/** Set of shippings methods that limits the offer of this payment methods when this shipping method is selected. */
export type PaymentMethodRestrictedShippingMethodsReference = {
  __typename?: 'PaymentMethodRestrictedShippingMethodsReference';
  /**
   * Returns body of the referenced entity in case its fetching was requested via entity_fetch constraint.
   *
   */
  referencedEntity?: Maybe<ShippingMethod>;
  /**
   *          Returns primary key of the referenced (internal or external) entity.
   *
   */
  referencedPrimaryKey: Scalars['Int']['output'];
};

/**
 * Pick-up point represents a physical place where the customer can pick up the goods in the order. Pick up points
 * for all shipping methods are available through this entity.
 */
export type PickupPoint = Entity & {
  __typename?: 'PickupPoint';
  /**
   * Contains set of all locales that were used for localized attributes or associated data of
   * this particular entity.
   *
   */
  allLocales: Array<CatalogLocale>;
  /**
   * Associated data carry additional data entries that are never used for filtering / sorting but may be needed to be fetched
   * along with entity in order to present data to the target consumer (i.e. user / API / bot). Associated data may be stored
   * in slower storage and may contain wide range of data types - from small ones (i.e. numbers, strings, dates) up to large
   * binary arrays representing entire files (i.e. pictures, documents).
   *
   */
  associatedData?: Maybe<PickupPointAssociatedData>;
  /**
   * Attributes allows defining set of data that are fetched in bulk along with the reference.
   * Attributes may be used for fast filtering or can be used to sort along.
   *
   */
  attributes?: Maybe<PickupPointAttributes>;
  /**
   * Contains set of requested locales for this particular entity.
   *
   */
  locales: Array<CatalogLocale>;
  /**
   * Unique Integer positive number representing the entity. Can be used for fast lookup for
   * entity (entities). Primary key must be unique within the same entity type.
   *
   */
  primaryKey: Scalars['Int']['output'];
  /**
   * The reference to the shipping method the pickup point relates to.
   * The reference is only for the shipping type `PERSONAL_PICKUP_BRANCH`.
   */
  shippingMethod?: Maybe<PickupPointShippingMethodReference>;
  /**
   * Type of entity.
   * Entity type is main sharding key - all data of entities with same type are stored in separated collections. Within the
   * entity type entity is uniquely represented by primary key.
   *
   */
  type: Scalars['String']['output'];
  /**
   * Contains version of this definition object and gets increased with any entity type update. Allows to execute
   * optimistic locking i.e. avoiding parallel modifications.
   *
   */
  version: Scalars['Int']['output'];
};


/**
 * Pick-up point represents a physical place where the customer can pick up the goods in the order. Pick up points
 * for all shipping methods are available through this entity.
 */
export type PickupPointAssociatedDataArgs = {
  locale?: InputMaybe<CatalogLocale>;
};


/**
 * Pick-up point represents a physical place where the customer can pick up the goods in the order. Pick up points
 * for all shipping methods are available through this entity.
 */
export type PickupPointAttributesArgs = {
  locale?: InputMaybe<CatalogLocale>;
};


/**
 * Pick-up point represents a physical place where the customer can pick up the goods in the order. Pick up points
 * for all shipping methods are available through this entity.
 */
export type PickupPointShippingMethodArgs = {
  filterBy?: InputMaybe<FilterContainer757b56df09748967>;
  orderBy?: InputMaybe<Array<OrderContainer3fb06b7b13473bcc>>;
};

/**
 * Associated data carry additional data entries that are never used for filtering / sorting but may be needed to be fetched
 * along with entity in order to present data to the target consumer (i.e. user / API / bot). Associated data may be stored
 * in slower storage and may contain wide range of data types - from small ones (i.e. numbers, strings, dates) up to large
 * binary arrays representing entire files (i.e. pictures, documents).
 *
 */
export type PickupPointAssociatedData = {
  __typename?: 'PickupPointAssociatedData';
  /**
   * Contains a structure that keeps all currently active URLs for different locales. This information is used
   * for rendering language switching menu. We need to use correct active URL so that user stays looking
   * the exact same entity after the locale switch occurred - just in different language.
   */
  allActiveUrls?: Maybe<Scalars['ComplexDataObject']['output']>;
  /** A structure that allows to specify a set of localized labels for entity. */
  localization?: Maybe<Scalars['ComplexDataObject']['output']>;
};

/**
 * Attribute histogram is just index for `Histogram` objects for multiple attributes.
 *
 */
export type PickupPointAttributeHistogram = {
  __typename?: 'PickupPointAttributeHistogram';
  latitude?: Maybe<Histogram>;
  longitude?: Maybe<Histogram>;
};

/**
 * Attributes allows defining set of data that are fetched in bulk along with the entity body.
 * Attributes may be used for fast filtering or can be used to sort along.
 *
 */
export type PickupPointAttributes = {
  __typename?: 'PickupPointAttributes';
  /**
   * Information on whether you can pay by card at the point.
   *
   * If the value is `true`, payment by card is possible.
   * If the value is `false`, card payment is not possible.
   * If the value is `null`, the carrier does not provide this information.
   */
  cardPaymentAllowed?: Maybe<Scalars['Boolean']['output']>;
  /**
   * Date and time of the last change of this entity. This timestamp is updated only when real change
   * in entity occurs in primary data store.  This timestamp should be used on boundaries with external
   * systems (such as inventory feeds and so on).
   */
  changed: Scalars['OffsetDateTime']['output'];
  /** City where the pickup point is located. */
  city?: Maybe<Scalars['String']['output']>;
  /** City-part where the pickup point is located. */
  cityPart?: Maybe<Scalars['String']['output']>;
  /**
   * Unique code that identifies the entity among other entities of the same kind.
   * The code is equivalent to primary key but is targeted on external consumers (systems).
   */
  code: Scalars['String']['output'];
  /** ISO-2 code of the country where the pickup point is located. */
  countryCode?: Maybe<Scalars['String']['output']>;
  /** Full description of the entity in HTML format. */
  description?: Maybe<Scalars['String']['output']>;
  /** Shortened version of description of the entity in plain text. */
  descriptionShort?: Maybe<Scalars['String']['output']>;
  /**
   * External code of the pickup point. For use with external systems use this code because `code`
   * is internal code and may not match the carrier's external code.
   */
  externalCode: Scalars['String']['output'];
  /** GPS coordinates of the pickup point.. */
  latitude?: Maybe<Scalars['BigDecimal']['output']>;
  /** GPS coordinates of the pickup point.. */
  longitude?: Maybe<Scalars['BigDecimal']['output']>;
  /** Localized name of the entity. */
  name: Scalars['String']['output'];
  /** Localized note of the entity. */
  note?: Maybe<Scalars['String']['output']>;
  /** Localized information about opening hours. */
  openingHours?: Maybe<Scalars['String']['output']>;
  /**
   * Order of the entity among other entities sharing the same parent in the listing. Used for sorting entities
   * in ascending order.
   */
  order: Scalars['Predecessor']['output'];
  /** Url photo of the pickup point. */
  photo?: Maybe<Scalars['String']['output']>;
  /** Postal code of the city part where the pickup point is located. */
  postalCode?: Maybe<Scalars['String']['output']>;
  /**
   * Date and time when this entity was last published in the evitaDB index. This timestamp will usually
   * be different from the `changed` attribute because the publishing process asynchronously picks up
   * changed entities and publishes them to the evitaDB index with some delay. Also, when evitaDB is
   * completely re-indexed, all timestamps in this attribute will be reset to a new timestamp, while the
   * `changed` attribute will remain the same.
   *
   */
  published: Scalars['OffsetDateTime']['output'];
  /** Type of shipping for the pickup point. */
  shippingType: Scalars['String']['output'];
  /**
   * Returns the status of the entity:
   *
   * - ACTIVE: entity is available on frontend
   * - PRIVATE: entity is  not available on frontend, but it's visible in administration
   */
  status: Scalars['String']['output'];
  /** Street where the pickup point is located. */
  street?: Maybe<Scalars['String']['output']>;
  /**
   * Type of point of purchase.
   *
   * The type of point of collection may be different for each carrier.
   *
   * Example values:
   *  - point - branch/shop
   *  - zbox - Forwarding office BOX
   *  - alzabox - AlzaBox
   *
   * If the value is `null`, the carrier type is not specified.
   */
  type?: Maybe<Scalars['String']['output']>;
  /** Localized and globally unique URL of the entity. */
  url?: Maybe<Scalars['String']['output']>;
  /**
   * Old URLs that has been originally assigned to the entity, but are no longer active. Each value that was
   * once `url` but was changed to something else is moved to this list. Thi allows accessing the entity even
   * on the previous location (with redirect) so that remembered URLs in external systems don't end up with
   * "entity not found" response.
   */
  urlInactive?: Maybe<Array<Scalars['String']['output']>>;
  /**
   * Date time range of general accessibility to the entity. Outside this range the entity behaves like if
   * the status was set to PRIVATE.
   */
  validity?: Maybe<Scalars['DateTimeRange']['output']>;
  /**
   * Returns the visibility state of the entity:
   * 	- VISIBLE: entity is visible in signposts, searchable, accessible on detail page
   * 	- INVISIBLE: the entity is only available on a specific detail page (with URL knowledge),
   * 		is not searchable and is not present in listings
   */
  visibility: Scalars['String']['output'];
};


/**
 * Attributes allows defining set of data that are fetched in bulk along with the entity body.
 * Attributes may be used for fast filtering or can be used to sort along.
 *
 */
export type PickupPointAttributesLatitudeArgs = {
  formatted?: InputMaybe<Scalars['Boolean']['input']>;
};


/**
 * Attributes allows defining set of data that are fetched in bulk along with the entity body.
 * Attributes may be used for fast filtering or can be used to sort along.
 *
 */
export type PickupPointAttributesLongitudeArgs = {
  formatted?: InputMaybe<Scalars['Boolean']['input']>;
};

/**
 * Map of requested extra results besides actual found records.
 *
 */
export type PickupPointExtraResults = {
  __typename?: 'PickupPointExtraResults';
  /**
   * Returns computed histograms for specific attributes based on filter constraints.
   *
   * A histogram is an approximate representation of the distribution of numerical data. For detailed description please
   * see [WikiPedia](https://en.wikipedia.org/wiki/Histogram).
   * Histogram can be computed only for numeric based properties. It visualises which property values are more common
   * in the returned data set and which are rare. Bucket count will never exceed requested bucket count specified in
   * `requestedCount` but there
   * may be less of them if there is no enough data for computation. Bucket thresholds are specified heuristically so that
   * there are as few "empty buckets" as possible.
   *
   * - buckets are defined by their lower bounds (inclusive)
   * - the upper bound is the lower bound of the next bucket
   *
   */
  attributeHistogram?: Maybe<PickupPointAttributeHistogram>;
  attributeHistograms?: Maybe<Array<AttributeNamedHistogram>>;
  /**
   * Returns object containing detailed information about query processing time and its decomposition to single operations.
   *
   */
  queryTelemetry: Scalars['Object']['output'];
};


/**
 * Map of requested extra results besides actual found records.
 *
 */
export type PickupPointExtraResultsAttributeHistogramsArgs = {
  attributes: Array<Scalars['String']['input']>;
};


/**
 * Map of requested extra results besides actual found records.
 *
 */
export type PickupPointExtraResultsQueryTelemetryArgs = {
  formatted?: InputMaybe<Scalars['Boolean']['input']>;
};

/**
 * Contains all possible local mutations to perform on entity `PickupPoint`.
 *
 */
export type PickupPointLocalMutationAggregate = {
  /**
   * Increments or decrements existing numeric value by specified delta (negative number produces decremental of
   * existing number, positive one incrementation).
   *
   * Allows to specify the number range that is tolerated for the value after delta application has been finished to
   * verify for example that number of items on stock doesn't go below zero.
   *
   */
  applyDeltaAttributeMutation?: InputMaybe<ApplyDeltaAttributeMutation>;
  /**
   * This mutation allows to create a reference in the entity.
   *
   */
  insertReferenceMutation?: InputMaybe<InsertReferenceMutation>;
  /**
   * This mutation allows to create / update / remove attribute of the reference.
   *
   */
  referenceAttributeMutation?: InputMaybe<ReferenceAttributeMutation>;
  /**
   * Remove associated data mutation will drop existing associatedData - ie.generates new version of the associated data with tombstone
   * on it.
   *
   */
  removeAssociatedDataMutation?: InputMaybe<RemoveAssociatedDataMutation>;
  /**
   * Remove attribute mutation will drop existing attribute - ie.generates new version of the attribute with tombstone
   * on it.
   *
   */
  removeAttributeMutation?: InputMaybe<RemoveAttributeMutation>;
  /**
   * This mutation allows to remove group in the reference.
   *
   */
  removeReferenceGroupMutation?: InputMaybe<RemoveReferenceGroupMutation>;
  /**
   * This mutation allows to remove a reference from the entity.
   *
   */
  removeReferenceMutation?: InputMaybe<RemoveReferenceMutation>;
  /**
   * This mutation allows to create / update group of the reference.
   *
   */
  setReferenceGroupMutation?: InputMaybe<SetReferenceGroupMutation>;
  /**
   * Upsert associatedData mutation will either update existing associatedData or create new one.
   *
   */
  upsertAssociatedDataMutation?: InputMaybe<UpsertAssociatedDataMutation>;
  /**
   * Upsert attribute mutation will either update existing attribute or create new one.
   *
   */
  upsertAttributeMutation?: InputMaybe<UpsertAttributeMutation>;
};

/**
 * Page of records according to pagination rules in input query.
 *
 */
export type PickupPointRecordPage = {
  __typename?: 'PickupPointRecordPage';
  /**
   * Actual found sorted page/strip of records.
   *
   */
  data: Array<PickupPoint>;
  /**
   * Returns true if there are no data available.
   *
   */
  empty: Scalars['Boolean']['output'];
  /**
   * Returns true if current page/strip is the first page/strip in the result set.
   *
   */
  first: Scalars['Boolean']['output'];
  /**
   * Returns offset of the first record of current page with current pageSize.
   *
   */
  firstPageItemNumber: Scalars['Int']['output'];
  /**
   * Returns true if there is next page/strip available.
   *
   */
  hasNext: Scalars['Boolean']['output'];
  /**
   * Returns true if there is previous page/strip available.
   *
   */
  hasPrevious: Scalars['Boolean']['output'];
  /**
   * Returns true if current page/strip is the last page/strip in the result set.
   *
   */
  last: Scalars['Boolean']['output'];
  /**
   * Returns offset of the last record of current page with current pageSize.
   *
   */
  lastPageItemNumber: Scalars['Int']['output'];
  /**
   * Returns number of the last page that can be accessed with current number of records.
   * Returns -1 when offset/limit was used for creating paginated list.
   *
   */
  lastPageNumber: Scalars['Int']['output'];
  /**
   * Returns current page number (indexed from 1).
   *
   */
  pageNumber: Scalars['Int']['output'];
  /**
   * Returns number of records per single page.
   *
   */
  pageSize: Scalars['Int']['output'];
  /**
   * Returns true if there is only single page/strip available (i.e. total record count < record count on one page).
   *
   */
  singlePage: Scalars['Boolean']['output'];
  /**
   * Returns total number of records that are possible to fetch by paginating entire result stream.
   *
   */
  totalRecordCount: Scalars['Int']['output'];
};

/**
 * Strip of records according to offset and limit rules in input query.
 *
 */
export type PickupPointRecordStrip = {
  __typename?: 'PickupPointRecordStrip';
  /**
   * Actual found sorted page/strip of records.
   *
   */
  data: Array<PickupPoint>;
  /**
   * Returns true if there are no data available.
   *
   */
  empty: Scalars['Boolean']['output'];
  /**
   * Returns true if current page/strip is the first page/strip in the result set.
   *
   */
  first: Scalars['Boolean']['output'];
  /**
   * Returns true if there is next page/strip available.
   *
   */
  hasNext: Scalars['Boolean']['output'];
  /**
   * Returns true if there is previous page/strip available.
   *
   */
  hasPrevious: Scalars['Boolean']['output'];
  /**
   * Returns true if current page/strip is the last page/strip in the result set.
   *
   */
  last: Scalars['Boolean']['output'];
  /**
   * Returns limit - i.e. maximal number of records that are requested after offset.
   *
   */
  limit: Scalars['Int']['output'];
  /**
   * Returns current offset (indexed from 0).
   *
   */
  offset: Scalars['Int']['output'];
  /**
   * Returns true if there is only single page/strip available (i.e. total record count < record count on one page).
   *
   */
  singlePage: Scalars['Boolean']['output'];
  /**
   * Returns total number of records that are possible to fetch by paginating entire result stream.
   *
   */
  totalRecordCount: Scalars['Int']['output'];
};

/**
 * Evita response contains all results to single query. Results are divided to two parts - main results returned by
 * `recordPage`/`recordStrip` and set of extra results retrieved by `extraResults`.
 *
 */
export type PickupPointResponse = {
  __typename?: 'PickupPointResponse';
  /**
   * Returns map of requested extra results besides actual found records.
   *
   */
  extraResults: PickupPointExtraResults;
  /**
   * Returns page of records according to pagination rules in input query.
   * Either `page` or `strip` can be used, not both.
   *
   */
  recordPage?: Maybe<PickupPointRecordPage>;
  /**
   * Returns strip of records according to pagination rules in input query.
   * Either `page` or `strip` can be used, not both.
   *
   */
  recordStrip?: Maybe<PickupPointRecordStrip>;
};


/**
 * Evita response contains all results to single query. Results are divided to two parts - main results returned by
 * `recordPage`/`recordStrip` and set of extra results retrieved by `extraResults`.
 *
 */
export type PickupPointResponseRecordPageArgs = {
  number?: InputMaybe<Scalars['Int']['input']>;
  size?: InputMaybe<Scalars['Int']['input']>;
};


/**
 * Evita response contains all results to single query. Results are divided to two parts - main results returned by
 * `recordPage`/`recordStrip` and set of extra results retrieved by `extraResults`.
 *
 */
export type PickupPointResponseRecordStripArgs = {
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
};

/**
 * The reference to the shipping method the pickup point relates to.
 * The reference is only for the shipping type `PERSONAL_PICKUP_BRANCH`.
 */
export type PickupPointShippingMethodReference = {
  __typename?: 'PickupPointShippingMethodReference';
  /**
   * Returns body of the referenced entity in case its fetching was requested via entity_fetch constraint.
   *
   */
  referencedEntity?: Maybe<ShippingMethod>;
  /**
   *          Returns primary key of the referenced (internal or external) entity.
   *
   */
  referencedPrimaryKey: Scalars['Int']['output'];
};

/**
 * Prices are specific to a very few entities, but because correct price computation is very complex in e-commerce systems
 * and highly affects performance of the entities filtering and sorting, they deserve first class support in entity model.
 * It is pretty common in B2B systems single product has assigned dozens of prices for the different customers.
 *
 */
export type Price = {
  __typename?: 'Price';
  /**
   * Identification of the currency.
   *
   */
  currency: Scalars['Currency']['output'];
  /**
   * Some special products (such as master products, or product sets) may contain prices of all "subordinate" products
   * so that the aggregating product can represent them in certain views on the product. In that case there is need
   * to distinguish the projected prices of the subordinate product in the one that represents them.
   * Inner record id must contain positive value.
   *
   */
  innerRecordId?: Maybe<Scalars['Int']['output']>;
  /**
   * Contains identification of the price in the external systems. This id is expected to be used for the synchronization
   * of the price in relation with the primary source of the prices.
   * This id is used to uniquely find a price within same price list and currency and is mandatory.
   *
   */
  priceId: Scalars['Int']['output'];
  /**
   * Contains identification of the price list in the external system. Each price must reference a price list. Price list
   * identification may refer to another Evita entity or may contain any external price list identification
   * (for example id or unique name of the price list in the external system).
   * Single entity is expected to have single price for the price list unless there is validity specified.
   * In other words there is no sense to have multiple concurrently valid prices for the same entity that have roots
   * in the same price list.
   *
   */
  priceList: Scalars['String']['output'];
  /**
   * Price with tax.
   *
   */
  priceWithTax: Scalars['BigDecimal']['output'];
  /**
   * Price without tax.
   *
   */
  priceWithoutTax: Scalars['BigDecimal']['output'];
  /**
   * Controls whether price is subject to filtering / sorting logic, non-sellable prices will be fetched along with
   * entity but won't be considered when evaluating search. These prices may be
   * used for "informational" prices such as reference price (the crossed out price often found on e-commerce sites
   * as "usual price") but are not considered as the "selling" price.
   *
   */
  sellable: Scalars['Boolean']['output'];
  /**
   * Tax rate percentage (i.e. for 19% it'll be 19.00)
   *
   */
  taxRate: Scalars['BigDecimal']['output'];
  /**
   * Date and time interval for which the price is valid (inclusive).
   *
   */
  validity?: Maybe<Scalars['DateTimeRange']['output']>;
};


/**
 * Prices are specific to a very few entities, but because correct price computation is very complex in e-commerce systems
 * and highly affects performance of the entities filtering and sorting, they deserve first class support in entity model.
 * It is pretty common in B2B systems single product has assigned dozens of prices for the different customers.
 *
 */
export type PricePriceWithTaxArgs = {
  formatted?: InputMaybe<Scalars['Boolean']['input']>;
  withCurrency?: InputMaybe<Scalars['Boolean']['input']>;
};


/**
 * Prices are specific to a very few entities, but because correct price computation is very complex in e-commerce systems
 * and highly affects performance of the entities filtering and sorting, they deserve first class support in entity model.
 * It is pretty common in B2B systems single product has assigned dozens of prices for the different customers.
 *
 */
export type PricePriceWithoutTaxArgs = {
  formatted?: InputMaybe<Scalars['Boolean']['input']>;
  withCurrency?: InputMaybe<Scalars['Boolean']['input']>;
};


/**
 * Prices are specific to a very few entities, but because correct price computation is very complex in e-commerce systems
 * and highly affects performance of the entities filtering and sorting, they deserve first class support in entity model.
 * It is pretty common in B2B systems single product has assigned dozens of prices for the different customers.
 *
 */
export type PriceTaxRateArgs = {
  formatted?: InputMaybe<Scalars['Boolean']['input']>;
  withCurrency?: InputMaybe<Scalars['Boolean']['input']>;
};

export enum PriceInnerRecordHandling {
  FirstOccurrence = 'FIRST_OCCURRENCE',
  None = 'NONE',
  Sum = 'SUM',
  Unknown = 'UNKNOWN'
}

/**
 * Price list allows to consolidate prices that share common purpose. Price lists allow to compute the selling
 * price for products, payment and shipping methods and all other entities that work with prices.
 */
export type PriceList = Entity & {
  __typename?: 'PriceList';
  /**
   * Contains set of all locales that were used for localized attributes or associated data of
   * this particular entity.
   *
   */
  allLocales: Array<CatalogLocale>;
  /**
   * Associated data carry additional data entries that are never used for filtering / sorting but may be needed to be fetched
   * along with entity in order to present data to the target consumer (i.e. user / API / bot). Associated data may be stored
   * in slower storage and may contain wide range of data types - from small ones (i.e. numbers, strings, dates) up to large
   * binary arrays representing entire files (i.e. pictures, documents).
   *
   */
  associatedData?: Maybe<PriceListAssociatedData>;
  /**
   * Attributes allows defining set of data that are fetched in bulk along with the reference.
   * Attributes may be used for fast filtering or can be used to sort along.
   *
   */
  attributes?: Maybe<PriceListAttributes>;
  /**
   * Contains set of requested locales for this particular entity.
   *
   */
  locales: Array<CatalogLocale>;
  /**
   * Unique Integer positive number representing the entity. Can be used for fast lookup for
   * entity (entities). Primary key must be unique within the same entity type.
   *
   */
  primaryKey: Scalars['Int']['output'];
  /**
   * Type of entity.
   * Entity type is main sharding key - all data of entities with same type are stored in separated collections. Within the
   * entity type entity is uniquely represented by primary key.
   *
   */
  type: Scalars['String']['output'];
  /**
   * Contains version of this definition object and gets increased with any entity type update. Allows to execute
   * optimistic locking i.e. avoiding parallel modifications.
   *
   */
  version: Scalars['Int']['output'];
};


/**
 * Price list allows to consolidate prices that share common purpose. Price lists allow to compute the selling
 * price for products, payment and shipping methods and all other entities that work with prices.
 */
export type PriceListAssociatedDataArgs = {
  locale?: InputMaybe<CatalogLocale>;
};


/**
 * Price list allows to consolidate prices that share common purpose. Price lists allow to compute the selling
 * price for products, payment and shipping methods and all other entities that work with prices.
 */
export type PriceListAttributesArgs = {
  locale?: InputMaybe<CatalogLocale>;
};

/**
 * Associated data carry additional data entries that are never used for filtering / sorting but may be needed to be fetched
 * along with entity in order to present data to the target consumer (i.e. user / API / bot). Associated data may be stored
 * in slower storage and may contain wide range of data types - from small ones (i.e. numbers, strings, dates) up to large
 * binary arrays representing entire files (i.e. pictures, documents).
 *
 */
export type PriceListAssociatedData = {
  __typename?: 'PriceListAssociatedData';
  /**
   * Contains a structure that keeps all currently active URLs for different locales. This information is used
   * for rendering language switching menu. We need to use correct active URL so that user stays looking
   * the exact same entity after the locale switch occurred - just in different language.
   */
  allActiveUrls?: Maybe<Scalars['ComplexDataObject']['output']>;
  /** A structure that allows to specify a set of localized labels for entity. */
  localization?: Maybe<Scalars['ComplexDataObject']['output']>;
  /**
   * Contains JSON configuration of the particular usage condition. The structure is relevant to the attribute
   * `type` in the JSON and relates to the structure / documentation of the classes implementing
   * `com.fg.cps.eshop.price.service.usageCondition.UsageCondition` interface.
   */
  usageConditionDetails?: Maybe<Scalars['String']['output']>;
};

/**
 * Attributes allows defining set of data that are fetched in bulk along with the entity body.
 * Attributes may be used for fast filtering or can be used to sort along.
 *
 */
export type PriceListAttributes = {
  __typename?: 'PriceListAttributes';
  /**
   * Date and time of the last change of this entity. This timestamp is updated only when real change
   * in entity occurs in primary data store.  This timestamp should be used on boundaries with external
   * systems (such as inventory feeds and so on).
   */
  changed: Scalars['OffsetDateTime']['output'];
  /**
   * Unique code that identifies the entity among other entities of the same kind.
   * The code is equivalent to primary key but is targeted on external consumers (systems).
   */
  code: Scalars['String']['output'];
  /** Full description of the entity in HTML format. */
  description?: Maybe<Scalars['String']['output']>;
  /** Shortened version of description of the entity in plain text. */
  descriptionShort?: Maybe<Scalars['String']['output']>;
  /** Localized name of the entity. */
  name: Scalars['String']['output'];
  /**
   * Order of the entity among other entities sharing the same parent in the listing. Used for sorting entities
   * in ascending order.
   */
  order: Scalars['Predecessor']['output'];
  /**
   * Date and time when this entity was last published in the evitaDB index. This timestamp will usually
   * be different from the `changed` attribute because the publishing process asynchronously picks up
   * changed entities and publishes them to the evitaDB index with some delay. Also, when evitaDB is
   * completely re-indexed, all timestamps in this attribute will be reset to a new timestamp, while the
   * `changed` attribute will remain the same.
   *
   */
  published: Scalars['OffsetDateTime']['output'];
  /**
   * Returns the status of the entity:
   *
   * - ACTIVE: entity is available on frontend
   * - PRIVATE: entity is  not available on frontend, but it's visible in administration
   */
  status: Scalars['String']['output'];
  /** Localized and globally unique URL of the entity. */
  url?: Maybe<Scalars['String']['output']>;
  /**
   * Old URLs that has been originally assigned to the entity, but are no longer active. Each value that was
   * once `url` but was changed to something else is moved to this list. Thi allows accessing the entity even
   * on the previous location (with redirect) so that remembered URLs in external systems don't end up with
   * "entity not found" response.
   */
  urlInactive?: Maybe<Array<Scalars['String']['output']>>;
  /**
   * Allows to quickly find adept price lists in current user related context. We need to consider that there
   * might be thousands of prices lists that require certain condition to be met in order they could be used
   * for particular user. Therefore, we couldn't iterate over all of them and evaluate their conditions set
   * in associated data `usageConditionDetails` precisely, and we need to reduce the amount of evaluated price
   * list to bare minimum. That's why this attribute exists - it allows pre-filtering price lists that may
   * participate in current user's context computation. Each usage condition contains possible combination of
   * user context properties the usage condition may match ordered alphabetically.
   *
   */
  usageCondition?: Maybe<Array<Scalars['String']['output']>>;
  /**
   * Date time range of general accessibility to the entity. Outside this range the entity behaves like if
   * the status was set to PRIVATE.
   */
  validity?: Maybe<Scalars['DateTimeRange']['output']>;
};

/**
 * Map of requested extra results besides actual found records.
 *
 */
export type PriceListExtraResults = {
  __typename?: 'PriceListExtraResults';
  attributeHistograms?: Maybe<Array<AttributeNamedHistogram>>;
  /**
   * Returns object containing detailed information about query processing time and its decomposition to single operations.
   *
   */
  queryTelemetry: Scalars['Object']['output'];
};


/**
 * Map of requested extra results besides actual found records.
 *
 */
export type PriceListExtraResultsAttributeHistogramsArgs = {
  attributes: Array<Scalars['String']['input']>;
};


/**
 * Map of requested extra results besides actual found records.
 *
 */
export type PriceListExtraResultsQueryTelemetryArgs = {
  formatted?: InputMaybe<Scalars['Boolean']['input']>;
};

/**
 * Contains all possible local mutations to perform on entity `PriceList`.
 *
 */
export type PriceListLocalMutationAggregate = {
  /**
   * Increments or decrements existing numeric value by specified delta (negative number produces decremental of
   * existing number, positive one incrementation).
   *
   * Allows to specify the number range that is tolerated for the value after delta application has been finished to
   * verify for example that number of items on stock doesn't go below zero.
   *
   */
  applyDeltaAttributeMutation?: InputMaybe<ApplyDeltaAttributeMutation>;
  /**
   * Remove associated data mutation will drop existing associatedData - ie.generates new version of the associated data with tombstone
   * on it.
   *
   */
  removeAssociatedDataMutation?: InputMaybe<RemoveAssociatedDataMutation>;
  /**
   * Remove attribute mutation will drop existing attribute - ie.generates new version of the attribute with tombstone
   * on it.
   *
   */
  removeAttributeMutation?: InputMaybe<RemoveAttributeMutation>;
  /**
   * Upsert associatedData mutation will either update existing associatedData or create new one.
   *
   */
  upsertAssociatedDataMutation?: InputMaybe<UpsertAssociatedDataMutation>;
  /**
   * Upsert attribute mutation will either update existing attribute or create new one.
   *
   */
  upsertAttributeMutation?: InputMaybe<UpsertAttributeMutation>;
};

/**
 * Page of records according to pagination rules in input query.
 *
 */
export type PriceListRecordPage = {
  __typename?: 'PriceListRecordPage';
  /**
   * Actual found sorted page/strip of records.
   *
   */
  data: Array<PriceList>;
  /**
   * Returns true if there are no data available.
   *
   */
  empty: Scalars['Boolean']['output'];
  /**
   * Returns true if current page/strip is the first page/strip in the result set.
   *
   */
  first: Scalars['Boolean']['output'];
  /**
   * Returns offset of the first record of current page with current pageSize.
   *
   */
  firstPageItemNumber: Scalars['Int']['output'];
  /**
   * Returns true if there is next page/strip available.
   *
   */
  hasNext: Scalars['Boolean']['output'];
  /**
   * Returns true if there is previous page/strip available.
   *
   */
  hasPrevious: Scalars['Boolean']['output'];
  /**
   * Returns true if current page/strip is the last page/strip in the result set.
   *
   */
  last: Scalars['Boolean']['output'];
  /**
   * Returns offset of the last record of current page with current pageSize.
   *
   */
  lastPageItemNumber: Scalars['Int']['output'];
  /**
   * Returns number of the last page that can be accessed with current number of records.
   * Returns -1 when offset/limit was used for creating paginated list.
   *
   */
  lastPageNumber: Scalars['Int']['output'];
  /**
   * Returns current page number (indexed from 1).
   *
   */
  pageNumber: Scalars['Int']['output'];
  /**
   * Returns number of records per single page.
   *
   */
  pageSize: Scalars['Int']['output'];
  /**
   * Returns true if there is only single page/strip available (i.e. total record count < record count on one page).
   *
   */
  singlePage: Scalars['Boolean']['output'];
  /**
   * Returns total number of records that are possible to fetch by paginating entire result stream.
   *
   */
  totalRecordCount: Scalars['Int']['output'];
};

/**
 * Strip of records according to offset and limit rules in input query.
 *
 */
export type PriceListRecordStrip = {
  __typename?: 'PriceListRecordStrip';
  /**
   * Actual found sorted page/strip of records.
   *
   */
  data: Array<PriceList>;
  /**
   * Returns true if there are no data available.
   *
   */
  empty: Scalars['Boolean']['output'];
  /**
   * Returns true if current page/strip is the first page/strip in the result set.
   *
   */
  first: Scalars['Boolean']['output'];
  /**
   * Returns true if there is next page/strip available.
   *
   */
  hasNext: Scalars['Boolean']['output'];
  /**
   * Returns true if there is previous page/strip available.
   *
   */
  hasPrevious: Scalars['Boolean']['output'];
  /**
   * Returns true if current page/strip is the last page/strip in the result set.
   *
   */
  last: Scalars['Boolean']['output'];
  /**
   * Returns limit - i.e. maximal number of records that are requested after offset.
   *
   */
  limit: Scalars['Int']['output'];
  /**
   * Returns current offset (indexed from 0).
   *
   */
  offset: Scalars['Int']['output'];
  /**
   * Returns true if there is only single page/strip available (i.e. total record count < record count on one page).
   *
   */
  singlePage: Scalars['Boolean']['output'];
  /**
   * Returns total number of records that are possible to fetch by paginating entire result stream.
   *
   */
  totalRecordCount: Scalars['Int']['output'];
};

/**
 * Evita response contains all results to single query. Results are divided to two parts - main results returned by
 * `recordPage`/`recordStrip` and set of extra results retrieved by `extraResults`.
 *
 */
export type PriceListResponse = {
  __typename?: 'PriceListResponse';
  /**
   * Returns map of requested extra results besides actual found records.
   *
   */
  extraResults: PriceListExtraResults;
  /**
   * Returns page of records according to pagination rules in input query.
   * Either `page` or `strip` can be used, not both.
   *
   */
  recordPage?: Maybe<PriceListRecordPage>;
  /**
   * Returns strip of records according to pagination rules in input query.
   * Either `page` or `strip` can be used, not both.
   *
   */
  recordStrip?: Maybe<PriceListRecordStrip>;
};


/**
 * Evita response contains all results to single query. Results are divided to two parts - main results returned by
 * `recordPage`/`recordStrip` and set of extra results retrieved by `extraResults`.
 *
 */
export type PriceListResponseRecordPageArgs = {
  number?: InputMaybe<Scalars['Int']['input']>;
  size?: InputMaybe<Scalars['Int']['input']>;
};


/**
 * Evita response contains all results to single query. Results are divided to two parts - main results returned by
 * `recordPage`/`recordStrip` and set of extra results retrieved by `extraResults`.
 *
 */
export type PriceListResponseRecordStripArgs = {
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
};

/**
 * Product represents an article that can be displayed and sold on e-shop. Product come in different flavours - complex
 * master / variant products, simple basic products or composed product sets. Product can be organized in categories,
 * groups. Product can relate to other products or brands. Product have prices.
 */
export type Product = Entity & {
  __typename?: 'Product';
  /**
   * Contains set of all locales that were used for localized attributes or associated data of
   * this particular entity.
   *
   */
  allLocales: Array<CatalogLocale>;
  /**
   * Associated data carry additional data entries that are never used for filtering / sorting but may be needed to be fetched
   * along with entity in order to present data to the target consumer (i.e. user / API / bot). Associated data may be stored
   * in slower storage and may contain wide range of data types - from small ones (i.e. numbers, strings, dates) up to large
   * binary arrays representing entire files (i.e. pictures, documents).
   *
   */
  associatedData?: Maybe<ProductAssociatedData>;
  /**
   * Attributes allows defining set of data that are fetched in bulk along with the reference.
   * Attributes may be used for fast filtering or can be used to sort along.
   *
   */
  attributes?: Maybe<ProductAttributes>;
  /**
   * Contains reference to the product brand. Brand represents a manufacturer or marketing brand of the product.
   * The product may have only one such brand.
   */
  brand?: Maybe<ProductBrandReference>;
  /** List of bonus bundles that can be obtained by purchasing this product. */
  bundles: Array<ProductBundlesReference>;
  /**
   * Contains set of categories the product is assigned to. Typically, there is exactly one assignment, but
   * product can be assigned to multiple ones.
   */
  categories: Array<ProductCategoriesReference>;
  /**
   * Contains set of groups the product is assigned to. Groups allow categorization of products outside
   * the shared category hierarchy.
   */
  groups: Array<ProductGroupsReference>;
  /**
   * Contains set of requested locales for this particular entity.
   *
   */
  locales: Array<CatalogLocale>;
  /**
   * Contains reference to the master product. The reference is always NULL except for products of type VARIANT.
   * These products have always the reference to their master product. Master product is usually displayed
   * in listings instead of the variants to avoid cluttering the listing with similar products.
   */
  master?: Maybe<ProductMasterReference>;
  /**
   * Contains reference to all parameter values that has been assigned to the product.
   * Parameter value is a specific "property" of the product that can be used for differentiating products
   * in a comprehensible way. An example of parameter value might be a material - aluminium, plastic,
   * or ports - USB, HDMI or whatever you can think of.
   * Single parameter value can be assigned to multiple products.
   */
  parameterValues: Array<ProductParameterValuesReference>;
  /**
   * Single price corresponding to defined arguments picked up from set of all `prices`.
   * If more than one price is found, the valid one is picked. Validity is check based on query, if desired
   * validity is not specified in query, current time is used.
   *
   */
  price?: Maybe<Price>;
  /**
   * Price for which the entity should be sold. This method can be used only when appropriate
   * price related constraints are present so that `currency` and `priceList` priority can be extracted from the query.
   * The moment is either extracted from the query as well (if present) or current date and time is used.
   *
   */
  priceForSale?: Maybe<Price>;
  /**
   * Price inner record handling controls how prices that share same `inner entity id` will behave during filtering and sorting.
   *
   */
  priceInnerRecordHandling: PriceInnerRecordHandling;
  /**
   * Prices allows defining set of prices of entity for complex filtering and ordering.
   *
   */
  prices: Array<Price>;
  /**
   * Unique Integer positive number representing the entity. Can be used for fast lookup for
   * entity (entities). Primary key must be unique within the same entity type.
   *
   */
  primaryKey: Scalars['Int']['output'];
  /** Contains reference to all set products this product set consists of. */
  productSetItems: Array<ProductProductSetItemsReference>;
  /**
   * Contains set of product the product is related to. The type of the relation is further categorized by
   * `category` reference attribute. This reference allows interconnect products that are similar or
   * supplementary one to another.
   */
  relatedProducts: Array<ProductRelatedProductsReference>;
  /**
   * It contains references to all stocks for which the product is visible (because the visibility of the product depends on the stock quantity).
   * The product is then visible to the customer according to the stock they have access to.
   */
  stockVisibilities: Array<ProductStockVisibilitiesReference>;
  /** Contains reference to all stocks/warehouse the product is being kept on (or was kept and was depleted). */
  stocks: Array<ProductStocksReference>;
  /**
   * Tags allow non-systematic categorization (cross-structure tagging) of the entities. Tags are often more
   * digestible from the user's point of view. Tags are maintained in Edee.ONE CMS and here we just link them.
   */
  tags: Array<ProductTagsReference>;
  /**
   * Type of entity.
   * Entity type is main sharding key - all data of entities with same type are stored in separated collections. Within the
   * entity type entity is uniquely represented by primary key.
   *
   */
  type: Scalars['String']['output'];
  /**
   * Property is present only in products of MASTER subtype - e.g. master products.
   * Contains list of all parameters that distinguish variants of this particular master product.
   */
  variantParameters: Array<ProductVariantParametersReference>;
  /**
   * Contains version of this definition object and gets increased with any entity type update. Allows to execute
   * optimistic locking i.e. avoiding parallel modifications.
   *
   */
  version: Scalars['Int']['output'];
};


/**
 * Product represents an article that can be displayed and sold on e-shop. Product come in different flavours - complex
 * master / variant products, simple basic products or composed product sets. Product can be organized in categories,
 * groups. Product can relate to other products or brands. Product have prices.
 */
export type ProductAssociatedDataArgs = {
  locale?: InputMaybe<CatalogLocale>;
};


/**
 * Product represents an article that can be displayed and sold on e-shop. Product come in different flavours - complex
 * master / variant products, simple basic products or composed product sets. Product can be organized in categories,
 * groups. Product can relate to other products or brands. Product have prices.
 */
export type ProductAttributesArgs = {
  locale?: InputMaybe<CatalogLocale>;
};


/**
 * Product represents an article that can be displayed and sold on e-shop. Product come in different flavours - complex
 * master / variant products, simple basic products or composed product sets. Product can be organized in categories,
 * groups. Product can relate to other products or brands. Product have prices.
 */
export type ProductBrandArgs = {
  filterBy?: InputMaybe<FilterContainer13b6513537be4a96>;
  orderBy?: InputMaybe<Array<OrderContainer8d36138f1971f1bb>>;
};


/**
 * Product represents an article that can be displayed and sold on e-shop. Product come in different flavours - complex
 * master / variant products, simple basic products or composed product sets. Product can be organized in categories,
 * groups. Product can relate to other products or brands. Product have prices.
 */
export type ProductBundlesArgs = {
  filterBy?: InputMaybe<FilterContainer2cf89daeb4f0d064>;
  orderBy?: InputMaybe<Array<OrderContainerd89b7947fe7e7154>>;
};


/**
 * Product represents an article that can be displayed and sold on e-shop. Product come in different flavours - complex
 * master / variant products, simple basic products or composed product sets. Product can be organized in categories,
 * groups. Product can relate to other products or brands. Product have prices.
 */
export type ProductCategoriesArgs = {
  filterBy?: InputMaybe<FilterContainerd7c10f54d105b2f6>;
  orderBy?: InputMaybe<Array<OrderContainer16a68379c1882114>>;
};


/**
 * Product represents an article that can be displayed and sold on e-shop. Product come in different flavours - complex
 * master / variant products, simple basic products or composed product sets. Product can be organized in categories,
 * groups. Product can relate to other products or brands. Product have prices.
 */
export type ProductGroupsArgs = {
  filterBy?: InputMaybe<FilterContainer1623f55fb0c57182>;
  orderBy?: InputMaybe<Array<OrderContainer20273f9758d7794a>>;
};


/**
 * Product represents an article that can be displayed and sold on e-shop. Product come in different flavours - complex
 * master / variant products, simple basic products or composed product sets. Product can be organized in categories,
 * groups. Product can relate to other products or brands. Product have prices.
 */
export type ProductMasterArgs = {
  filterBy?: InputMaybe<FilterContainer5762c3a66bdc6e2c>;
  orderBy?: InputMaybe<Array<OrderContainer4058d7c5a95792f>>;
};


/**
 * Product represents an article that can be displayed and sold on e-shop. Product come in different flavours - complex
 * master / variant products, simple basic products or composed product sets. Product can be organized in categories,
 * groups. Product can relate to other products or brands. Product have prices.
 */
export type ProductParameterValuesArgs = {
  filterBy?: InputMaybe<FilterContainere3982a3d02ff904d>;
  orderBy?: InputMaybe<Array<OrderContainer9d8bf58d6da69dd1>>;
};


/**
 * Product represents an article that can be displayed and sold on e-shop. Product come in different flavours - complex
 * master / variant products, simple basic products or composed product sets. Product can be organized in categories,
 * groups. Product can relate to other products or brands. Product have prices.
 */
export type ProductPriceArgs = {
  currency?: InputMaybe<CatalogCurrency>;
  locale?: InputMaybe<CatalogLocale>;
  priceList: Scalars['String']['input'];
};


/**
 * Product represents an article that can be displayed and sold on e-shop. Product come in different flavours - complex
 * master / variant products, simple basic products or composed product sets. Product can be organized in categories,
 * groups. Product can relate to other products or brands. Product have prices.
 */
export type ProductPriceForSaleArgs = {
  currency?: InputMaybe<CatalogCurrency>;
  locale?: InputMaybe<CatalogLocale>;
  priceList?: InputMaybe<Scalars['String']['input']>;
  validIn?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  validNow?: InputMaybe<Scalars['Boolean']['input']>;
};


/**
 * Product represents an article that can be displayed and sold on e-shop. Product come in different flavours - complex
 * master / variant products, simple basic products or composed product sets. Product can be organized in categories,
 * groups. Product can relate to other products or brands. Product have prices.
 */
export type ProductPricesArgs = {
  currency?: InputMaybe<CatalogCurrency>;
  locale?: InputMaybe<CatalogLocale>;
  priceLists?: InputMaybe<Array<Scalars['String']['input']>>;
};


/**
 * Product represents an article that can be displayed and sold on e-shop. Product come in different flavours - complex
 * master / variant products, simple basic products or composed product sets. Product can be organized in categories,
 * groups. Product can relate to other products or brands. Product have prices.
 */
export type ProductProductSetItemsArgs = {
  filterBy?: InputMaybe<FilterContainer903f3e153cb1e6fb>;
  orderBy?: InputMaybe<Array<OrderContainer4990bf0060fba166>>;
};


/**
 * Product represents an article that can be displayed and sold on e-shop. Product come in different flavours - complex
 * master / variant products, simple basic products or composed product sets. Product can be organized in categories,
 * groups. Product can relate to other products or brands. Product have prices.
 */
export type ProductRelatedProductsArgs = {
  filterBy?: InputMaybe<FilterContainer18e363c46192dd8b>;
  orderBy?: InputMaybe<Array<OrderContainerf6e0ce132e9ec30a>>;
};


/**
 * Product represents an article that can be displayed and sold on e-shop. Product come in different flavours - complex
 * master / variant products, simple basic products or composed product sets. Product can be organized in categories,
 * groups. Product can relate to other products or brands. Product have prices.
 */
export type ProductStockVisibilitiesArgs = {
  filterBy?: InputMaybe<FilterContainerf4d19f02cdced8b0>;
  orderBy?: InputMaybe<Array<OrderContainera528a35f723b1525>>;
};


/**
 * Product represents an article that can be displayed and sold on e-shop. Product come in different flavours - complex
 * master / variant products, simple basic products or composed product sets. Product can be organized in categories,
 * groups. Product can relate to other products or brands. Product have prices.
 */
export type ProductStocksArgs = {
  filterBy?: InputMaybe<FilterContainer3e7971791f10624>;
  orderBy?: InputMaybe<Array<OrderContainerb6c1c3bfe403e869>>;
};


/**
 * Product represents an article that can be displayed and sold on e-shop. Product come in different flavours - complex
 * master / variant products, simple basic products or composed product sets. Product can be organized in categories,
 * groups. Product can relate to other products or brands. Product have prices.
 */
export type ProductTagsArgs = {
  filterBy?: InputMaybe<FilterContainer7c02d16043ca92f>;
  orderBy?: InputMaybe<Array<OrderContainer822edbdd50a8dce1>>;
};


/**
 * Product represents an article that can be displayed and sold on e-shop. Product come in different flavours - complex
 * master / variant products, simple basic products or composed product sets. Product can be organized in categories,
 * groups. Product can relate to other products or brands. Product have prices.
 */
export type ProductVariantParametersArgs = {
  filterBy?: InputMaybe<FilterContainerf8ed17494a215fd4>;
  orderBy?: InputMaybe<Array<OrderContainer926d9c303216fec3>>;
};

/**
 * Associated data carry additional data entries that are never used for filtering / sorting but may be needed to be fetched
 * along with entity in order to present data to the target consumer (i.e. user / API / bot). Associated data may be stored
 * in slower storage and may contain wide range of data types - from small ones (i.e. numbers, strings, dates) up to large
 * binary arrays representing entire files (i.e. pictures, documents).
 *
 */
export type ProductAssociatedData = {
  __typename?: 'ProductAssociatedData';
  /**
   * Contains a structure that keeps all currently active URLs for different locales. This information is used
   * for rendering language switching menu. We need to use correct active URL so that user stays looking
   * the exact same entity after the locale switch occurred - just in different language.
   */
  allActiveUrls?: Maybe<Scalars['ComplexDataObject']['output']>;
  /**
   * A structure that allows to reference multiple binary files related to the entity. The related files might
   * represent pictures, technical documentation, certificates, 3D models and much more. The files are expected
   * to be kept in external storage and referenced from here.
   *
   * The format of the related file string is: `code`:`storageId`:`[id1,id2,id3]` where:
   *
   * - `code` is the identificator of the related file type
   * - `storageId` is the identifiactor of the Edee.ONE storage
   * - `[id1,id2,id3]` is array of integer numbers that identify the files in the storage
   *
   * This associated data contains all data about related files and is superset of `relatedFiles`.
   */
  allRelatedFiles?: Maybe<Array<Scalars['String']['output']>>;
  /** A structure that allows to specify a set of localized labels for entity. */
  localization?: Maybe<Scalars['ComplexDataObject']['output']>;
};

/**
 * Attribute histogram is just index for `Histogram` objects for multiple attributes.
 *
 */
export type ProductAttributeHistogram = {
  __typename?: 'ProductAttributeHistogram';
  batteryCapacity?: Maybe<Histogram>;
  batteryLife?: Maybe<Histogram>;
  batteryLifeCase?: Maybe<Histogram>;
  batteryLifeHeadset?: Maybe<Histogram>;
  connectionLength?: Maybe<Histogram>;
  cpuFrequency?: Maybe<Histogram>;
  depth?: Maybe<Histogram>;
  depthInMm?: Maybe<Histogram>;
  depthSourceA?: Maybe<Histogram>;
  displaySize?: Maybe<Histogram>;
  frequencyFrom?: Maybe<Histogram>;
  frequencyTo?: Maybe<Histogram>;
  frontCameraResolut?: Maybe<Histogram>;
  height?: Maybe<Histogram>;
  heightInMm?: Maybe<Histogram>;
  heightMerge?: Maybe<Histogram>;
  heightSourceA?: Maybe<Histogram>;
  length?: Maybe<Histogram>;
  rearCameraResoluti?: Maybe<Histogram>;
  refreshRate?: Maybe<Histogram>;
  responseTime?: Maybe<Histogram>;
  snr?: Maybe<Histogram>;
  thickness?: Maybe<Histogram>;
  totalBatteryLife?: Maybe<Histogram>;
  totalPerformanceSet?: Maybe<Histogram>;
  totalWeight?: Maybe<Histogram>;
  weight?: Maybe<Histogram>;
  weightInKg?: Maybe<Histogram>;
  weightMerge?: Maybe<Histogram>;
  weightSourceA?: Maybe<Histogram>;
  width?: Maybe<Histogram>;
  widthInMm?: Maybe<Histogram>;
  widthMerge?: Maybe<Histogram>;
  widthSourceA?: Maybe<Histogram>;
};

/**
 * Attributes allows defining set of data that are fetched in bulk along with the entity body.
 * Attributes may be used for fast filtering or can be used to sort along.
 *
 */
export type ProductAttributes = {
  __typename?: 'ProductAttributes';
  /**
   * Availability level recognized by the system. The availability levels are configured in system configuration,
   * are specific to the certain project and don't change during application lifetime (application reconfiguration
   * is needed to change those). The specific settings for each availability level (those that affect visibility,
   * orderability and so on) are evaluated on the server side, and they wouldn't be probably necessary on the client
   * side. The availability name is mainly targeted to be part of the localization keys used on the client.
   *
   */
  availability: Scalars['String']['output'];
  /** Battery capacity */
  batteryCapacity?: Maybe<Scalars['BigDecimal']['output']>;
  /** Battery life */
  batteryLife?: Maybe<Scalars['BigDecimal']['output']>;
  /** Battery life - case */
  batteryLifeCase?: Maybe<Scalars['BigDecimal']['output']>;
  /** Battery life - earpiece */
  batteryLifeHeadset?: Maybe<Scalars['BigDecimal']['output']>;
  /**
   * Provides quick access to the code of the linked brand for the sake of passing to analytics software
   * along with the other product data in event.
   */
  brandCode?: Maybe<Scalars['String']['output']>;
  /** Catalog designation of the product in the seller system. It doesn't have to be unique. */
  catalogNumber?: Maybe<Scalars['String']['output']>;
  /**
   * Date and time of the last change of this entity. This timestamp is updated only when real change
   * in entity occurs in primary data store.  This timestamp should be used on boundaries with external
   * systems (such as inventory feeds and so on).
   */
  changed: Scalars['OffsetDateTime']['output'];
  /**
   * Unique code that identifies the entity among other entities of the same kind.
   * The code is equivalent to primary key but is targeted on external consumers (systems).
   */
  code: Scalars['String']['output'];
  /**
   * The product shortcode for use in feeds and GTM, which must share the same code and have limited
   * length. For now, the shortest recorded length is 32 characters, and this shortcode is optimized for
   * that length.
   */
  codeShort: Scalars['String']['output'];
  /** Connection length */
  connectionLength?: Maybe<Scalars['BigDecimal']['output']>;
  /** CPU frequency */
  cpuFrequency?: Maybe<Scalars['BigDecimal']['output']>;
  /** Depth */
  depth?: Maybe<Scalars['BigDecimal']['output']>;
  /** Depth */
  depthInMm?: Maybe<Scalars['BigDecimal']['output']>;
  /** Depth */
  depthSourceA?: Maybe<Scalars['BigDecimal']['output']>;
  /** Full description of the entity in HTML format. */
  description?: Maybe<Scalars['String']['output']>;
  /** Shortened version of description of the entity in plain text. */
  descriptionShort?: Maybe<Scalars['String']['output']>;
  /** Display size */
  displaySize?: Maybe<Scalars['BigDecimal']['output']>;
  /**
   * The EAN, or European Article Number, can have 8, 12, 13 or 14 characters. EAN-13 is most often used, which
   * consists of a prefix (special code for the given goods) or the supplier's country number (Czechia has 859,
   * Slovakia 858). The code continues with the manufacturer's number and the serial number of the product,
   * which the manufacturer chooses himself.
   *
   */
  ean?: Maybe<Scalars['String']['output']>;
  /** Max Frequency */
  frequencyFrom?: Maybe<Scalars['BigDecimal']['output']>;
  /** Min Frequency */
  frequencyTo?: Maybe<Scalars['BigDecimal']['output']>;
  /** Front camera resolution */
  frontCameraResolut?: Maybe<Scalars['BigDecimal']['output']>;
  /** Height */
  height?: Maybe<Scalars['BigDecimal']['output']>;
  /** Height */
  heightInMm?: Maybe<Scalars['BigDecimal']['output']>;
  /** Height */
  heightMerge?: Maybe<Scalars['BigDecimal']['output']>;
  /** Height */
  heightSourceA?: Maybe<Scalars['BigDecimal']['output']>;
  /**
   * Contains true if product is alias (kind of duplicate) of the original (origin) product.
   *  Alias products copy most of the origin properties, but allow to override and change most of them.
   *  This mechanism is provided by the EdeeShop, so this flag is just a note that this happened on this product.
   */
  isAlias: Scalars['Boolean']['output'];
  /**
   * If it is `true`, the set is worked with as a whole (it has its own stock availability independent of the
   * items), otherwise individual items are reserved directly when ordering (i.e. by purchasing any individual
   * item, the stock availability of the set will also be reduced).
   */
  isBookAsSet?: Maybe<Scalars['Boolean']['output']>;
  /** Length */
  length?: Maybe<Scalars['BigDecimal']['output']>;
  /** Maximal quantity of the product that can be ordered. */
  maxOrderQuantity?: Maybe<Scalars['BigDecimal']['output']>;
  /** Minimal quantity of the product that can be ordered. */
  minOrderQuantity: Scalars['BigDecimal']['output'];
  /** Localized name of the entity. */
  name: Scalars['String']['output'];
  /**
   * Order of the entity among other entities sharing the same parent in the listing. Used for sorting entities
   * in ascending order.
   */
  order: Scalars['Predecessor']['output'];
  /**
   * Returns count of items of this particular product that has been already sold.
   * Allows sorting by most sold products.
   *
   */
  orderedQuantity: Scalars['BigDecimal']['output'];
  /**
   * Defines product types:
   *
   * - BASIC: standard (basic) product
   * - MASTER: the master product represents a kind of common ancestor for all product variants.
   * 	E.g. we can have the t-shirt in multiple sizes (S, M, L, LX). Master is usually displayed in listings
   * 	instead of repeating multiple combinations of the same product. It is not possible to order or add t
   * 	the wishlist.
   * - VARIANT: single product variant (i.e. a blue medium-size T-Shirt)
   * - SET: a set of products bought as a whole
   *
   */
  productType: Scalars['String']['output'];
  /**
   * Date and time when this entity was last published in the evitaDB index. This timestamp will usually
   * be different from the `changed` attribute because the publishing process asynchronously picks up
   * changed entities and publishes them to the evitaDB index with some delay. Also, when evitaDB is
   * completely re-indexed, all timestamps in this attribute will be reset to a new timestamp, while the
   * `changed` attribute will remain the same.
   *
   */
  published: Scalars['OffsetDateTime']['output'];
  /** Contains average rating for the entity across all accepted votes. */
  rating?: Maybe<Scalars['BigDecimal']['output']>;
  /**
   * Contains all user ids that gave a rating to the product. This attribute allows to list all ratings
   * done by a particular user.
   */
  ratingUsers?: Maybe<Array<Scalars['UUID']['output']>>;
  /** Contains total number of accepted votes for this entity. */
  ratingVotes: Scalars['Int']['output'];
  /** Rear camera resolution */
  rearCameraResoluti?: Maybe<Scalars['BigDecimal']['output']>;
  /** Refresh rate */
  refreshRate?: Maybe<Scalars['BigDecimal']['output']>;
  /**
   * A structure that allows to reference multiple binary files related to the entity. The related files might
   * represent pictures, technical documentation, certificates, 3D models and much more. The files are expected
   * to be kept in external storage and referenced from here.
   *
   * - `code` is the identificator of the related file type
   * - `storageId` is the identificator of the Edee.ONE storage
   * - `[id1,id2,id3]` is array of integer numbers that identify the files in the storage
   *
   * This attribute contains subset of `allRelatedFiles` that is used frequently along with entity
   * in listings and so on. Usually it contains something like main motive.
   */
  relatedFiles?: Maybe<Array<Scalars['String']['output']>>;
  /** Response time */
  responseTime?: Maybe<Scalars['BigDecimal']['output']>;
  /**
   * Enumeration that represents limitations for sale on this product:
   *
   * - BONUS_PRODUCT: the product can only be obtained as part of a bonus package.
   * - SET_PART_PRODUCT: the product can only be obtained as a part of the set.
   * - WITHOUT_RESTRICTION: product can be obtained without any restriction
   *
   */
  saleRestriction: Scalars['String']['output'];
  /** SNR */
  snr?: Maybe<Scalars['BigDecimal']['output']>;
  /**
   * Returns the status of the entity:
   *
   * - ACTIVE: entity is available on frontend
   * - PRIVATE: entity is  not available on frontend, but it's visible in administration
   */
  status: Scalars['String']['output'];
  /**
   * The number that represents minimal step in ordered quantity that can be made by customer (i.e. when he wants
   * to order more or less of the product).
   *
   */
  stepOrderQuantity: Scalars['BigDecimal']['output'];
  /**
   * The method returns the id of the stock item under which the stock quantity of the given product is registered.
   *
   * E.g. for base products, it corresponds to the primary key of the same product. For aliases, it corresponds
   * to the primary key of the product origin.
   */
  stockItemPrimaryKey: Scalars['Int']['output'];
  /**
   * The supplier code represents a code assigned to the product in the supplier system. This code may differ
   * from catalog number assigned by the seller. It doesn't have to be unique.
   *
   */
  supplierCode?: Maybe<Scalars['String']['output']>;
  /** Thickness */
  thickness?: Maybe<Scalars['BigDecimal']['output']>;
  /** Battery life */
  totalBatteryLife?: Maybe<Scalars['BigDecimal']['output']>;
  /** Overall power */
  totalPerformanceSet?: Maybe<Scalars['BigDecimal']['output']>;
  /** Weight */
  totalWeight?: Maybe<Scalars['BigDecimal']['output']>;
  /** Unit code (pcs, kg, cm). */
  unit: Scalars['String']['output'];
  /** Localized and globally unique URL of the entity. */
  url?: Maybe<Scalars['String']['output']>;
  /**
   * Old URLs that has been originally assigned to the entity, but are no longer active. Each value that was
   * once `url` but was changed to something else is moved to this list. Thi allows accessing the entity even
   * on the previous location (with redirect) so that remembered URLs in external systems don't end up with
   * "entity not found" response.
   */
  urlInactive?: Maybe<Array<Scalars['String']['output']>>;
  /**
   * Date time range of general accessibility to the entity. Outside this range the entity behaves like if
   * the status was set to PRIVATE.
   */
  validity?: Maybe<Scalars['DateTimeRange']['output']>;
  /** Warranty period for the product in #getWarrantyPeriodUnit() . */
  warrantyPeriod?: Maybe<Scalars['Int']['output']>;
  /** Weight */
  weight?: Maybe<Scalars['BigDecimal']['output']>;
  /** Weight */
  weightInKg?: Maybe<Scalars['BigDecimal']['output']>;
  /** Weigth */
  weightMerge?: Maybe<Scalars['BigDecimal']['output']>;
  /** Weight */
  weightSourceA?: Maybe<Scalars['BigDecimal']['output']>;
  /** Width */
  width?: Maybe<Scalars['BigDecimal']['output']>;
  /** Width */
  widthInMm?: Maybe<Scalars['BigDecimal']['output']>;
  /** Width */
  widthMerge?: Maybe<Scalars['BigDecimal']['output']>;
  /** Width */
  widthSourceA?: Maybe<Scalars['BigDecimal']['output']>;
};


/**
 * Attributes allows defining set of data that are fetched in bulk along with the entity body.
 * Attributes may be used for fast filtering or can be used to sort along.
 *
 */
export type ProductAttributesBatteryCapacityArgs = {
  formatted?: InputMaybe<Scalars['Boolean']['input']>;
};


/**
 * Attributes allows defining set of data that are fetched in bulk along with the entity body.
 * Attributes may be used for fast filtering or can be used to sort along.
 *
 */
export type ProductAttributesBatteryLifeArgs = {
  formatted?: InputMaybe<Scalars['Boolean']['input']>;
};


/**
 * Attributes allows defining set of data that are fetched in bulk along with the entity body.
 * Attributes may be used for fast filtering or can be used to sort along.
 *
 */
export type ProductAttributesBatteryLifeCaseArgs = {
  formatted?: InputMaybe<Scalars['Boolean']['input']>;
};


/**
 * Attributes allows defining set of data that are fetched in bulk along with the entity body.
 * Attributes may be used for fast filtering or can be used to sort along.
 *
 */
export type ProductAttributesBatteryLifeHeadsetArgs = {
  formatted?: InputMaybe<Scalars['Boolean']['input']>;
};


/**
 * Attributes allows defining set of data that are fetched in bulk along with the entity body.
 * Attributes may be used for fast filtering or can be used to sort along.
 *
 */
export type ProductAttributesConnectionLengthArgs = {
  formatted?: InputMaybe<Scalars['Boolean']['input']>;
};


/**
 * Attributes allows defining set of data that are fetched in bulk along with the entity body.
 * Attributes may be used for fast filtering or can be used to sort along.
 *
 */
export type ProductAttributesCpuFrequencyArgs = {
  formatted?: InputMaybe<Scalars['Boolean']['input']>;
};


/**
 * Attributes allows defining set of data that are fetched in bulk along with the entity body.
 * Attributes may be used for fast filtering or can be used to sort along.
 *
 */
export type ProductAttributesDepthArgs = {
  formatted?: InputMaybe<Scalars['Boolean']['input']>;
};


/**
 * Attributes allows defining set of data that are fetched in bulk along with the entity body.
 * Attributes may be used for fast filtering or can be used to sort along.
 *
 */
export type ProductAttributesDepthInMmArgs = {
  formatted?: InputMaybe<Scalars['Boolean']['input']>;
};


/**
 * Attributes allows defining set of data that are fetched in bulk along with the entity body.
 * Attributes may be used for fast filtering or can be used to sort along.
 *
 */
export type ProductAttributesDepthSourceAArgs = {
  formatted?: InputMaybe<Scalars['Boolean']['input']>;
};


/**
 * Attributes allows defining set of data that are fetched in bulk along with the entity body.
 * Attributes may be used for fast filtering or can be used to sort along.
 *
 */
export type ProductAttributesDisplaySizeArgs = {
  formatted?: InputMaybe<Scalars['Boolean']['input']>;
};


/**
 * Attributes allows defining set of data that are fetched in bulk along with the entity body.
 * Attributes may be used for fast filtering or can be used to sort along.
 *
 */
export type ProductAttributesFrequencyFromArgs = {
  formatted?: InputMaybe<Scalars['Boolean']['input']>;
};


/**
 * Attributes allows defining set of data that are fetched in bulk along with the entity body.
 * Attributes may be used for fast filtering or can be used to sort along.
 *
 */
export type ProductAttributesFrequencyToArgs = {
  formatted?: InputMaybe<Scalars['Boolean']['input']>;
};


/**
 * Attributes allows defining set of data that are fetched in bulk along with the entity body.
 * Attributes may be used for fast filtering or can be used to sort along.
 *
 */
export type ProductAttributesFrontCameraResolutArgs = {
  formatted?: InputMaybe<Scalars['Boolean']['input']>;
};


/**
 * Attributes allows defining set of data that are fetched in bulk along with the entity body.
 * Attributes may be used for fast filtering or can be used to sort along.
 *
 */
export type ProductAttributesHeightArgs = {
  formatted?: InputMaybe<Scalars['Boolean']['input']>;
};


/**
 * Attributes allows defining set of data that are fetched in bulk along with the entity body.
 * Attributes may be used for fast filtering or can be used to sort along.
 *
 */
export type ProductAttributesHeightInMmArgs = {
  formatted?: InputMaybe<Scalars['Boolean']['input']>;
};


/**
 * Attributes allows defining set of data that are fetched in bulk along with the entity body.
 * Attributes may be used for fast filtering or can be used to sort along.
 *
 */
export type ProductAttributesHeightMergeArgs = {
  formatted?: InputMaybe<Scalars['Boolean']['input']>;
};


/**
 * Attributes allows defining set of data that are fetched in bulk along with the entity body.
 * Attributes may be used for fast filtering or can be used to sort along.
 *
 */
export type ProductAttributesHeightSourceAArgs = {
  formatted?: InputMaybe<Scalars['Boolean']['input']>;
};


/**
 * Attributes allows defining set of data that are fetched in bulk along with the entity body.
 * Attributes may be used for fast filtering or can be used to sort along.
 *
 */
export type ProductAttributesLengthArgs = {
  formatted?: InputMaybe<Scalars['Boolean']['input']>;
};


/**
 * Attributes allows defining set of data that are fetched in bulk along with the entity body.
 * Attributes may be used for fast filtering or can be used to sort along.
 *
 */
export type ProductAttributesMaxOrderQuantityArgs = {
  formatted?: InputMaybe<Scalars['Boolean']['input']>;
};


/**
 * Attributes allows defining set of data that are fetched in bulk along with the entity body.
 * Attributes may be used for fast filtering or can be used to sort along.
 *
 */
export type ProductAttributesMinOrderQuantityArgs = {
  formatted?: InputMaybe<Scalars['Boolean']['input']>;
};


/**
 * Attributes allows defining set of data that are fetched in bulk along with the entity body.
 * Attributes may be used for fast filtering or can be used to sort along.
 *
 */
export type ProductAttributesOrderedQuantityArgs = {
  formatted?: InputMaybe<Scalars['Boolean']['input']>;
};


/**
 * Attributes allows defining set of data that are fetched in bulk along with the entity body.
 * Attributes may be used for fast filtering or can be used to sort along.
 *
 */
export type ProductAttributesRatingArgs = {
  formatted?: InputMaybe<Scalars['Boolean']['input']>;
};


/**
 * Attributes allows defining set of data that are fetched in bulk along with the entity body.
 * Attributes may be used for fast filtering or can be used to sort along.
 *
 */
export type ProductAttributesRearCameraResolutiArgs = {
  formatted?: InputMaybe<Scalars['Boolean']['input']>;
};


/**
 * Attributes allows defining set of data that are fetched in bulk along with the entity body.
 * Attributes may be used for fast filtering or can be used to sort along.
 *
 */
export type ProductAttributesRefreshRateArgs = {
  formatted?: InputMaybe<Scalars['Boolean']['input']>;
};


/**
 * Attributes allows defining set of data that are fetched in bulk along with the entity body.
 * Attributes may be used for fast filtering or can be used to sort along.
 *
 */
export type ProductAttributesResponseTimeArgs = {
  formatted?: InputMaybe<Scalars['Boolean']['input']>;
};


/**
 * Attributes allows defining set of data that are fetched in bulk along with the entity body.
 * Attributes may be used for fast filtering or can be used to sort along.
 *
 */
export type ProductAttributesSnrArgs = {
  formatted?: InputMaybe<Scalars['Boolean']['input']>;
};


/**
 * Attributes allows defining set of data that are fetched in bulk along with the entity body.
 * Attributes may be used for fast filtering or can be used to sort along.
 *
 */
export type ProductAttributesStepOrderQuantityArgs = {
  formatted?: InputMaybe<Scalars['Boolean']['input']>;
};


/**
 * Attributes allows defining set of data that are fetched in bulk along with the entity body.
 * Attributes may be used for fast filtering or can be used to sort along.
 *
 */
export type ProductAttributesThicknessArgs = {
  formatted?: InputMaybe<Scalars['Boolean']['input']>;
};


/**
 * Attributes allows defining set of data that are fetched in bulk along with the entity body.
 * Attributes may be used for fast filtering or can be used to sort along.
 *
 */
export type ProductAttributesTotalBatteryLifeArgs = {
  formatted?: InputMaybe<Scalars['Boolean']['input']>;
};


/**
 * Attributes allows defining set of data that are fetched in bulk along with the entity body.
 * Attributes may be used for fast filtering or can be used to sort along.
 *
 */
export type ProductAttributesTotalPerformanceSetArgs = {
  formatted?: InputMaybe<Scalars['Boolean']['input']>;
};


/**
 * Attributes allows defining set of data that are fetched in bulk along with the entity body.
 * Attributes may be used for fast filtering or can be used to sort along.
 *
 */
export type ProductAttributesTotalWeightArgs = {
  formatted?: InputMaybe<Scalars['Boolean']['input']>;
};


/**
 * Attributes allows defining set of data that are fetched in bulk along with the entity body.
 * Attributes may be used for fast filtering or can be used to sort along.
 *
 */
export type ProductAttributesWeightArgs = {
  formatted?: InputMaybe<Scalars['Boolean']['input']>;
};


/**
 * Attributes allows defining set of data that are fetched in bulk along with the entity body.
 * Attributes may be used for fast filtering or can be used to sort along.
 *
 */
export type ProductAttributesWeightInKgArgs = {
  formatted?: InputMaybe<Scalars['Boolean']['input']>;
};


/**
 * Attributes allows defining set of data that are fetched in bulk along with the entity body.
 * Attributes may be used for fast filtering or can be used to sort along.
 *
 */
export type ProductAttributesWeightMergeArgs = {
  formatted?: InputMaybe<Scalars['Boolean']['input']>;
};


/**
 * Attributes allows defining set of data that are fetched in bulk along with the entity body.
 * Attributes may be used for fast filtering or can be used to sort along.
 *
 */
export type ProductAttributesWeightSourceAArgs = {
  formatted?: InputMaybe<Scalars['Boolean']['input']>;
};


/**
 * Attributes allows defining set of data that are fetched in bulk along with the entity body.
 * Attributes may be used for fast filtering or can be used to sort along.
 *
 */
export type ProductAttributesWidthArgs = {
  formatted?: InputMaybe<Scalars['Boolean']['input']>;
};


/**
 * Attributes allows defining set of data that are fetched in bulk along with the entity body.
 * Attributes may be used for fast filtering or can be used to sort along.
 *
 */
export type ProductAttributesWidthInMmArgs = {
  formatted?: InputMaybe<Scalars['Boolean']['input']>;
};


/**
 * Attributes allows defining set of data that are fetched in bulk along with the entity body.
 * Attributes may be used for fast filtering or can be used to sort along.
 *
 */
export type ProductAttributesWidthMergeArgs = {
  formatted?: InputMaybe<Scalars['Boolean']['input']>;
};


/**
 * Attributes allows defining set of data that are fetched in bulk along with the entity body.
 * Attributes may be used for fast filtering or can be used to sort along.
 *
 */
export type ProductAttributesWidthSourceAArgs = {
  formatted?: InputMaybe<Scalars['Boolean']['input']>;
};

/**
 * This DTO contains information about single facet group and statistics of the facets that relates to it.
 *
 */
export type ProductBrandFacetGroupStatistics = {
  __typename?: 'ProductBrandFacetGroupStatistics';
  /**
   * Contains number of distinct entities in the response that possess any reference in this group.
   *
   */
  count: Scalars['Int']['output'];
  /**
   * Contains statistics of individual facets.
   *
   */
  facetStatistics: Array<ProductBrandFacetStatistics>;
};


/**
 * This DTO contains information about single facet group and statistics of the facets that relates to it.
 *
 */
export type ProductBrandFacetGroupStatisticsFacetStatisticsArgs = {
  filterBy?: InputMaybe<FilterContainer517d1d8ea5c4e742>;
  orderBy?: InputMaybe<Array<OrderContainer18970ca942385a0b>>;
};

/**
 * This DTO contains information about single facet statistics of the entities that are present in the response.
 *
 */
export type ProductBrandFacetStatistics = {
  __typename?: 'ProductBrandFacetStatistics';
  /**
   * Contains number of distinct entities in the response that possess of this reference.
   *
   */
  count: Scalars['Int']['output'];
  /**
   * Contains referenced entity representing.
   *
   */
  facetEntity?: Maybe<Brand>;
  /**
   * This field is not null only when this facet is not requested.
   * Contains projected impact on the current response if this facet is also requested in filtering constraints.
   *
   */
  impact?: Maybe<FacetRequestImpact>;
  /**
   * Contains TRUE if the facet was part of the query filtering constraints.
   *
   */
  requested: Scalars['Boolean']['output'];
};

/**
 * Contains reference to the product brand. Brand represents a manufacturer or marketing brand of the product.
 * The product may have only one such brand.
 */
export type ProductBrandReference = {
  __typename?: 'ProductBrandReference';
  /**
   * Returns body of the referenced entity in case its fetching was requested via entity_fetch constraint.
   *
   */
  referencedEntity?: Maybe<Brand>;
  /**
   *          Returns primary key of the referenced (internal or external) entity.
   *
   */
  referencedPrimaryKey: Scalars['Int']['output'];
};

/**
 * An entity representing a bonus package definition. Bonus package allows users to buy more products for the price
 * of single one, get something free when one or more products are bought and so on.
 */
export type ProductBundle = Entity & {
  __typename?: 'ProductBundle';
  /**
   * Contains set of all locales that were used for localized attributes or associated data of
   * this particular entity.
   *
   */
  allLocales: Array<CatalogLocale>;
  /**
   * Associated data carry additional data entries that are never used for filtering / sorting but may be needed to be fetched
   * along with entity in order to present data to the target consumer (i.e. user / API / bot). Associated data may be stored
   * in slower storage and may contain wide range of data types - from small ones (i.e. numbers, strings, dates) up to large
   * binary arrays representing entire files (i.e. pictures, documents).
   *
   */
  associatedData?: Maybe<ProductBundleAssociatedData>;
  /**
   * Attributes allows defining set of data that are fetched in bulk along with the reference.
   * Attributes may be used for fast filtering or can be used to sort along.
   *
   */
  attributes?: Maybe<ProductBundleAttributes>;
  /**
   * Contains set of products that user may get with discount when the `requiredItems` condition is fulfilled.
   *
   */
  bonusItems: Array<ProductBundleBonusItemsReference>;
  /**
   * Contains set of requested locales for this particular entity.
   *
   */
  locales: Array<CatalogLocale>;
  /**
   * Unique Integer positive number representing the entity. Can be used for fast lookup for
   * entity (entities). Primary key must be unique within the same entity type.
   *
   */
  primaryKey: Scalars['Int']['output'];
  /**
   * Type of entity.
   * Entity type is main sharding key - all data of entities with same type are stored in separated collections. Within the
   * entity type entity is uniquely represented by primary key.
   *
   */
  type: Scalars['String']['output'];
  /**
   * Contains version of this definition object and gets increased with any entity type update. Allows to execute
   * optimistic locking i.e. avoiding parallel modifications.
   *
   */
  version: Scalars['Int']['output'];
};


/**
 * An entity representing a bonus package definition. Bonus package allows users to buy more products for the price
 * of single one, get something free when one or more products are bought and so on.
 */
export type ProductBundleAssociatedDataArgs = {
  locale?: InputMaybe<CatalogLocale>;
};


/**
 * An entity representing a bonus package definition. Bonus package allows users to buy more products for the price
 * of single one, get something free when one or more products are bought and so on.
 */
export type ProductBundleAttributesArgs = {
  locale?: InputMaybe<CatalogLocale>;
};


/**
 * An entity representing a bonus package definition. Bonus package allows users to buy more products for the price
 * of single one, get something free when one or more products are bought and so on.
 */
export type ProductBundleBonusItemsArgs = {
  filterBy?: InputMaybe<FilterContaineree87efab1fb06f>;
  orderBy?: InputMaybe<Array<OrderContainer5e937eaca1b948e1>>;
};

/**
 * Associated data carry additional data entries that are never used for filtering / sorting but may be needed to be fetched
 * along with entity in order to present data to the target consumer (i.e. user / API / bot). Associated data may be stored
 * in slower storage and may contain wide range of data types - from small ones (i.e. numbers, strings, dates) up to large
 * binary arrays representing entire files (i.e. pictures, documents).
 *
 */
export type ProductBundleAssociatedData = {
  __typename?: 'ProductBundleAssociatedData';
  /**
   * Contains a structure that keeps all currently active URLs for different locales. This information is used
   * for rendering language switching menu. We need to use correct active URL so that user stays looking
   * the exact same entity after the locale switch occurred - just in different language.
   */
  allActiveUrls?: Maybe<Scalars['ComplexDataObject']['output']>;
  /** A structure that allows to specify a set of localized labels for entity. */
  localization?: Maybe<Scalars['ComplexDataObject']['output']>;
  /**
   * Contains JSON configuration of the particular usage condition. The structure is relevant to the attribute
   * `type` in the JSON and relates to the structure / documentation of the classes implementing
   * `com.fg.cps.eshop.price.service.usageCondition.UsageCondition` interface.
   */
  usageConditionDetails?: Maybe<Scalars['String']['output']>;
};

/**
 * Attributes allows defining set of data that are fetched in bulk along with the entity body.
 * Attributes may be used for fast filtering or can be used to sort along.
 *
 */
export type ProductBundleAttributes = {
  __typename?: 'ProductBundleAttributes';
  /**
   * A list of ways in which the customer gets/has a choice of bonus items:
   *
   * - ALL: the customer will receive all bonus items. In the case of variants, he must always choose one
   * - ONLY_ONE: the customer only needs to select one of the bonus items
   * - ONLY_ONE_OR_NONE: the customer can select only one of the bonus items or select none
   * - ALL_OPTIONAL: the customer can choose for each bonus item whether they want it or not
   *
   */
  bonusItemChoiceType: Scalars['String']['output'];
  /**
   * Date and time of the last change of this entity. This timestamp is updated only when real change
   * in entity occurs in primary data store.  This timestamp should be used on boundaries with external
   * systems (such as inventory feeds and so on).
   */
  changed: Scalars['OffsetDateTime']['output'];
  /**
   * Unique code that identifies the entity among other entities of the same kind.
   * The code is equivalent to primary key but is targeted on external consumers (systems).
   */
  code: Scalars['String']['output'];
  /**
   * The type of condition that must be met for the package to be applied.
   *
   * - REQUIRED_PRODUCTS: the bundle requires the order to contain the products in the required quantity.
   * - MIN_ORDER_VALUE: the bundle requires the value of the order to be higher than the required value in that currency
   *
   */
  conditionType: Scalars['String']['output'];
  /**
   * Currency is set only for those bundles that contain specific fixed prices for the discounted products and
   * defines the currency in which the fixed prices are specified in. The currency also allows filtering by it,
   * and therefore it's expected that the client filters only those product bundles whose currency matches the
   * current currency in the user context or are not defined at all.
   *
   */
  currency?: Maybe<Scalars['Currency']['output']>;
  /** Full description of the entity in HTML format. */
  description?: Maybe<Scalars['String']['output']>;
  /** Shortened version of description of the entity in plain text. */
  descriptionShort?: Maybe<Scalars['String']['output']>;
  /** Localized name of the entity. */
  name: Scalars['String']['output'];
  /**
   * Order of the entity among other entities sharing the same parent in the listing. Used for sorting entities
   * in ascending order.
   */
  order: Scalars['Predecessor']['output'];
  /**
   * Date and time when this entity was last published in the evitaDB index. This timestamp will usually
   * be different from the `changed` attribute because the publishing process asynchronously picks up
   * changed entities and publishes them to the evitaDB index with some delay. Also, when evitaDB is
   * completely re-indexed, all timestamps in this attribute will be reset to a new timestamp, while the
   * `changed` attribute will remain the same.
   *
   */
  published: Scalars['OffsetDateTime']['output'];
  /**
   * Returns the status of the entity:
   *
   * - ACTIVE: entity is available on frontend
   * - PRIVATE: entity is  not available on frontend, but it's visible in administration
   */
  status: Scalars['String']['output'];
  /** Localized and globally unique URL of the entity. */
  url?: Maybe<Scalars['String']['output']>;
  /**
   * Old URLs that has been originally assigned to the entity, but are no longer active. Each value that was
   * once `url` but was changed to something else is moved to this list. Thi allows accessing the entity even
   * on the previous location (with redirect) so that remembered URLs in external systems don't end up with
   * "entity not found" response.
   */
  urlInactive?: Maybe<Array<Scalars['String']['output']>>;
  /**
   * Allows to quickly find adept price lists in current user related context. We need to consider that there
   * might be thousands of prices lists that require certain condition to be met in order they could be used
   * for particular user. Therefore, we couldn't iterate over all of them and evaluate their conditions set
   * in associated data `usageConditionDetails` precisely, and we need to reduce the amount of evaluated price
   * list to bare minimum. That's why this attribute exists - it allows pre-filtering price lists that may
   * participate in current user's context computation. Each usage condition contains possible combination of
   * user context properties the usage condition may match ordered alphabetically.
   *
   */
  usageCondition?: Maybe<Array<Scalars['String']['output']>>;
  /**
   * Date time range of general accessibility to the entity. Outside this range the entity behaves like if
   * the status was set to PRIVATE.
   */
  validity?: Maybe<Scalars['DateTimeRange']['output']>;
  /**
   * Contains true (default) if the product bundle should be displayed on all required products detail page.
   *
   */
  visibleOnDetail: Scalars['Boolean']['output'];
};

/**
 * Attributes allows defining set of data that are fetched in bulk along with the entity body.
 * Attributes may be used for fast filtering or can be used to sort along.
 *
 */
export type ProductBundleBonusItemsAttributes = {
  __typename?: 'ProductBundleBonusItemsAttributes';
  /**
   * Currency for the fix price.
   * Non-null only for items with strategy `FIX_PRICE`.
   *
   */
  currency?: Maybe<Scalars['Currency']['output']>;
  /**
   * The quantity represents a quantity of this particular product that is granted by this product bundle.
   *
   */
  grantedQuantity: Scalars['BigDecimal']['output'];
  /**
   * Percentage rate for price derived as a share of the original price.
   * Non-null only for items with strategy `PERCENT_PRICE`.
   *
   */
  percentage?: Maybe<Scalars['BigDecimal']['output']>;
  /**
   * The strategy determining the price of the bonus product:
   *
   * - FREE: bonus products are free of charge
   * - FIX_PRICE: the price is fixed
   * - PRICE_LIST_PRICE: the price is determined in the standard way from price lists
   *
   */
  priceStrategy: Scalars['String']['output'];
  /**
   * Fixed price with tax in the currency defined on product bundle.
   * Non-null only for items with strategy `FIX_PRICE`.
   *
   */
  priceWithTax?: Maybe<Scalars['BigDecimal']['output']>;
  /**
   * Fixed price without tax in the currency defined on product bundle.
   * Non-null only for items with strategy `FIX_PRICE`.
   *
   */
  priceWithoutTax?: Maybe<Scalars['BigDecimal']['output']>;
  /**
   * Fixed tax amount in the currency defined on product bundle.
   * Non-null only for items with strategy `FIX_PRICE`.
   *
   */
  taxRate?: Maybe<Scalars['BigDecimal']['output']>;
};


/**
 * Attributes allows defining set of data that are fetched in bulk along with the entity body.
 * Attributes may be used for fast filtering or can be used to sort along.
 *
 */
export type ProductBundleBonusItemsAttributesGrantedQuantityArgs = {
  formatted?: InputMaybe<Scalars['Boolean']['input']>;
};


/**
 * Attributes allows defining set of data that are fetched in bulk along with the entity body.
 * Attributes may be used for fast filtering or can be used to sort along.
 *
 */
export type ProductBundleBonusItemsAttributesPercentageArgs = {
  formatted?: InputMaybe<Scalars['Boolean']['input']>;
};


/**
 * Attributes allows defining set of data that are fetched in bulk along with the entity body.
 * Attributes may be used for fast filtering or can be used to sort along.
 *
 */
export type ProductBundleBonusItemsAttributesPriceWithTaxArgs = {
  formatted?: InputMaybe<Scalars['Boolean']['input']>;
};


/**
 * Attributes allows defining set of data that are fetched in bulk along with the entity body.
 * Attributes may be used for fast filtering or can be used to sort along.
 *
 */
export type ProductBundleBonusItemsAttributesPriceWithoutTaxArgs = {
  formatted?: InputMaybe<Scalars['Boolean']['input']>;
};


/**
 * Attributes allows defining set of data that are fetched in bulk along with the entity body.
 * Attributes may be used for fast filtering or can be used to sort along.
 *
 */
export type ProductBundleBonusItemsAttributesTaxRateArgs = {
  formatted?: InputMaybe<Scalars['Boolean']['input']>;
};

/**
 * Contains set of products that user may get with discount when the `requiredItems` condition is fulfilled.
 *
 */
export type ProductBundleBonusItemsReference = {
  __typename?: 'ProductBundleBonusItemsReference';
  /**
   * Attributes allows defining set of data that are fetched in bulk along with the reference.
   * Attributes may be used for fast filtering or can be used to sort along.
   *
   */
  attributes?: Maybe<ProductBundleBonusItemsAttributes>;
  /**
   * Returns body of the referenced entity in case its fetching was requested via entity_fetch constraint.
   *
   */
  referencedEntity?: Maybe<Product>;
  /**
   *          Returns primary key of the referenced (internal or external) entity.
   *
   */
  referencedPrimaryKey: Scalars['Int']['output'];
};

/**
 * Map of requested extra results besides actual found records.
 *
 */
export type ProductBundleExtraResults = {
  __typename?: 'ProductBundleExtraResults';
  attributeHistograms?: Maybe<Array<AttributeNamedHistogram>>;
  /**
   * Returns object containing detailed information about query processing time and its decomposition to single operations.
   *
   */
  queryTelemetry: Scalars['Object']['output'];
};


/**
 * Map of requested extra results besides actual found records.
 *
 */
export type ProductBundleExtraResultsAttributeHistogramsArgs = {
  attributes: Array<Scalars['String']['input']>;
};


/**
 * Map of requested extra results besides actual found records.
 *
 */
export type ProductBundleExtraResultsQueryTelemetryArgs = {
  formatted?: InputMaybe<Scalars['Boolean']['input']>;
};

/**
 * Contains all possible local mutations to perform on entity `ProductBundle`.
 *
 */
export type ProductBundleLocalMutationAggregate = {
  /**
   * Increments or decrements existing numeric value by specified delta (negative number produces decremental of
   * existing number, positive one incrementation).
   *
   * Allows to specify the number range that is tolerated for the value after delta application has been finished to
   * verify for example that number of items on stock doesn't go below zero.
   *
   */
  applyDeltaAttributeMutation?: InputMaybe<ApplyDeltaAttributeMutation>;
  /**
   * This mutation allows to create a reference in the entity.
   *
   */
  insertReferenceMutation?: InputMaybe<InsertReferenceMutation>;
  /**
   * This mutation allows to create / update / remove attribute of the reference.
   *
   */
  referenceAttributeMutation?: InputMaybe<ReferenceAttributeMutation>;
  /**
   * Remove associated data mutation will drop existing associatedData - ie.generates new version of the associated data with tombstone
   * on it.
   *
   */
  removeAssociatedDataMutation?: InputMaybe<RemoveAssociatedDataMutation>;
  /**
   * Remove attribute mutation will drop existing attribute - ie.generates new version of the attribute with tombstone
   * on it.
   *
   */
  removeAttributeMutation?: InputMaybe<RemoveAttributeMutation>;
  /**
   * This mutation allows to remove group in the reference.
   *
   */
  removeReferenceGroupMutation?: InputMaybe<RemoveReferenceGroupMutation>;
  /**
   * This mutation allows to remove a reference from the entity.
   *
   */
  removeReferenceMutation?: InputMaybe<RemoveReferenceMutation>;
  /**
   * This mutation allows to create / update group of the reference.
   *
   */
  setReferenceGroupMutation?: InputMaybe<SetReferenceGroupMutation>;
  /**
   * Upsert associatedData mutation will either update existing associatedData or create new one.
   *
   */
  upsertAssociatedDataMutation?: InputMaybe<UpsertAssociatedDataMutation>;
  /**
   * Upsert attribute mutation will either update existing attribute or create new one.
   *
   */
  upsertAttributeMutation?: InputMaybe<UpsertAttributeMutation>;
};

/**
 * Page of records according to pagination rules in input query.
 *
 */
export type ProductBundleRecordPage = {
  __typename?: 'ProductBundleRecordPage';
  /**
   * Actual found sorted page/strip of records.
   *
   */
  data: Array<ProductBundle>;
  /**
   * Returns true if there are no data available.
   *
   */
  empty: Scalars['Boolean']['output'];
  /**
   * Returns true if current page/strip is the first page/strip in the result set.
   *
   */
  first: Scalars['Boolean']['output'];
  /**
   * Returns offset of the first record of current page with current pageSize.
   *
   */
  firstPageItemNumber: Scalars['Int']['output'];
  /**
   * Returns true if there is next page/strip available.
   *
   */
  hasNext: Scalars['Boolean']['output'];
  /**
   * Returns true if there is previous page/strip available.
   *
   */
  hasPrevious: Scalars['Boolean']['output'];
  /**
   * Returns true if current page/strip is the last page/strip in the result set.
   *
   */
  last: Scalars['Boolean']['output'];
  /**
   * Returns offset of the last record of current page with current pageSize.
   *
   */
  lastPageItemNumber: Scalars['Int']['output'];
  /**
   * Returns number of the last page that can be accessed with current number of records.
   * Returns -1 when offset/limit was used for creating paginated list.
   *
   */
  lastPageNumber: Scalars['Int']['output'];
  /**
   * Returns current page number (indexed from 1).
   *
   */
  pageNumber: Scalars['Int']['output'];
  /**
   * Returns number of records per single page.
   *
   */
  pageSize: Scalars['Int']['output'];
  /**
   * Returns true if there is only single page/strip available (i.e. total record count < record count on one page).
   *
   */
  singlePage: Scalars['Boolean']['output'];
  /**
   * Returns total number of records that are possible to fetch by paginating entire result stream.
   *
   */
  totalRecordCount: Scalars['Int']['output'];
};

/**
 * Strip of records according to offset and limit rules in input query.
 *
 */
export type ProductBundleRecordStrip = {
  __typename?: 'ProductBundleRecordStrip';
  /**
   * Actual found sorted page/strip of records.
   *
   */
  data: Array<ProductBundle>;
  /**
   * Returns true if there are no data available.
   *
   */
  empty: Scalars['Boolean']['output'];
  /**
   * Returns true if current page/strip is the first page/strip in the result set.
   *
   */
  first: Scalars['Boolean']['output'];
  /**
   * Returns true if there is next page/strip available.
   *
   */
  hasNext: Scalars['Boolean']['output'];
  /**
   * Returns true if there is previous page/strip available.
   *
   */
  hasPrevious: Scalars['Boolean']['output'];
  /**
   * Returns true if current page/strip is the last page/strip in the result set.
   *
   */
  last: Scalars['Boolean']['output'];
  /**
   * Returns limit - i.e. maximal number of records that are requested after offset.
   *
   */
  limit: Scalars['Int']['output'];
  /**
   * Returns current offset (indexed from 0).
   *
   */
  offset: Scalars['Int']['output'];
  /**
   * Returns true if there is only single page/strip available (i.e. total record count < record count on one page).
   *
   */
  singlePage: Scalars['Boolean']['output'];
  /**
   * Returns total number of records that are possible to fetch by paginating entire result stream.
   *
   */
  totalRecordCount: Scalars['Int']['output'];
};

/**
 * Evita response contains all results to single query. Results are divided to two parts - main results returned by
 * `recordPage`/`recordStrip` and set of extra results retrieved by `extraResults`.
 *
 */
export type ProductBundleResponse = {
  __typename?: 'ProductBundleResponse';
  /**
   * Returns map of requested extra results besides actual found records.
   *
   */
  extraResults: ProductBundleExtraResults;
  /**
   * Returns page of records according to pagination rules in input query.
   * Either `page` or `strip` can be used, not both.
   *
   */
  recordPage?: Maybe<ProductBundleRecordPage>;
  /**
   * Returns strip of records according to pagination rules in input query.
   * Either `page` or `strip` can be used, not both.
   *
   */
  recordStrip?: Maybe<ProductBundleRecordStrip>;
};


/**
 * Evita response contains all results to single query. Results are divided to two parts - main results returned by
 * `recordPage`/`recordStrip` and set of extra results retrieved by `extraResults`.
 *
 */
export type ProductBundleResponseRecordPageArgs = {
  number?: InputMaybe<Scalars['Int']['input']>;
  size?: InputMaybe<Scalars['Int']['input']>;
};


/**
 * Evita response contains all results to single query. Results are divided to two parts - main results returned by
 * `recordPage`/`recordStrip` and set of extra results retrieved by `extraResults`.
 *
 */
export type ProductBundleResponseRecordStripArgs = {
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
};

/**
 * Attributes allows defining set of data that are fetched in bulk along with the entity body.
 * Attributes may be used for fast filtering or can be used to sort along.
 *
 */
export type ProductBundlesAttributes = {
  __typename?: 'ProductBundlesAttributes';
  /** Return the minimum quantity of required product that needs to be purchased to make the bundle available. */
  minRequiredQuantity: Scalars['BigDecimal']['output'];
  /** Id of the required product that needs to be purchased to make the bundle available. */
  requiredProductId: Scalars['Int']['output'];
};


/**
 * Attributes allows defining set of data that are fetched in bulk along with the entity body.
 * Attributes may be used for fast filtering or can be used to sort along.
 *
 */
export type ProductBundlesAttributesMinRequiredQuantityArgs = {
  formatted?: InputMaybe<Scalars['Boolean']['input']>;
};

/** List of bonus bundles that can be obtained by purchasing this product. */
export type ProductBundlesReference = {
  __typename?: 'ProductBundlesReference';
  /**
   * Attributes allows defining set of data that are fetched in bulk along with the reference.
   * Attributes may be used for fast filtering or can be used to sort along.
   *
   */
  attributes?: Maybe<ProductBundlesAttributes>;
  /**
   * Returns body of the referenced entity in case its fetching was requested via entity_fetch constraint.
   *
   */
  referencedEntity?: Maybe<ProductBundle>;
  /**
   *          Returns primary key of the referenced (internal or external) entity.
   *
   */
  referencedPrimaryKey: Scalars['Int']['output'];
};

/**
 * Attributes allows defining set of data that are fetched in bulk along with the entity body.
 * Attributes may be used for fast filtering or can be used to sort along.
 *
 */
export type ProductCategoriesAttributes = {
  __typename?: 'ProductCategoriesAttributes';
  /**
   * Order of the entity among other products within the same category in the listing. Used for sorting entities
   * in ascending order.
   */
  orderInCategory: Scalars['Predecessor']['output'];
};

/**
 * This DTO contains information about single facet group and statistics of the facets that relates to it.
 *
 */
export type ProductCategoriesFacetGroupStatistics = {
  __typename?: 'ProductCategoriesFacetGroupStatistics';
  /**
   * Contains number of distinct entities in the response that possess any reference in this group.
   *
   */
  count: Scalars['Int']['output'];
  /**
   * Contains statistics of individual facets.
   *
   */
  facetStatistics: Array<ProductCategoriesFacetStatistics>;
};


/**
 * This DTO contains information about single facet group and statistics of the facets that relates to it.
 *
 */
export type ProductCategoriesFacetGroupStatisticsFacetStatisticsArgs = {
  filterBy?: InputMaybe<FilterContainerf812d9f8dc0269a4>;
  orderBy?: InputMaybe<Array<OrderContaineraff1014cee092cf7>>;
};

/**
 * This DTO contains information about single facet statistics of the entities that are present in the response.
 *
 */
export type ProductCategoriesFacetStatistics = {
  __typename?: 'ProductCategoriesFacetStatistics';
  /**
   * Contains number of distinct entities in the response that possess of this reference.
   *
   */
  count: Scalars['Int']['output'];
  /**
   * Contains referenced entity representing.
   *
   */
  facetEntity?: Maybe<Category>;
  /**
   * This field is not null only when this facet is not requested.
   * Contains projected impact on the current response if this facet is also requested in filtering constraints.
   *
   */
  impact?: Maybe<FacetRequestImpact>;
  /**
   * Contains TRUE if the facet was part of the query filtering constraints.
   *
   */
  requested: Scalars['Boolean']['output'];
};

/**
 * This DTO contains hierarchical structures of entities referenced by the entities required by the query. It copies
 * hierarchical structure of those entities and contains their identification or full body as well as information on
 * cardinality of referencing entities.
 *
 */
export type ProductCategoriesHierarchy = {
  __typename?: 'ProductCategoriesHierarchy';
  /**
   * Note: for multiple different children hierarchies, the use of field alias is encouraged here.
   *
   */
  children: Array<ProductCategoriesLevelInfo>;
  /**
   * Note: for multiple different hierarchies beginning from a node, the use of field alias is encouraged here.
   *
   */
  fromNode: Array<ProductCategoriesLevelInfo>;
  /**
   * Note: for multiple different hierarchies beginning from the root, the use of field alias is encouraged here.
   *
   */
  fromRoot: Array<ProductCategoriesLevelInfo>;
  /**
   * Note: for multiple different parents hierarchies, the use of field alias is encouraged here.
   *
   */
  parents: Array<ProductCategoriesLevelInfo>;
  /**
   * Note: for multiple different siblings hierarchies, the use of field alias is encouraged here.
   *
   */
  siblings: Array<ProductCategoriesLevelInfo>;
};


/**
 * This DTO contains hierarchical structures of entities referenced by the entities required by the query. It copies
 * hierarchical structure of those entities and contains their identification or full body as well as information on
 * cardinality of referencing entities.
 *
 */
export type ProductCategoriesHierarchyChildrenArgs = {
  statisticsBase?: InputMaybe<StatisticsBase>;
  stopAt?: InputMaybe<RequireContainer81b5b62bbb61f3c9>;
};


/**
 * This DTO contains hierarchical structures of entities referenced by the entities required by the query. It copies
 * hierarchical structure of those entities and contains their identification or full body as well as information on
 * cardinality of referencing entities.
 *
 */
export type ProductCategoriesHierarchyFromNodeArgs = {
  node: WrapperObject9516b67b2fd8a21d;
  statisticsBase?: InputMaybe<StatisticsBase>;
  stopAt?: InputMaybe<RequireContainer81b5b62bbb61f3c9>;
};


/**
 * This DTO contains hierarchical structures of entities referenced by the entities required by the query. It copies
 * hierarchical structure of those entities and contains their identification or full body as well as information on
 * cardinality of referencing entities.
 *
 */
export type ProductCategoriesHierarchyFromRootArgs = {
  statisticsBase?: InputMaybe<StatisticsBase>;
  stopAt?: InputMaybe<RequireContainer81b5b62bbb61f3c9>;
};


/**
 * This DTO contains hierarchical structures of entities referenced by the entities required by the query. It copies
 * hierarchical structure of those entities and contains their identification or full body as well as information on
 * cardinality of referencing entities.
 *
 */
export type ProductCategoriesHierarchyParentsArgs = {
  siblings?: InputMaybe<ProductCategoriesParentsSiblingsSpecification>;
  statisticsBase?: InputMaybe<StatisticsBase>;
  stopAt?: InputMaybe<RequireContainer81b5b62bbb61f3c9>;
};


/**
 * This DTO contains hierarchical structures of entities referenced by the entities required by the query. It copies
 * hierarchical structure of those entities and contains their identification or full body as well as information on
 * cardinality of referencing entities.
 *
 */
export type ProductCategoriesHierarchySiblingsArgs = {
  statisticsBase?: InputMaybe<StatisticsBase>;
  stopAt?: InputMaybe<RequireContainer81b5b62bbb61f3c9>;
};

/**
 * This DTO represents single hierarchical entity in the hierarchy tree. It contains identification of the entity,
 * the cardinality of queried entities that refer to it and information about children level.
 *
 */
export type ProductCategoriesLevelInfo = {
  __typename?: 'ProductCategoriesLevelInfo';
  /**
   * Contains number of hierarchical entities that are referring to this `entity` as its parent.
   * The count will respect behaviour settings and will not
   * count empty children in case `REMOVE_EMPTY` is
   * used for computation.
   *
   */
  childrenCount: Scalars['Int']['output'];
  /**
   * Hierarchical entity at position in tree represented by this object.
   *
   */
  entity: Category;
  /**
   * Level on which this node is placed from root. Root is always on level 1.
   *
   */
  level: Scalars['Int']['output'];
  /**
   * Contains the number of queried entities that refer directly to this {@link #entity} or to any of its children
   * entities.
   *
   */
  queriedEntityCount: Scalars['Int']['output'];
  /**
   * 			True in case the entity was filtered by `hierarchyWithin`.
   *
   */
  requested: Scalars['Boolean']['output'];
};

/**
 *             Specifies which siblings of parents will be returned and how.
 *
 */
export type ProductCategoriesParentsSiblingsSpecification = {
  /**
   * Defines node at which the hierarchy will stop expanding.
   *
   */
  stopAt?: InputMaybe<RequireContainer81b5b62bbb61f3c9>;
};

/**
 * Contains set of categories the product is assigned to. Typically, there is exactly one assignment, but
 * product can be assigned to multiple ones.
 */
export type ProductCategoriesReference = {
  __typename?: 'ProductCategoriesReference';
  /**
   * Attributes allows defining set of data that are fetched in bulk along with the reference.
   * Attributes may be used for fast filtering or can be used to sort along.
   *
   */
  attributes?: Maybe<ProductCategoriesAttributes>;
  /**
   * Returns body of the referenced entity in case its fetching was requested via entity_fetch constraint.
   *
   */
  referencedEntity?: Maybe<Category>;
  /**
   *          Returns primary key of the referenced (internal or external) entity.
   *
   */
  referencedPrimaryKey: Scalars['Int']['output'];
};

/**
 * Map of requested extra results besides actual found records.
 *
 */
export type ProductExtraResults = {
  __typename?: 'ProductExtraResults';
  /**
   * Returns computed histograms for specific attributes based on filter constraints.
   *
   * A histogram is an approximate representation of the distribution of numerical data. For detailed description please
   * see [WikiPedia](https://en.wikipedia.org/wiki/Histogram).
   * Histogram can be computed only for numeric based properties. It visualises which property values are more common
   * in the returned data set and which are rare. Bucket count will never exceed requested bucket count specified in
   * `requestedCount` but there
   * may be less of them if there is no enough data for computation. Bucket thresholds are specified heuristically so that
   * there are as few "empty buckets" as possible.
   *
   * - buckets are defined by their lower bounds (inclusive)
   * - the upper bound is the lower bound of the next bucket
   *
   */
  attributeHistogram?: Maybe<ProductAttributeHistogram>;
  attributeHistograms?: Maybe<Array<AttributeNamedHistogram>>;
  /**
   * Returns summary of all facets that match query filter excluding those inside `userFilter`.
   * Object contains information about facet groups and individual facets in them as well as appropriate statistics for them.
   *
   */
  facetSummary?: Maybe<ProductFacetSummary>;
  /**
   * Returns object containing hierarchical structure of entities referenced by the entities required by the query. It copies
   * hierarchical structure of those entities and contains their identification or full body as well as information on
   * cardinality of referencing entities.
   *
   */
  hierarchy?: Maybe<ProductHierarchy>;
  /**
   * Returns computed histogram for prices satisfactory to filter constraints.
   *
   * A histogram is an approximate representation of the distribution of numerical data. For detailed description please
   * see [WikiPedia](https://en.wikipedia.org/wiki/Histogram).
   * Histogram can be computed only for numeric based properties. It visualises which property values are more common
   * in the returned data set and which are rare. Bucket count will never exceed requested bucket count specified in
   * `requestedCount` but there
   * may be less of them if there is no enough data for computation. Bucket thresholds are specified heuristically so that
   * there are as few "empty buckets" as possible.
   *
   * - buckets are defined by their lower bounds (inclusive)
   * - the upper bound is the lower bound of the next bucket
   *
   */
  priceHistogram?: Maybe<Histogram>;
  /**
   * Returns object containing detailed information about query processing time and its decomposition to single operations.
   *
   */
  queryTelemetry: Scalars['Object']['output'];
};


/**
 * Map of requested extra results besides actual found records.
 *
 */
export type ProductExtraResultsAttributeHistogramsArgs = {
  attributes: Array<Scalars['String']['input']>;
};


/**
 * Map of requested extra results besides actual found records.
 *
 */
export type ProductExtraResultsQueryTelemetryArgs = {
  formatted?: InputMaybe<Scalars['Boolean']['input']>;
};

/**
 * This DTO allows returning summary of all facets that match query filter excluding those inside `userFilter`.
 * DTO contains information about facet groups and individual facets in them as well as appropriate statistics for them.
 *
 */
export type ProductFacetSummary = {
  __typename?: 'ProductFacetSummary';
  brand?: Maybe<ProductBrandFacetGroupStatistics>;
  categories?: Maybe<ProductCategoriesFacetGroupStatistics>;
  groups?: Maybe<ProductGroupsFacetGroupStatistics>;
  parameterValues?: Maybe<Array<ProductParameterValuesFacetGroupStatistics>>;
  stocks?: Maybe<Array<ProductStocksFacetGroupStatistics>>;
  tags?: Maybe<Array<ProductTagsFacetGroupStatistics>>;
  variantParameters?: Maybe<ProductVariantParametersFacetGroupStatistics>;
};


/**
 * This DTO allows returning summary of all facets that match query filter excluding those inside `userFilter`.
 * DTO contains information about facet groups and individual facets in them as well as appropriate statistics for them.
 *
 */
export type ProductFacetSummaryParameterValuesArgs = {
  filterGroupBy?: InputMaybe<FilterContainer9151b3bab054ab55>;
  orderGroupBy?: InputMaybe<Array<OrderContainer670a07c21adba5c9>>;
};


/**
 * This DTO allows returning summary of all facets that match query filter excluding those inside `userFilter`.
 * DTO contains information about facet groups and individual facets in them as well as appropriate statistics for them.
 *
 */
export type ProductFacetSummaryStocksArgs = {
  filterGroupBy?: InputMaybe<FilterContainerfb3c780d439a417c>;
  orderGroupBy?: InputMaybe<Array<OrderContainera4ea5eee8d85420a>>;
};


/**
 * This DTO allows returning summary of all facets that match query filter excluding those inside `userFilter`.
 * DTO contains information about facet groups and individual facets in them as well as appropriate statistics for them.
 *
 */
export type ProductFacetSummaryTagsArgs = {
  filterGroupBy?: InputMaybe<FilterContainer3a2a9890a875d4bd>;
  orderGroupBy?: InputMaybe<Array<OrderContainer2cb1816184dccd3f>>;
};

/**
 * Attributes allows defining set of data that are fetched in bulk along with the entity body.
 * Attributes may be used for fast filtering or can be used to sort along.
 *
 */
export type ProductGroupsAttributes = {
  __typename?: 'ProductGroupsAttributes';
  /**
   * Assignment validity contains a date-time period for which the product-category relation is considered to be
   * valid. Outside this period the product should not be visible in the group listing - it should behave like
   * this relation doesn't even exist.
   */
  assignmentValidity?: Maybe<Array<Scalars['DateTimeRange']['output']>>;
  /**
   * Order of the entity among other products within the same group in the listing. Used for sorting entities
   * in ascending order.
   */
  orderInGroup: Scalars['Predecessor']['output'];
};

/**
 * This DTO contains information about single facet group and statistics of the facets that relates to it.
 *
 */
export type ProductGroupsFacetGroupStatistics = {
  __typename?: 'ProductGroupsFacetGroupStatistics';
  /**
   * Contains number of distinct entities in the response that possess any reference in this group.
   *
   */
  count: Scalars['Int']['output'];
  /**
   * Contains statistics of individual facets.
   *
   */
  facetStatistics: Array<ProductGroupsFacetStatistics>;
};


/**
 * This DTO contains information about single facet group and statistics of the facets that relates to it.
 *
 */
export type ProductGroupsFacetGroupStatisticsFacetStatisticsArgs = {
  filterBy?: InputMaybe<FilterContainerc183dce568fe08c7>;
  orderBy?: InputMaybe<Array<OrderContainer21da021e14344cc3>>;
};

/**
 * This DTO contains information about single facet statistics of the entities that are present in the response.
 *
 */
export type ProductGroupsFacetStatistics = {
  __typename?: 'ProductGroupsFacetStatistics';
  /**
   * Contains number of distinct entities in the response that possess of this reference.
   *
   */
  count: Scalars['Int']['output'];
  /**
   * Contains referenced entity representing.
   *
   */
  facetEntity?: Maybe<Group>;
  /**
   * This field is not null only when this facet is not requested.
   * Contains projected impact on the current response if this facet is also requested in filtering constraints.
   *
   */
  impact?: Maybe<FacetRequestImpact>;
  /**
   * Contains TRUE if the facet was part of the query filtering constraints.
   *
   */
  requested: Scalars['Boolean']['output'];
};

/**
 * Contains set of groups the product is assigned to. Groups allow categorization of products outside
 * the shared category hierarchy.
 */
export type ProductGroupsReference = {
  __typename?: 'ProductGroupsReference';
  /**
   * Attributes allows defining set of data that are fetched in bulk along with the reference.
   * Attributes may be used for fast filtering or can be used to sort along.
   *
   */
  attributes?: Maybe<ProductGroupsAttributes>;
  /**
   * Returns body of the referenced entity in case its fetching was requested via entity_fetch constraint.
   *
   */
  referencedEntity?: Maybe<Group>;
  /**
   *          Returns primary key of the referenced (internal or external) entity.
   *
   */
  referencedPrimaryKey: Scalars['Int']['output'];
};

/**
 * This DTO contains hierarchical structures of self hierarchical as well as entities referenced by the entities
 * required by the query. It copies hierarchical structure of those entities and contains their identification
 * or full body as well as information on cardinality of referencing entities.
 *
 */
export type ProductHierarchy = {
  __typename?: 'ProductHierarchy';
  /**
   * Computes statistics for referenced entity collection `Category` as queried.
   *
   */
  categories: ProductCategoriesHierarchy;
};


/**
 * This DTO contains hierarchical structures of self hierarchical as well as entities referenced by the entities
 * required by the query. It copies hierarchical structure of those entities and contains their identification
 * or full body as well as information on cardinality of referencing entities.
 *
 */
export type ProductHierarchyCategoriesArgs = {
  emptyHierarchicalEntityBehaviour?: InputMaybe<EmptyHierarchicalEntityBehaviour>;
  orderBy?: InputMaybe<Array<OrderContaineraff1014cee092cf7>>;
};

/**
 * Contains all possible local mutations to perform on entity `Product`.
 *
 */
export type ProductLocalMutationAggregate = {
  /**
   * Increments or decrements existing numeric value by specified delta (negative number produces decremental of
   * existing number, positive one incrementation).
   *
   * Allows to specify the number range that is tolerated for the value after delta application has been finished to
   * verify for example that number of items on stock doesn't go below zero.
   *
   */
  applyDeltaAttributeMutation?: InputMaybe<ApplyDeltaAttributeMutation>;
  /**
   * This mutation allows to create a reference in the entity.
   *
   */
  insertReferenceMutation?: InputMaybe<InsertReferenceMutation>;
  /**
   * This mutation allows to create / update / remove attribute of the reference.
   *
   */
  referenceAttributeMutation?: InputMaybe<ReferenceAttributeMutation>;
  /**
   * Remove associated data mutation will drop existing associatedData - ie.generates new version of the associated data with tombstone
   * on it.
   *
   */
  removeAssociatedDataMutation?: InputMaybe<RemoveAssociatedDataMutation>;
  /**
   * Remove attribute mutation will drop existing attribute - ie.generates new version of the attribute with tombstone
   * on it.
   *
   */
  removeAttributeMutation?: InputMaybe<RemoveAttributeMutation>;
  /**
   * This mutation allows to remove existing `price` of the entity.
   *
   */
  removePriceMutation?: InputMaybe<RemovePriceMutation>;
  /**
   * This mutation allows to remove group in the reference.
   *
   */
  removeReferenceGroupMutation?: InputMaybe<RemoveReferenceGroupMutation>;
  /**
   * This mutation allows to remove a reference from the entity.
   *
   */
  removeReferenceMutation?: InputMaybe<RemoveReferenceMutation>;
  /**
   * This mutation allows to set / remove `priceInnerRecordHandling` behaviour of the entity.
   *
   */
  setPriceInnerRecordHandlingMutation?: InputMaybe<SetPriceInnerRecordHandlingMutation>;
  /**
   * This mutation allows to create / update group of the reference.
   *
   */
  setReferenceGroupMutation?: InputMaybe<SetReferenceGroupMutation>;
  /**
   * Upsert associatedData mutation will either update existing associatedData or create new one.
   *
   */
  upsertAssociatedDataMutation?: InputMaybe<UpsertAssociatedDataMutation>;
  /**
   * Upsert attribute mutation will either update existing attribute or create new one.
   *
   */
  upsertAttributeMutation?: InputMaybe<UpsertAttributeMutation>;
  /**
   * This mutation allows to create / update `price` of the entity.
   *
   */
  upsertPriceMutation?: InputMaybe<UpsertPriceMutation>;
};

/**
 * Contains reference to the master product. The reference is always NULL except for products of type VARIANT.
 * These products have always the reference to their master product. Master product is usually displayed
 * in listings instead of the variants to avoid cluttering the listing with similar products.
 */
export type ProductMasterReference = {
  __typename?: 'ProductMasterReference';
  /**
   * Returns body of the referenced entity in case its fetching was requested via entity_fetch constraint.
   *
   */
  referencedEntity?: Maybe<Product>;
  /**
   *          Returns primary key of the referenced (internal or external) entity.
   *
   */
  referencedPrimaryKey: Scalars['Int']['output'];
};

/**
 * Attributes allows defining set of data that are fetched in bulk along with the entity body.
 * Attributes may be used for fast filtering or can be used to sort along.
 *
 */
export type ProductParameterValuesAttributes = {
  __typename?: 'ProductParameterValuesAttributes';
  /**
   * Contains TRUE value if the parameter represents a variant parametr value.
   * Variant parameters are specific "properties" of the product that can be used for differentiating products
   * in a comprehensible way. An example of parameter value might be a specific size - XXL, or color - blue,
   * or packaging - paperback.
   * Single parameter value can be assigned to multiple products.
   */
  variant: Scalars['Boolean']['output'];
};

/**
 * This DTO contains information about single facet group and statistics of the facets that relates to it.
 *
 */
export type ProductParameterValuesFacetGroupStatistics = {
  __typename?: 'ProductParameterValuesFacetGroupStatistics';
  /**
   * Contains number of distinct entities in the response that possess any reference in this group.
   *
   */
  count: Scalars['Int']['output'];
  /**
   * Contains statistics of individual facets.
   *
   */
  facetStatistics: Array<ProductParameterValuesFacetStatistics>;
  /**
   * Contains referenced entity representing this group.
   *
   */
  groupEntity?: Maybe<Parameter>;
};


/**
 * This DTO contains information about single facet group and statistics of the facets that relates to it.
 *
 */
export type ProductParameterValuesFacetGroupStatisticsFacetStatisticsArgs = {
  filterBy?: InputMaybe<FilterContainer744027555f798cbb>;
  orderBy?: InputMaybe<Array<OrderContainer5f9032f190cf0a74>>;
};

/**
 * This DTO contains information about single facet statistics of the entities that are present in the response.
 *
 */
export type ProductParameterValuesFacetStatistics = {
  __typename?: 'ProductParameterValuesFacetStatistics';
  /**
   * Contains number of distinct entities in the response that possess of this reference.
   *
   */
  count: Scalars['Int']['output'];
  /**
   * Contains referenced entity representing.
   *
   */
  facetEntity?: Maybe<ParameterValue>;
  /**
   * This field is not null only when this facet is not requested.
   * Contains projected impact on the current response if this facet is also requested in filtering constraints.
   *
   */
  impact?: Maybe<FacetRequestImpact>;
  /**
   * Contains TRUE if the facet was part of the query filtering constraints.
   *
   */
  requested: Scalars['Boolean']['output'];
};

/**
 * Contains reference to all parameter values that has been assigned to the product.
 * Parameter value is a specific "property" of the product that can be used for differentiating products
 * in a comprehensible way. An example of parameter value might be a material - aluminium, plastic,
 * or ports - USB, HDMI or whatever you can think of.
 * Single parameter value can be assigned to multiple products.
 */
export type ProductParameterValuesReference = {
  __typename?: 'ProductParameterValuesReference';
  /**
   * Attributes allows defining set of data that are fetched in bulk along with the reference.
   * Attributes may be used for fast filtering or can be used to sort along.
   *
   */
  attributes?: Maybe<ProductParameterValuesAttributes>;
  /**
   * Returns body of the referenced entity in case its fetching was requested via entity_groupFetch constraint.
   *
   */
  groupEntity: Parameter;
  /**
   * Returns body of the referenced entity in case its fetching was requested via entity_fetch constraint.
   *
   */
  referencedEntity?: Maybe<ParameterValue>;
  /**
   *          Returns primary key of the referenced (internal or external) entity.
   *
   */
  referencedPrimaryKey: Scalars['Int']['output'];
};

/**
 * Attributes allows defining set of data that are fetched in bulk along with the entity body.
 * Attributes may be used for fast filtering or can be used to sort along.
 *
 */
export type ProductProductSetItemsAttributes = {
  __typename?: 'ProductProductSetItemsAttributes';
  /**
   * Order of the entity among other products within the same set product in the components listing. Used for
   * sorting entities in ascending order.
   */
  orderInSet: Scalars['Int']['output'];
  /** The quantity represents a quantity of this particular product in the product set. */
  quantityInSet: Scalars['BigDecimal']['output'];
};


/**
 * Attributes allows defining set of data that are fetched in bulk along with the entity body.
 * Attributes may be used for fast filtering or can be used to sort along.
 *
 */
export type ProductProductSetItemsAttributesQuantityInSetArgs = {
  formatted?: InputMaybe<Scalars['Boolean']['input']>;
};

/** Contains reference to all set products this product set consists of. */
export type ProductProductSetItemsReference = {
  __typename?: 'ProductProductSetItemsReference';
  /**
   * Attributes allows defining set of data that are fetched in bulk along with the reference.
   * Attributes may be used for fast filtering or can be used to sort along.
   *
   */
  attributes?: Maybe<ProductProductSetItemsAttributes>;
  /**
   * Returns body of the referenced entity in case its fetching was requested via entity_fetch constraint.
   *
   */
  referencedEntity?: Maybe<Product>;
  /**
   *          Returns primary key of the referenced (internal or external) entity.
   *
   */
  referencedPrimaryKey: Scalars['Int']['output'];
};

/**
 * Page of records according to pagination rules in input query.
 *
 */
export type ProductRecordPage = {
  __typename?: 'ProductRecordPage';
  /**
   * Actual found sorted page/strip of records.
   *
   */
  data: Array<Product>;
  /**
   * Returns true if there are no data available.
   *
   */
  empty: Scalars['Boolean']['output'];
  /**
   * Returns true if current page/strip is the first page/strip in the result set.
   *
   */
  first: Scalars['Boolean']['output'];
  /**
   * Returns offset of the first record of current page with current pageSize.
   *
   */
  firstPageItemNumber: Scalars['Int']['output'];
  /**
   * Returns true if there is next page/strip available.
   *
   */
  hasNext: Scalars['Boolean']['output'];
  /**
   * Returns true if there is previous page/strip available.
   *
   */
  hasPrevious: Scalars['Boolean']['output'];
  /**
   * Returns true if current page/strip is the last page/strip in the result set.
   *
   */
  last: Scalars['Boolean']['output'];
  /**
   * Returns offset of the last record of current page with current pageSize.
   *
   */
  lastPageItemNumber: Scalars['Int']['output'];
  /**
   * Returns number of the last page that can be accessed with current number of records.
   * Returns -1 when offset/limit was used for creating paginated list.
   *
   */
  lastPageNumber: Scalars['Int']['output'];
  /**
   * Returns current page number (indexed from 1).
   *
   */
  pageNumber: Scalars['Int']['output'];
  /**
   * Returns number of records per single page.
   *
   */
  pageSize: Scalars['Int']['output'];
  /**
   * Returns true if there is only single page/strip available (i.e. total record count < record count on one page).
   *
   */
  singlePage: Scalars['Boolean']['output'];
  /**
   * Returns total number of records that are possible to fetch by paginating entire result stream.
   *
   */
  totalRecordCount: Scalars['Int']['output'];
};

/**
 * Strip of records according to offset and limit rules in input query.
 *
 */
export type ProductRecordStrip = {
  __typename?: 'ProductRecordStrip';
  /**
   * Actual found sorted page/strip of records.
   *
   */
  data: Array<Product>;
  /**
   * Returns true if there are no data available.
   *
   */
  empty: Scalars['Boolean']['output'];
  /**
   * Returns true if current page/strip is the first page/strip in the result set.
   *
   */
  first: Scalars['Boolean']['output'];
  /**
   * Returns true if there is next page/strip available.
   *
   */
  hasNext: Scalars['Boolean']['output'];
  /**
   * Returns true if there is previous page/strip available.
   *
   */
  hasPrevious: Scalars['Boolean']['output'];
  /**
   * Returns true if current page/strip is the last page/strip in the result set.
   *
   */
  last: Scalars['Boolean']['output'];
  /**
   * Returns limit - i.e. maximal number of records that are requested after offset.
   *
   */
  limit: Scalars['Int']['output'];
  /**
   * Returns current offset (indexed from 0).
   *
   */
  offset: Scalars['Int']['output'];
  /**
   * Returns true if there is only single page/strip available (i.e. total record count < record count on one page).
   *
   */
  singlePage: Scalars['Boolean']['output'];
  /**
   * Returns total number of records that are possible to fetch by paginating entire result stream.
   *
   */
  totalRecordCount: Scalars['Int']['output'];
};

/**
 * Attributes allows defining set of data that are fetched in bulk along with the entity body.
 * Attributes may be used for fast filtering or can be used to sort along.
 *
 */
export type ProductRelatedProductsAttributes = {
  __typename?: 'ProductRelatedProductsAttributes';
  /**
   * Category describes the form of the relation between the related products. The common ones are `alternative
   * product` or `complementary product`.
   */
  category: Scalars['String']['output'];
  /**
   * Order of the entity among other variants within the same master product in the variant listing. Used for
   * sorting entities in ascending order.
   */
  orderInRelation: Scalars['Int']['output'];
};

/**
 * Contains set of product the product is related to. The type of the relation is further categorized by
 * `category` reference attribute. This reference allows interconnect products that are similar or
 * supplementary one to another.
 */
export type ProductRelatedProductsReference = {
  __typename?: 'ProductRelatedProductsReference';
  /**
   * Attributes allows defining set of data that are fetched in bulk along with the reference.
   * Attributes may be used for fast filtering or can be used to sort along.
   *
   */
  attributes?: Maybe<ProductRelatedProductsAttributes>;
  /**
   * Returns body of the referenced entity in case its fetching was requested via entity_fetch constraint.
   *
   */
  referencedEntity?: Maybe<Product>;
  /**
   *          Returns primary key of the referenced (internal or external) entity.
   *
   */
  referencedPrimaryKey: Scalars['Int']['output'];
};

/**
 * Evita response contains all results to single query. Results are divided to two parts - main results returned by
 * `recordPage`/`recordStrip` and set of extra results retrieved by `extraResults`.
 *
 */
export type ProductResponse = {
  __typename?: 'ProductResponse';
  /**
   * Returns map of requested extra results besides actual found records.
   *
   */
  extraResults: ProductExtraResults;
  /**
   * Returns page of records according to pagination rules in input query.
   * Either `page` or `strip` can be used, not both.
   *
   */
  recordPage?: Maybe<ProductRecordPage>;
  /**
   * Returns strip of records according to pagination rules in input query.
   * Either `page` or `strip` can be used, not both.
   *
   */
  recordStrip?: Maybe<ProductRecordStrip>;
};


/**
 * Evita response contains all results to single query. Results are divided to two parts - main results returned by
 * `recordPage`/`recordStrip` and set of extra results retrieved by `extraResults`.
 *
 */
export type ProductResponseRecordPageArgs = {
  number?: InputMaybe<Scalars['Int']['input']>;
  size?: InputMaybe<Scalars['Int']['input']>;
};


/**
 * Evita response contains all results to single query. Results are divided to two parts - main results returned by
 * `recordPage`/`recordStrip` and set of extra results retrieved by `extraResults`.
 *
 */
export type ProductResponseRecordStripArgs = {
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
};

/**
 * It contains references to all stocks for which the product is visible (because the visibility of the product depends on the stock quantity).
 * The product is then visible to the customer according to the stock they have access to.
 */
export type ProductStockVisibilitiesReference = {
  __typename?: 'ProductStockVisibilitiesReference';
  /**
   * Returns body of the referenced entity in case its fetching was requested via entity_groupFetch constraint.
   *
   */
  groupEntity: EntityReference;
  /**
   * Returns body of the referenced entity in case its fetching was requested via entity_fetch constraint.
   *
   */
  referencedEntity?: Maybe<Stock>;
  /**
   *          Returns primary key of the referenced (internal or external) entity.
   *
   */
  referencedPrimaryKey: Scalars['Int']['output'];
};

/**
 * Attributes allows defining set of data that are fetched in bulk along with the entity body.
 * Attributes may be used for fast filtering or can be used to sort along.
 *
 */
export type ProductStocksAttributes = {
  __typename?: 'ProductStocksAttributes';
  /** The quantity of the product in stock. The customer is then offered the quantity from the stock to which they have access. */
  quantityOnStock: Scalars['BigDecimal']['output'];
};


/**
 * Attributes allows defining set of data that are fetched in bulk along with the entity body.
 * Attributes may be used for fast filtering or can be used to sort along.
 *
 */
export type ProductStocksAttributesQuantityOnStockArgs = {
  formatted?: InputMaybe<Scalars['Boolean']['input']>;
};

/**
 * This DTO contains information about single facet group and statistics of the facets that relates to it.
 *
 */
export type ProductStocksFacetGroupStatistics = {
  __typename?: 'ProductStocksFacetGroupStatistics';
  /**
   * Contains number of distinct entities in the response that possess any reference in this group.
   *
   */
  count: Scalars['Int']['output'];
  /**
   * Contains statistics of individual facets.
   *
   */
  facetStatistics: Array<ProductStocksFacetStatistics>;
  /**
   * Contains referenced entity representing this group.
   *
   */
  groupEntity?: Maybe<EntityReference>;
};


/**
 * This DTO contains information about single facet group and statistics of the facets that relates to it.
 *
 */
export type ProductStocksFacetGroupStatisticsFacetStatisticsArgs = {
  filterBy?: InputMaybe<FilterContainer11895e8d40db8091>;
  orderBy?: InputMaybe<Array<OrderContainer441ef63c5ca7dd1c>>;
};

/**
 * This DTO contains information about single facet statistics of the entities that are present in the response.
 *
 */
export type ProductStocksFacetStatistics = {
  __typename?: 'ProductStocksFacetStatistics';
  /**
   * Contains number of distinct entities in the response that possess of this reference.
   *
   */
  count: Scalars['Int']['output'];
  /**
   * Contains referenced entity representing.
   *
   */
  facetEntity?: Maybe<Stock>;
  /**
   * This field is not null only when this facet is not requested.
   * Contains projected impact on the current response if this facet is also requested in filtering constraints.
   *
   */
  impact?: Maybe<FacetRequestImpact>;
  /**
   * Contains TRUE if the facet was part of the query filtering constraints.
   *
   */
  requested: Scalars['Boolean']['output'];
};

/** Contains reference to all stocks/warehouse the product is being kept on (or was kept and was depleted). */
export type ProductStocksReference = {
  __typename?: 'ProductStocksReference';
  /**
   * Attributes allows defining set of data that are fetched in bulk along with the reference.
   * Attributes may be used for fast filtering or can be used to sort along.
   *
   */
  attributes?: Maybe<ProductStocksAttributes>;
  /**
   * Returns body of the referenced entity in case its fetching was requested via entity_groupFetch constraint.
   *
   */
  groupEntity: EntityReference;
  /**
   * Returns body of the referenced entity in case its fetching was requested via entity_fetch constraint.
   *
   */
  referencedEntity?: Maybe<Stock>;
  /**
   *          Returns primary key of the referenced (internal or external) entity.
   *
   */
  referencedPrimaryKey: Scalars['Int']['output'];
};

/**
 * This DTO contains information about single facet group and statistics of the facets that relates to it.
 *
 */
export type ProductTagsFacetGroupStatistics = {
  __typename?: 'ProductTagsFacetGroupStatistics';
  /**
   * Contains number of distinct entities in the response that possess any reference in this group.
   *
   */
  count: Scalars['Int']['output'];
  /**
   * Contains statistics of individual facets.
   *
   */
  facetStatistics: Array<ProductTagsFacetStatistics>;
  /**
   * Contains referenced entity representing this group.
   *
   */
  groupEntity?: Maybe<EntityReference>;
};


/**
 * This DTO contains information about single facet group and statistics of the facets that relates to it.
 *
 */
export type ProductTagsFacetGroupStatisticsFacetStatisticsArgs = {
  filterBy?: InputMaybe<FilterContainer967c71ead6465215>;
  orderBy?: InputMaybe<Array<OrderContainer60ec14e01e238dfe>>;
};

/**
 * This DTO contains information about single facet statistics of the entities that are present in the response.
 *
 */
export type ProductTagsFacetStatistics = {
  __typename?: 'ProductTagsFacetStatistics';
  /**
   * Contains number of distinct entities in the response that possess of this reference.
   *
   */
  count: Scalars['Int']['output'];
  /**
   * Contains referenced entity representing.
   *
   */
  facetEntity?: Maybe<Tag>;
  /**
   * This field is not null only when this facet is not requested.
   * Contains projected impact on the current response if this facet is also requested in filtering constraints.
   *
   */
  impact?: Maybe<FacetRequestImpact>;
  /**
   * Contains TRUE if the facet was part of the query filtering constraints.
   *
   */
  requested: Scalars['Boolean']['output'];
};

/**
 * Tags allow non-systematic categorization (cross-structure tagging) of the entities. Tags are often more
 * digestible from the user's point of view. Tags are maintained in Edee.ONE CMS and here we just link them.
 */
export type ProductTagsReference = {
  __typename?: 'ProductTagsReference';
  /**
   * Returns body of the referenced entity in case its fetching was requested via entity_groupFetch constraint.
   *
   */
  groupEntity: EntityReference;
  /**
   * Returns body of the referenced entity in case its fetching was requested via entity_fetch constraint.
   *
   */
  referencedEntity?: Maybe<Tag>;
  /**
   *          Returns primary key of the referenced (internal or external) entity.
   *
   */
  referencedPrimaryKey: Scalars['Int']['output'];
};

/**
 * Attributes allows defining set of data that are fetched in bulk along with the entity body.
 * Attributes may be used for fast filtering or can be used to sort along.
 *
 */
export type ProductVariantParametersAttributes = {
  __typename?: 'ProductVariantParametersAttributes';
  /**
   * Order of the entity among other parameter within the same master product in the listing. Used for sorting
   * parameters in ascending order.
   */
  orderInMaster: Scalars['Int']['output'];
};

/**
 * This DTO contains information about single facet group and statistics of the facets that relates to it.
 *
 */
export type ProductVariantParametersFacetGroupStatistics = {
  __typename?: 'ProductVariantParametersFacetGroupStatistics';
  /**
   * Contains number of distinct entities in the response that possess any reference in this group.
   *
   */
  count: Scalars['Int']['output'];
  /**
   * Contains statistics of individual facets.
   *
   */
  facetStatistics: Array<ProductVariantParametersFacetStatistics>;
};


/**
 * This DTO contains information about single facet group and statistics of the facets that relates to it.
 *
 */
export type ProductVariantParametersFacetGroupStatisticsFacetStatisticsArgs = {
  filterBy?: InputMaybe<FilterContainer9151b3bab054ab55>;
  orderBy?: InputMaybe<Array<OrderContainer670a07c21adba5c9>>;
};

/**
 * This DTO contains information about single facet statistics of the entities that are present in the response.
 *
 */
export type ProductVariantParametersFacetStatistics = {
  __typename?: 'ProductVariantParametersFacetStatistics';
  /**
   * Contains number of distinct entities in the response that possess of this reference.
   *
   */
  count: Scalars['Int']['output'];
  /**
   * Contains referenced entity representing.
   *
   */
  facetEntity?: Maybe<Parameter>;
  /**
   * This field is not null only when this facet is not requested.
   * Contains projected impact on the current response if this facet is also requested in filtering constraints.
   *
   */
  impact?: Maybe<FacetRequestImpact>;
  /**
   * Contains TRUE if the facet was part of the query filtering constraints.
   *
   */
  requested: Scalars['Boolean']['output'];
};

/**
 * Property is present only in products of MASTER subtype - e.g. master products.
 * Contains list of all parameters that distinguish variants of this particular master product.
 */
export type ProductVariantParametersReference = {
  __typename?: 'ProductVariantParametersReference';
  /**
   * Attributes allows defining set of data that are fetched in bulk along with the reference.
   * Attributes may be used for fast filtering or can be used to sort along.
   *
   */
  attributes?: Maybe<ProductVariantParametersAttributes>;
  /**
   * Returns body of the referenced entity in case its fetching was requested via entity_fetch constraint.
   *
   */
  referencedEntity?: Maybe<Parameter>;
  /**
   *          Returns primary key of the referenced (internal or external) entity.
   *
   */
  referencedPrimaryKey: Scalars['Int']['output'];
};

export type Query = {
  __typename?: 'Query';
  /**
   * Returns all present collection entity types in this catalog.
   *
   */
  collections: Array<Scalars['String']['output']>;
  /**
   * Returns number of all entities stored in `%s` collection.
   *
   */
  countAdjustedPricePolicy: Scalars['Int']['output'];
  /**
   * Returns number of all entities stored in `%s` collection.
   *
   */
  countBrand: Scalars['Int']['output'];
  /**
   * Returns number of all entities stored in `%s` collection.
   *
   */
  countCategory: Scalars['Int']['output'];
  /**
   * Returns number of all entities stored in `%s` collection.
   *
   */
  countGroup: Scalars['Int']['output'];
  /**
   * Returns number of all entities stored in `%s` collection.
   *
   */
  countObsoleteProduct: Scalars['Int']['output'];
  /**
   * Returns number of all entities stored in `%s` collection.
   *
   */
  countParameter: Scalars['Int']['output'];
  /**
   * Returns number of all entities stored in `%s` collection.
   *
   */
  countParameterGroup: Scalars['Int']['output'];
  /**
   * Returns number of all entities stored in `%s` collection.
   *
   */
  countParameterValue: Scalars['Int']['output'];
  /**
   * Returns number of all entities stored in `%s` collection.
   *
   */
  countPaymentMethod: Scalars['Int']['output'];
  /**
   * Returns number of all entities stored in `%s` collection.
   *
   */
  countPickupPoint: Scalars['Int']['output'];
  /**
   * Returns number of all entities stored in `%s` collection.
   *
   */
  countPriceList: Scalars['Int']['output'];
  /**
   * Returns number of all entities stored in `%s` collection.
   *
   */
  countProduct: Scalars['Int']['output'];
  /**
   * Returns number of all entities stored in `%s` collection.
   *
   */
  countProductBundle: Scalars['Int']['output'];
  /**
   * Returns number of all entities stored in `%s` collection.
   *
   */
  countShippingMethod: Scalars['Int']['output'];
  /**
   * Returns number of all entities stored in `%s` collection.
   *
   */
  countStock: Scalars['Int']['output'];
  /**
   * Returns number of all entities stored in `%s` collection.
   *
   */
  countTag: Scalars['Int']['output'];
  /**
   * Finds and returns single entity from `io.evitadb.api.requestResponse.schema.EntitySchemaDecorator@208e9ef6` collection by simplified collection-specific arguments.
   *
   */
  getAdjustedPricePolicy?: Maybe<AdjustedPricePolicy>;
  /**
   * Finds and returns single entity from `io.evitadb.api.requestResponse.schema.EntitySchemaDecorator@778ca8ef` collection by simplified collection-specific arguments.
   *
   */
  getBrand?: Maybe<Brand>;
  /**
   * Finds and returns single entity from `io.evitadb.api.requestResponse.schema.EntitySchemaDecorator@1358b28e` collection by simplified collection-specific arguments.
   *
   */
  getCategory?: Maybe<Category>;
  /**
   * Finds and returns single entity from unspecified collection by shared arguments between collections.
   *
   */
  getEntity?: Maybe<GlobalEntity>;
  /**
   * Finds and returns single entity from `io.evitadb.api.requestResponse.schema.EntitySchemaDecorator@19f21b6b` collection by simplified collection-specific arguments.
   *
   */
  getGroup?: Maybe<Group>;
  /**
   * Finds and returns single entity from `io.evitadb.api.requestResponse.schema.EntitySchemaDecorator@46044faa` collection by simplified collection-specific arguments.
   *
   */
  getObsoleteProduct?: Maybe<ObsoleteProduct>;
  /**
   * Finds and returns single entity from `io.evitadb.api.requestResponse.schema.EntitySchemaDecorator@261d8190` collection by simplified collection-specific arguments.
   *
   */
  getParameter?: Maybe<Parameter>;
  /**
   * Finds and returns single entity from `io.evitadb.api.requestResponse.schema.EntitySchemaDecorator@78b236a0` collection by simplified collection-specific arguments.
   *
   */
  getParameterGroup?: Maybe<ParameterGroup>;
  /**
   * Finds and returns single entity from `io.evitadb.api.requestResponse.schema.EntitySchemaDecorator@1a78dacd` collection by simplified collection-specific arguments.
   *
   */
  getParameterValue?: Maybe<ParameterValue>;
  /**
   * Finds and returns single entity from `io.evitadb.api.requestResponse.schema.EntitySchemaDecorator@34448e6c` collection by simplified collection-specific arguments.
   *
   */
  getPaymentMethod?: Maybe<PaymentMethod>;
  /**
   * Finds and returns single entity from `io.evitadb.api.requestResponse.schema.EntitySchemaDecorator@2bfeb1ef` collection by simplified collection-specific arguments.
   *
   */
  getPickupPoint?: Maybe<PickupPoint>;
  /**
   * Finds and returns single entity from `io.evitadb.api.requestResponse.schema.EntitySchemaDecorator@907f2b7` collection by simplified collection-specific arguments.
   *
   */
  getPriceList?: Maybe<PriceList>;
  /**
   * Finds and returns single entity from `io.evitadb.api.requestResponse.schema.EntitySchemaDecorator@7de4a01f` collection by simplified collection-specific arguments.
   *
   */
  getProduct?: Maybe<Product>;
  /**
   * Finds and returns single entity from `io.evitadb.api.requestResponse.schema.EntitySchemaDecorator@19f9d595` collection by simplified collection-specific arguments.
   *
   */
  getProductBundle?: Maybe<ProductBundle>;
  /**
   * Finds and returns single entity from `io.evitadb.api.requestResponse.schema.EntitySchemaDecorator@1532c619` collection by simplified collection-specific arguments.
   *
   */
  getShippingMethod?: Maybe<ShippingMethod>;
  /**
   * Finds and returns single entity from `io.evitadb.api.requestResponse.schema.EntitySchemaDecorator@7dc51783` collection by simplified collection-specific arguments.
   *
   */
  getStock?: Maybe<Stock>;
  /**
   * Finds and returns single entity from `io.evitadb.api.requestResponse.schema.EntitySchemaDecorator@60e9df3c` collection by simplified collection-specific arguments.
   *
   */
  getTag?: Maybe<Tag>;
  /**
   * Finds and returns list of entities from `io.evitadb.api.requestResponse.schema.EntitySchemaDecorator@208e9ef6` collection by complex query.
   *
   */
  listAdjustedPricePolicy: Array<AdjustedPricePolicy>;
  /**
   * Finds and returns list of entities from `io.evitadb.api.requestResponse.schema.EntitySchemaDecorator@778ca8ef` collection by complex query.
   *
   */
  listBrand: Array<Brand>;
  /**
   * Finds and returns list of entities from `io.evitadb.api.requestResponse.schema.EntitySchemaDecorator@1358b28e` collection by complex query.
   *
   */
  listCategory: Array<Category>;
  /**
   * Finds and returns list of entities from unspecified collections by shared arguments between collections.
   *
   */
  listEntity: Array<GlobalEntity>;
  /**
   * Finds and returns list of entities from `io.evitadb.api.requestResponse.schema.EntitySchemaDecorator@19f21b6b` collection by complex query.
   *
   */
  listGroup: Array<Group>;
  /**
   * Finds and returns list of entities from `io.evitadb.api.requestResponse.schema.EntitySchemaDecorator@46044faa` collection by complex query.
   *
   */
  listObsoleteProduct: Array<ObsoleteProduct>;
  /**
   * Finds and returns list of entities from `io.evitadb.api.requestResponse.schema.EntitySchemaDecorator@261d8190` collection by complex query.
   *
   */
  listParameter: Array<Parameter>;
  /**
   * Finds and returns list of entities from `io.evitadb.api.requestResponse.schema.EntitySchemaDecorator@78b236a0` collection by complex query.
   *
   */
  listParameterGroup: Array<ParameterGroup>;
  /**
   * Finds and returns list of entities from `io.evitadb.api.requestResponse.schema.EntitySchemaDecorator@1a78dacd` collection by complex query.
   *
   */
  listParameterValue: Array<ParameterValue>;
  /**
   * Finds and returns list of entities from `io.evitadb.api.requestResponse.schema.EntitySchemaDecorator@34448e6c` collection by complex query.
   *
   */
  listPaymentMethod: Array<PaymentMethod>;
  /**
   * Finds and returns list of entities from `io.evitadb.api.requestResponse.schema.EntitySchemaDecorator@2bfeb1ef` collection by complex query.
   *
   */
  listPickupPoint: Array<PickupPoint>;
  /**
   * Finds and returns list of entities from `io.evitadb.api.requestResponse.schema.EntitySchemaDecorator@907f2b7` collection by complex query.
   *
   */
  listPriceList: Array<PriceList>;
  /**
   * Finds and returns list of entities from `io.evitadb.api.requestResponse.schema.EntitySchemaDecorator@7de4a01f` collection by complex query.
   *
   */
  listProduct: Array<Product>;
  /**
   * Finds and returns list of entities from `io.evitadb.api.requestResponse.schema.EntitySchemaDecorator@19f9d595` collection by complex query.
   *
   */
  listProductBundle: Array<ProductBundle>;
  /**
   * Finds and returns list of entities from `io.evitadb.api.requestResponse.schema.EntitySchemaDecorator@1532c619` collection by complex query.
   *
   */
  listShippingMethod: Array<ShippingMethod>;
  /**
   * Finds and returns list of entities from `io.evitadb.api.requestResponse.schema.EntitySchemaDecorator@7dc51783` collection by complex query.
   *
   */
  listStock: Array<Stock>;
  /**
   * Finds and returns list of entities from `io.evitadb.api.requestResponse.schema.EntitySchemaDecorator@60e9df3c` collection by complex query.
   *
   */
  listTag: Array<Tag>;
  /**
   * Finds and returns entities and extra results from `io.evitadb.api.requestResponse.schema.EntitySchemaDecorator@208e9ef6` collection by complex query.
   *
   */
  queryAdjustedPricePolicy: AdjustedPricePolicyResponse;
  /**
   * Finds and returns entities and extra results from `io.evitadb.api.requestResponse.schema.EntitySchemaDecorator@778ca8ef` collection by complex query.
   *
   */
  queryBrand: BrandResponse;
  /**
   * Finds and returns entities and extra results from `io.evitadb.api.requestResponse.schema.EntitySchemaDecorator@1358b28e` collection by complex query.
   *
   */
  queryCategory: CategoryResponse;
  /**
   * Finds and returns entities and extra results from `io.evitadb.api.requestResponse.schema.EntitySchemaDecorator@19f21b6b` collection by complex query.
   *
   */
  queryGroup: GroupResponse;
  /**
   * Finds and returns entities and extra results from `io.evitadb.api.requestResponse.schema.EntitySchemaDecorator@46044faa` collection by complex query.
   *
   */
  queryObsoleteProduct: ObsoleteProductResponse;
  /**
   * Finds and returns entities and extra results from `io.evitadb.api.requestResponse.schema.EntitySchemaDecorator@261d8190` collection by complex query.
   *
   */
  queryParameter: ParameterResponse;
  /**
   * Finds and returns entities and extra results from `io.evitadb.api.requestResponse.schema.EntitySchemaDecorator@78b236a0` collection by complex query.
   *
   */
  queryParameterGroup: ParameterGroupResponse;
  /**
   * Finds and returns entities and extra results from `io.evitadb.api.requestResponse.schema.EntitySchemaDecorator@1a78dacd` collection by complex query.
   *
   */
  queryParameterValue: ParameterValueResponse;
  /**
   * Finds and returns entities and extra results from `io.evitadb.api.requestResponse.schema.EntitySchemaDecorator@34448e6c` collection by complex query.
   *
   */
  queryPaymentMethod: PaymentMethodResponse;
  /**
   * Finds and returns entities and extra results from `io.evitadb.api.requestResponse.schema.EntitySchemaDecorator@2bfeb1ef` collection by complex query.
   *
   */
  queryPickupPoint: PickupPointResponse;
  /**
   * Finds and returns entities and extra results from `io.evitadb.api.requestResponse.schema.EntitySchemaDecorator@907f2b7` collection by complex query.
   *
   */
  queryPriceList: PriceListResponse;
  /**
   * Finds and returns entities and extra results from `io.evitadb.api.requestResponse.schema.EntitySchemaDecorator@7de4a01f` collection by complex query.
   *
   */
  queryProduct: ProductResponse;
  /**
   * Finds and returns entities and extra results from `io.evitadb.api.requestResponse.schema.EntitySchemaDecorator@19f9d595` collection by complex query.
   *
   */
  queryProductBundle: ProductBundleResponse;
  /**
   * Finds and returns entities and extra results from `io.evitadb.api.requestResponse.schema.EntitySchemaDecorator@1532c619` collection by complex query.
   *
   */
  queryShippingMethod: ShippingMethodResponse;
  /**
   * Finds and returns entities and extra results from `io.evitadb.api.requestResponse.schema.EntitySchemaDecorator@7dc51783` collection by complex query.
   *
   */
  queryStock: StockResponse;
  /**
   * Finds and returns entities and extra results from `io.evitadb.api.requestResponse.schema.EntitySchemaDecorator@60e9df3c` collection by complex query.
   *
   */
  queryTag: TagResponse;
};


export type QueryGetAdjustedPricePolicyArgs = {
  code?: InputMaybe<Scalars['String']['input']>;
  locale?: InputMaybe<CatalogLocale>;
  primaryKey?: InputMaybe<Scalars['Int']['input']>;
  url?: InputMaybe<Scalars['String']['input']>;
  urlInactive?: InputMaybe<Scalars['String']['input']>;
};


export type QueryGetBrandArgs = {
  code?: InputMaybe<Scalars['String']['input']>;
  locale?: InputMaybe<CatalogLocale>;
  primaryKey?: InputMaybe<Scalars['Int']['input']>;
  url?: InputMaybe<Scalars['String']['input']>;
  urlInactive?: InputMaybe<Scalars['String']['input']>;
};


export type QueryGetCategoryArgs = {
  code?: InputMaybe<Scalars['String']['input']>;
  locale?: InputMaybe<CatalogLocale>;
  primaryKey?: InputMaybe<Scalars['Int']['input']>;
  url?: InputMaybe<Scalars['String']['input']>;
  urlInactive?: InputMaybe<Scalars['String']['input']>;
};


export type QueryGetEntityArgs = {
  join?: InputMaybe<QueryHeaderArgumentsJoinType>;
  locale?: InputMaybe<CatalogLocale>;
  url?: InputMaybe<Scalars['String']['input']>;
  urlInactive?: InputMaybe<Scalars['String']['input']>;
};


export type QueryGetGroupArgs = {
  code?: InputMaybe<Scalars['String']['input']>;
  locale?: InputMaybe<CatalogLocale>;
  primaryKey?: InputMaybe<Scalars['Int']['input']>;
  url?: InputMaybe<Scalars['String']['input']>;
  urlInactive?: InputMaybe<Scalars['String']['input']>;
};


export type QueryGetObsoleteProductArgs = {
  code?: InputMaybe<Scalars['String']['input']>;
  codeShort?: InputMaybe<Scalars['String']['input']>;
  locale?: InputMaybe<CatalogLocale>;
  priceInCurrency?: InputMaybe<CatalogCurrency>;
  priceInPriceLists?: InputMaybe<Array<Scalars['String']['input']>>;
  priceValidIn?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  priceValidInNow?: InputMaybe<Scalars['Boolean']['input']>;
  primaryKey?: InputMaybe<Scalars['Int']['input']>;
  url?: InputMaybe<Scalars['String']['input']>;
  urlInactive?: InputMaybe<Scalars['String']['input']>;
};


export type QueryGetParameterArgs = {
  code?: InputMaybe<Scalars['String']['input']>;
  locale?: InputMaybe<CatalogLocale>;
  primaryKey?: InputMaybe<Scalars['Int']['input']>;
  url?: InputMaybe<Scalars['String']['input']>;
  urlInactive?: InputMaybe<Scalars['String']['input']>;
};


export type QueryGetParameterGroupArgs = {
  code?: InputMaybe<Scalars['String']['input']>;
  locale?: InputMaybe<CatalogLocale>;
  primaryKey?: InputMaybe<Scalars['Int']['input']>;
  url?: InputMaybe<Scalars['String']['input']>;
  urlInactive?: InputMaybe<Scalars['String']['input']>;
};


export type QueryGetParameterValueArgs = {
  code?: InputMaybe<Scalars['String']['input']>;
  locale?: InputMaybe<CatalogLocale>;
  primaryKey?: InputMaybe<Scalars['Int']['input']>;
  url?: InputMaybe<Scalars['String']['input']>;
  urlInactive?: InputMaybe<Scalars['String']['input']>;
};


export type QueryGetPaymentMethodArgs = {
  code?: InputMaybe<Scalars['String']['input']>;
  locale?: InputMaybe<CatalogLocale>;
  priceInCurrency?: InputMaybe<CatalogCurrency>;
  priceInPriceLists?: InputMaybe<Array<Scalars['String']['input']>>;
  priceValidIn?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  priceValidInNow?: InputMaybe<Scalars['Boolean']['input']>;
  primaryKey?: InputMaybe<Scalars['Int']['input']>;
  url?: InputMaybe<Scalars['String']['input']>;
  urlInactive?: InputMaybe<Scalars['String']['input']>;
};


export type QueryGetPickupPointArgs = {
  code?: InputMaybe<Scalars['String']['input']>;
  locale?: InputMaybe<CatalogLocale>;
  primaryKey?: InputMaybe<Scalars['Int']['input']>;
  url?: InputMaybe<Scalars['String']['input']>;
  urlInactive?: InputMaybe<Scalars['String']['input']>;
};


export type QueryGetPriceListArgs = {
  code?: InputMaybe<Scalars['String']['input']>;
  locale?: InputMaybe<CatalogLocale>;
  primaryKey?: InputMaybe<Scalars['Int']['input']>;
  url?: InputMaybe<Scalars['String']['input']>;
  urlInactive?: InputMaybe<Scalars['String']['input']>;
};


export type QueryGetProductArgs = {
  code?: InputMaybe<Scalars['String']['input']>;
  codeShort?: InputMaybe<Scalars['String']['input']>;
  locale?: InputMaybe<CatalogLocale>;
  priceInCurrency?: InputMaybe<CatalogCurrency>;
  priceInPriceLists?: InputMaybe<Array<Scalars['String']['input']>>;
  priceValidIn?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  priceValidInNow?: InputMaybe<Scalars['Boolean']['input']>;
  primaryKey?: InputMaybe<Scalars['Int']['input']>;
  url?: InputMaybe<Scalars['String']['input']>;
  urlInactive?: InputMaybe<Scalars['String']['input']>;
};


export type QueryGetProductBundleArgs = {
  code?: InputMaybe<Scalars['String']['input']>;
  locale?: InputMaybe<CatalogLocale>;
  primaryKey?: InputMaybe<Scalars['Int']['input']>;
  url?: InputMaybe<Scalars['String']['input']>;
  urlInactive?: InputMaybe<Scalars['String']['input']>;
};


export type QueryGetShippingMethodArgs = {
  code?: InputMaybe<Scalars['String']['input']>;
  locale?: InputMaybe<CatalogLocale>;
  priceInCurrency?: InputMaybe<CatalogCurrency>;
  priceInPriceLists?: InputMaybe<Array<Scalars['String']['input']>>;
  priceValidIn?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  priceValidInNow?: InputMaybe<Scalars['Boolean']['input']>;
  primaryKey?: InputMaybe<Scalars['Int']['input']>;
  url?: InputMaybe<Scalars['String']['input']>;
  urlInactive?: InputMaybe<Scalars['String']['input']>;
};


export type QueryGetStockArgs = {
  code?: InputMaybe<Scalars['String']['input']>;
  locale?: InputMaybe<CatalogLocale>;
  primaryKey?: InputMaybe<Scalars['Int']['input']>;
  url?: InputMaybe<Scalars['String']['input']>;
  urlInactive?: InputMaybe<Scalars['String']['input']>;
};


export type QueryGetTagArgs = {
  code?: InputMaybe<Scalars['String']['input']>;
  locale?: InputMaybe<CatalogLocale>;
  primaryKey?: InputMaybe<Scalars['Int']['input']>;
};


export type QueryListAdjustedPricePolicyArgs = {
  filterBy?: InputMaybe<FilterContainer8b8d18989520db5b>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<OrderContainer638ffac3513b5308>>;
};


export type QueryListBrandArgs = {
  filterBy?: InputMaybe<FilterContainer517d1d8ea5c4e742>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<OrderContainer18970ca942385a0b>>;
};


export type QueryListCategoryArgs = {
  filterBy?: InputMaybe<FilterContainerf812d9f8dc0269a4>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<OrderContaineraff1014cee092cf7>>;
};


export type QueryListEntityArgs = {
  join?: InputMaybe<QueryHeaderArgumentsJoinType>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  locale?: InputMaybe<CatalogLocale>;
  url?: InputMaybe<Array<Scalars['String']['input']>>;
  urlInactive?: InputMaybe<Array<Scalars['String']['input']>>;
};


export type QueryListGroupArgs = {
  filterBy?: InputMaybe<FilterContainerc183dce568fe08c7>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<OrderContainer21da021e14344cc3>>;
};


export type QueryListObsoleteProductArgs = {
  filterBy?: InputMaybe<FilterContainerfc37342b44def3ac>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<OrderContainer8818faf0a11a5fa2>>;
};


export type QueryListParameterArgs = {
  filterBy?: InputMaybe<FilterContainer9151b3bab054ab55>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<OrderContainer670a07c21adba5c9>>;
};


export type QueryListParameterGroupArgs = {
  filterBy?: InputMaybe<FilterContainer1e4225e8e77021d7>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<OrderContainerd7735c5c37d5547c>>;
};


export type QueryListParameterValueArgs = {
  filterBy?: InputMaybe<FilterContainer744027555f798cbb>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<OrderContainer5f9032f190cf0a74>>;
};


export type QueryListPaymentMethodArgs = {
  filterBy?: InputMaybe<FilterContainer3ff4be886c39a0e>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<OrderContainerd961bc3fab551bb0>>;
};


export type QueryListPickupPointArgs = {
  filterBy?: InputMaybe<FilterContainerd1ed0dd289b39bb5>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<OrderContainerdfe938cf264d6dc0>>;
};


export type QueryListPriceListArgs = {
  filterBy?: InputMaybe<FilterContainerb29777b6620f8b8d>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<OrderContainerb836a731b242bb0>>;
};


export type QueryListProductArgs = {
  filterBy?: InputMaybe<FilterContainer585fda0640662fe0>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<OrderContainer90fb661fce37688>>;
};


export type QueryListProductBundleArgs = {
  filterBy?: InputMaybe<FilterContainer150edb03f6a8549a>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<OrderContainerc1398334fa8f22a>>;
};


export type QueryListShippingMethodArgs = {
  filterBy?: InputMaybe<FilterContainer21f42768fb89b5d4>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<OrderContainere47e56ee5b3ec965>>;
};


export type QueryListStockArgs = {
  filterBy?: InputMaybe<FilterContainer11895e8d40db8091>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<OrderContainer441ef63c5ca7dd1c>>;
};


export type QueryListTagArgs = {
  filterBy?: InputMaybe<FilterContainer967c71ead6465215>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<OrderContainer60ec14e01e238dfe>>;
};


export type QueryQueryAdjustedPricePolicyArgs = {
  filterBy?: InputMaybe<FilterContainer8b8d18989520db5b>;
  orderBy?: InputMaybe<Array<OrderContainer638ffac3513b5308>>;
};


export type QueryQueryBrandArgs = {
  filterBy?: InputMaybe<FilterContainer517d1d8ea5c4e742>;
  orderBy?: InputMaybe<Array<OrderContainer18970ca942385a0b>>;
  require?: InputMaybe<RequireContainer7c982456806d0b6d>;
};


export type QueryQueryCategoryArgs = {
  filterBy?: InputMaybe<FilterContainerf812d9f8dc0269a4>;
  orderBy?: InputMaybe<Array<OrderContaineraff1014cee092cf7>>;
  require?: InputMaybe<RequireContainerbf49f780863ded83>;
};


export type QueryQueryGroupArgs = {
  filterBy?: InputMaybe<FilterContainerc183dce568fe08c7>;
  orderBy?: InputMaybe<Array<OrderContainer21da021e14344cc3>>;
  require?: InputMaybe<RequireContainer3d01e9d5a01f427c>;
};


export type QueryQueryObsoleteProductArgs = {
  filterBy?: InputMaybe<FilterContainerfc37342b44def3ac>;
  orderBy?: InputMaybe<Array<OrderContainer8818faf0a11a5fa2>>;
  require?: InputMaybe<RequireContainer7275798f9ff1826b>;
};


export type QueryQueryParameterArgs = {
  filterBy?: InputMaybe<FilterContainer9151b3bab054ab55>;
  orderBy?: InputMaybe<Array<OrderContainer670a07c21adba5c9>>;
};


export type QueryQueryParameterGroupArgs = {
  filterBy?: InputMaybe<FilterContainer1e4225e8e77021d7>;
  orderBy?: InputMaybe<Array<OrderContainerd7735c5c37d5547c>>;
};


export type QueryQueryParameterValueArgs = {
  filterBy?: InputMaybe<FilterContainer744027555f798cbb>;
  orderBy?: InputMaybe<Array<OrderContainer5f9032f190cf0a74>>;
  require?: InputMaybe<RequireContainerbc56ea6aa0404cd2>;
};


export type QueryQueryPaymentMethodArgs = {
  filterBy?: InputMaybe<FilterContainer3ff4be886c39a0e>;
  orderBy?: InputMaybe<Array<OrderContainerd961bc3fab551bb0>>;
  require?: InputMaybe<RequireContainerc64ffdf508119414>;
};


export type QueryQueryPickupPointArgs = {
  filterBy?: InputMaybe<FilterContainerd1ed0dd289b39bb5>;
  orderBy?: InputMaybe<Array<OrderContainerdfe938cf264d6dc0>>;
};


export type QueryQueryPriceListArgs = {
  filterBy?: InputMaybe<FilterContainerb29777b6620f8b8d>;
  orderBy?: InputMaybe<Array<OrderContainerb836a731b242bb0>>;
};


export type QueryQueryProductArgs = {
  filterBy?: InputMaybe<FilterContainer585fda0640662fe0>;
  orderBy?: InputMaybe<Array<OrderContainer90fb661fce37688>>;
  require?: InputMaybe<RequireContainerf34982527348dc72>;
};


export type QueryQueryProductBundleArgs = {
  filterBy?: InputMaybe<FilterContainer150edb03f6a8549a>;
  orderBy?: InputMaybe<Array<OrderContainerc1398334fa8f22a>>;
};


export type QueryQueryShippingMethodArgs = {
  filterBy?: InputMaybe<FilterContainer21f42768fb89b5d4>;
  orderBy?: InputMaybe<Array<OrderContainere47e56ee5b3ec965>>;
  require?: InputMaybe<RequireContainerfd394975372976d3>;
};


export type QueryQueryStockArgs = {
  filterBy?: InputMaybe<FilterContainer11895e8d40db8091>;
  orderBy?: InputMaybe<Array<OrderContainer441ef63c5ca7dd1c>>;
};


export type QueryQueryTagArgs = {
  filterBy?: InputMaybe<FilterContainer967c71ead6465215>;
  orderBy?: InputMaybe<Array<OrderContainer60ec14e01e238dfe>>;
};

export enum QueryHeaderArgumentsJoinType {
  And = 'AND',
  Or = 'OR'
}

export enum QueryPriceMode {
  WithoutTax = 'WITHOUT_TAX',
  WithTax = 'WITH_TAX'
}

/**
 * This mutation allows to create / update / remove attribute of the reference.
 *
 */
export type ReferenceAttributeMutation = {
  /**
   * One attribute mutation to update / insert / delete single attribute of the reference.
   *
   */
  attributeMutation: ReferenceAttributeMutationAggregate;
  /**
   * Unique identifier of the reference.
   *
   */
  name: Scalars['String']['input'];
  /**
   * Primary key of the referenced entity. Might be also any integer
   * that uniquely identifies some external resource not maintained by Evita.
   *
   */
  primaryKey: Scalars['Int']['input'];
};

/**
 * Contains all possible attribute mutations for references.
 *
 */
export type ReferenceAttributeMutationAggregate = {
  /**
   * Increments or decrements existing numeric value by specified delta (negative number produces decremental of
   * existing number, positive one incrementation).
   *
   * Allows to specify the number range that is tolerated for the value after delta application has been finished to
   * verify for example that number of items on stock doesn't go below zero.
   *
   */
  applyDeltaAttributeMutation?: InputMaybe<ApplyDeltaAttributeMutation>;
  /**
   * Remove attribute mutation will drop existing attribute - ie.generates new version of the attribute with tombstone
   * on it.
   *
   */
  removeAttributeMutation?: InputMaybe<RemoveAttributeMutation>;
  /**
   * Upsert attribute mutation will either update existing attribute or create new one.
   *
   */
  upsertAttributeMutation?: InputMaybe<UpsertAttributeMutation>;
};

/**
 * Remove associated data mutation will drop existing associatedData - ie.generates new version of the associated data with tombstone
 * on it.
 *
 */
export type RemoveAssociatedDataMutation = {
  /**
   * Contains locale in case the associatedData is locale specific.
   *
   */
  locale?: InputMaybe<Scalars['Locale']['input']>;
  /**
   * Unique name of the associatedData. Case-sensitive. Distinguishes one associated data item from another within
   * single entity instance.
   *
   */
  name: Scalars['String']['input'];
};

/**
 * Remove attribute mutation will drop existing attribute - ie.generates new version of the attribute with tombstone
 * on it.
 *
 */
export type RemoveAttributeMutation = {
  /**
   * Contains locale in case the attribute is locale specific.
   *
   */
  locale?: InputMaybe<Scalars['Locale']['input']>;
  /**
   * Unique name of the attribute. Case-sensitive. Distinguishes one associated data item from another within
   * single entity instance.
   *
   */
  name: Scalars['String']['input'];
};

/**
 * This mutation allows to remove existing `price` of the entity.
 *
 */
export type RemovePriceMutation = {
  /**
   * Identification of the currency. Three-letter form according to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
   *
   */
  currency: Scalars['Currency']['input'];
  /**
   * Contains identification of the price in the external systems. This id is expected to be used for the synchronization
   * of the price in relation with the primary source of the prices.
   *
   * This id is used to uniquely find a price within same price list and currency and is mandatory.
   *
   */
  priceId: Scalars['Int']['input'];
  /**
   * Contains identification of the price list in the external system. Each price must reference a price list. Price list
   * identification may refer to another Evita entity or may contain any external price list identification
   * (for example id or unique name of the price list in the external system).
   *
   * Single entity is expected to have single price for the price list unless there is `validity` specified.
   * In other words there is no sense to have multiple concurrently valid prices for the same entity that have roots
   * in the same price list.
   *
   */
  priceList: Scalars['String']['input'];
};

/**
 * This mutation allows to remove group in the reference.
 *
 */
export type RemoveReferenceGroupMutation = {
  /**
   * Unique identifier of the reference.
   *
   */
  name: Scalars['String']['input'];
  /**
   * Primary key of the referenced entity. Might be also any integer
   * that uniquely identifies some external resource not maintained by Evita.
   *
   */
  primaryKey: Scalars['Int']['input'];
};

/**
 * This mutation allows to remove a reference from the entity.
 *
 */
export type RemoveReferenceMutation = {
  /**
   * Unique identifier of the reference.
   *
   */
  name: Scalars['String']['input'];
  /**
   * Primary key of the referenced entity. Might be also any integer
   * that uniquely identifies some external resource not maintained by Evita.
   *
   */
  primaryKey: Scalars['Int']['input'];
};

export type RequireContainer3d01e9d5a01f427c = {
  /** Sets inter-facets relation within the specified groups to [logical AND](https://en.wikipedia.org/wiki/Logical_conjunction). [Check detailed documentation](https://evitadb.io/documentation/query/requirements/facet#facet-groups-conjunction) */
  facetTagsGroupsConjunction?: InputMaybe<WrapperObjecte963f349a8f01837>;
  /** Sets relation of facets in the specified groups towards facets in different groups to [logical OR](https://en.wikipedia.org/wiki/Logical_disjunction) . [Check detailed documentation](https://evitadb.io/documentation/query/requirements/facet#facet-groups-disjunction) */
  facetTagsGroupsDisjunction?: InputMaybe<WrapperObjecte963f349a8f01837>;
  /** [Negates](https://en.wikipedia.org/wiki/Negation) the meaning of selected facets in specified facet groups in the sense that their selection would return entities that don't have any of those facets. [Check detailed documentation](https://evitadb.io/documentation/query/requirements/facet#facet-groups-negation) */
  facetTagsGroupsNegation?: InputMaybe<WrapperObjecte963f349a8f01837>;
};

export type RequireContainer7c982456806d0b6d = {
  /** Sets inter-facets relation within the specified groups to [logical AND](https://en.wikipedia.org/wiki/Logical_conjunction). [Check detailed documentation](https://evitadb.io/documentation/query/requirements/facet#facet-groups-conjunction) */
  facetTagsGroupsConjunction?: InputMaybe<WrapperObject504f6fde83fe3a5f>;
  /** Sets relation of facets in the specified groups towards facets in different groups to [logical OR](https://en.wikipedia.org/wiki/Logical_disjunction) . [Check detailed documentation](https://evitadb.io/documentation/query/requirements/facet#facet-groups-disjunction) */
  facetTagsGroupsDisjunction?: InputMaybe<WrapperObject504f6fde83fe3a5f>;
  /** [Negates](https://en.wikipedia.org/wiki/Negation) the meaning of selected facets in specified facet groups in the sense that their selection would return entities that don't have any of those facets. [Check detailed documentation](https://evitadb.io/documentation/query/requirements/facet#facet-groups-negation) */
  facetTagsGroupsNegation?: InputMaybe<WrapperObject504f6fde83fe3a5f>;
};

export type RequireContainer65ded0e02e7a08e5 = {
  /** The constraint limits the traversing in stop at container at specified distance (number of nodes in path). [Check detailed documentation](https://evitadb.io/documentation/query/requirements/hierarchy#distance) */
  distance?: InputMaybe<Scalars['Int']['input']>;
  /** The constraint limits the traversing in stop at container at specified level from root. [Check detailed documentation](https://evitadb.io/documentation/query/requirements/hierarchy#level) */
  level?: InputMaybe<Scalars['Int']['input']>;
  /** The constraint allows to locate the pivot hierarchy node. [Check detailed documentation](https://evitadb.io/documentation/query/requirements/hierarchy#node) */
  node?: InputMaybe<WrapperObject5dcae8f8f4fda156>;
};

export type RequireContainer81b5b62bbb61f3c9 = {
  /** The constraint limits the traversing in stop at container at specified distance (number of nodes in path). [Check detailed documentation](https://evitadb.io/documentation/query/requirements/hierarchy#distance) */
  distance?: InputMaybe<Scalars['Int']['input']>;
  /** The constraint limits the traversing in stop at container at specified level from root. [Check detailed documentation](https://evitadb.io/documentation/query/requirements/hierarchy#level) */
  level?: InputMaybe<Scalars['Int']['input']>;
  /** The constraint allows to locate the pivot hierarchy node. [Check detailed documentation](https://evitadb.io/documentation/query/requirements/hierarchy#node) */
  node?: InputMaybe<WrapperObject9516b67b2fd8a21d>;
};

export type RequireContainer6397022a1afae37 = {
  /** The constraint limits the traversing in stop at container at specified distance (number of nodes in path). [Check detailed documentation](https://evitadb.io/documentation/query/requirements/hierarchy#distance) */
  distance?: InputMaybe<Scalars['Int']['input']>;
  /** The constraint limits the traversing in stop at container at specified level from root. [Check detailed documentation](https://evitadb.io/documentation/query/requirements/hierarchy#level) */
  level?: InputMaybe<Scalars['Int']['input']>;
  /** The constraint allows to locate the pivot hierarchy node. [Check detailed documentation](https://evitadb.io/documentation/query/requirements/hierarchy#node) */
  node?: InputMaybe<WrapperObject833e49fd2eea6dc0>;
};

export type RequireContainer7275798f9ff1826b = {
  /** Sets inter-facets relation within the specified groups to [logical AND](https://en.wikipedia.org/wiki/Logical_conjunction). [Check detailed documentation](https://evitadb.io/documentation/query/requirements/facet#facet-groups-conjunction) */
  facetBrandGroupsConjunction?: InputMaybe<WrapperObject4308c2836b7bc5fd>;
  /** Sets relation of facets in the specified groups towards facets in different groups to [logical OR](https://en.wikipedia.org/wiki/Logical_disjunction) . [Check detailed documentation](https://evitadb.io/documentation/query/requirements/facet#facet-groups-disjunction) */
  facetBrandGroupsDisjunction?: InputMaybe<WrapperObject4308c2836b7bc5fd>;
  /** [Negates](https://en.wikipedia.org/wiki/Negation) the meaning of selected facets in specified facet groups in the sense that their selection would return entities that don't have any of those facets. [Check detailed documentation](https://evitadb.io/documentation/query/requirements/facet#facet-groups-negation) */
  facetBrandGroupsNegation?: InputMaybe<WrapperObject4308c2836b7bc5fd>;
  /** Sets inter-facets relation within the specified groups to [logical AND](https://en.wikipedia.org/wiki/Logical_conjunction). [Check detailed documentation](https://evitadb.io/documentation/query/requirements/facet#facet-groups-conjunction) */
  facetCategoriesGroupsConjunction?: InputMaybe<WrapperObject3dbf5375c415e46e>;
  /** Sets relation of facets in the specified groups towards facets in different groups to [logical OR](https://en.wikipedia.org/wiki/Logical_disjunction) . [Check detailed documentation](https://evitadb.io/documentation/query/requirements/facet#facet-groups-disjunction) */
  facetCategoriesGroupsDisjunction?: InputMaybe<WrapperObject3dbf5375c415e46e>;
  /** [Negates](https://en.wikipedia.org/wiki/Negation) the meaning of selected facets in specified facet groups in the sense that their selection would return entities that don't have any of those facets. [Check detailed documentation](https://evitadb.io/documentation/query/requirements/facet#facet-groups-negation) */
  facetCategoriesGroupsNegation?: InputMaybe<WrapperObject3dbf5375c415e46e>;
  /** Sets inter-facets relation within the specified groups to [logical AND](https://en.wikipedia.org/wiki/Logical_conjunction). [Check detailed documentation](https://evitadb.io/documentation/query/requirements/facet#facet-groups-conjunction) */
  facetGroupsGroupsConjunction?: InputMaybe<WrapperObject810097294cc37dc2>;
  /** Sets relation of facets in the specified groups towards facets in different groups to [logical OR](https://en.wikipedia.org/wiki/Logical_disjunction) . [Check detailed documentation](https://evitadb.io/documentation/query/requirements/facet#facet-groups-disjunction) */
  facetGroupsGroupsDisjunction?: InputMaybe<WrapperObject810097294cc37dc2>;
  /** [Negates](https://en.wikipedia.org/wiki/Negation) the meaning of selected facets in specified facet groups in the sense that their selection would return entities that don't have any of those facets. [Check detailed documentation](https://evitadb.io/documentation/query/requirements/facet#facet-groups-negation) */
  facetGroupsGroupsNegation?: InputMaybe<WrapperObject810097294cc37dc2>;
  /** Sets inter-facets relation within the specified groups to [logical AND](https://en.wikipedia.org/wiki/Logical_conjunction). [Check detailed documentation](https://evitadb.io/documentation/query/requirements/facet#facet-groups-conjunction) */
  facetParameterValuesGroupsConjunction?: InputMaybe<WrapperObjectfa27519a6f1a1ca3>;
  /** Sets relation of facets in the specified groups towards facets in different groups to [logical OR](https://en.wikipedia.org/wiki/Logical_disjunction) . [Check detailed documentation](https://evitadb.io/documentation/query/requirements/facet#facet-groups-disjunction) */
  facetParameterValuesGroupsDisjunction?: InputMaybe<WrapperObjectfa27519a6f1a1ca3>;
  /** [Negates](https://en.wikipedia.org/wiki/Negation) the meaning of selected facets in specified facet groups in the sense that their selection would return entities that don't have any of those facets. [Check detailed documentation](https://evitadb.io/documentation/query/requirements/facet#facet-groups-negation) */
  facetParameterValuesGroupsNegation?: InputMaybe<WrapperObjectfa27519a6f1a1ca3>;
  /** Sets inter-facets relation within the specified groups to [logical AND](https://en.wikipedia.org/wiki/Logical_conjunction). [Check detailed documentation](https://evitadb.io/documentation/query/requirements/facet#facet-groups-conjunction) */
  facetTagsGroupsConjunction?: InputMaybe<WrapperObject3f6a23223ec95d81>;
  /** Sets relation of facets in the specified groups towards facets in different groups to [logical OR](https://en.wikipedia.org/wiki/Logical_disjunction) . [Check detailed documentation](https://evitadb.io/documentation/query/requirements/facet#facet-groups-disjunction) */
  facetTagsGroupsDisjunction?: InputMaybe<WrapperObject3f6a23223ec95d81>;
  /** [Negates](https://en.wikipedia.org/wiki/Negation) the meaning of selected facets in specified facet groups in the sense that their selection would return entities that don't have any of those facets. [Check detailed documentation](https://evitadb.io/documentation/query/requirements/facet#facet-groups-negation) */
  facetTagsGroupsNegation?: InputMaybe<WrapperObject3f6a23223ec95d81>;
  /** Sets inter-facets relation within the specified groups to [logical AND](https://en.wikipedia.org/wiki/Logical_conjunction). [Check detailed documentation](https://evitadb.io/documentation/query/requirements/facet#facet-groups-conjunction) */
  facetVariantParametersGroupsConjunction?: InputMaybe<WrapperObject28df12ad5ac5d051>;
  /** Sets relation of facets in the specified groups towards facets in different groups to [logical OR](https://en.wikipedia.org/wiki/Logical_disjunction) . [Check detailed documentation](https://evitadb.io/documentation/query/requirements/facet#facet-groups-disjunction) */
  facetVariantParametersGroupsDisjunction?: InputMaybe<WrapperObject28df12ad5ac5d051>;
  /** [Negates](https://en.wikipedia.org/wiki/Negation) the meaning of selected facets in specified facet groups in the sense that their selection would return entities that don't have any of those facets. [Check detailed documentation](https://evitadb.io/documentation/query/requirements/facet#facet-groups-negation) */
  facetVariantParametersGroupsNegation?: InputMaybe<WrapperObject28df12ad5ac5d051>;
  /** The constraint specifies which price type (with/without tax) will be used for handling filtering and sorting constraints. [Check detailed documentation](https://evitadb.io/documentation/query/requirements/price#price-type) */
  priceType?: InputMaybe<QueryPriceMode>;
};

export type RequireContainerbc56ea6aa0404cd2 = {
  /** Sets inter-facets relation within the specified groups to [logical AND](https://en.wikipedia.org/wiki/Logical_conjunction). [Check detailed documentation](https://evitadb.io/documentation/query/requirements/facet#facet-groups-conjunction) */
  facetSyntheticParameterGroupsConjunction?: InputMaybe<WrapperObject9011b120aeeb54fb>;
  /** Sets relation of facets in the specified groups towards facets in different groups to [logical OR](https://en.wikipedia.org/wiki/Logical_disjunction) . [Check detailed documentation](https://evitadb.io/documentation/query/requirements/facet#facet-groups-disjunction) */
  facetSyntheticParameterGroupsDisjunction?: InputMaybe<WrapperObject9011b120aeeb54fb>;
  /** [Negates](https://en.wikipedia.org/wiki/Negation) the meaning of selected facets in specified facet groups in the sense that their selection would return entities that don't have any of those facets. [Check detailed documentation](https://evitadb.io/documentation/query/requirements/facet#facet-groups-negation) */
  facetSyntheticParameterGroupsNegation?: InputMaybe<WrapperObject9011b120aeeb54fb>;
};

export type RequireContainerbf49f780863ded83 = {
  /** Sets inter-facets relation within the specified groups to [logical AND](https://en.wikipedia.org/wiki/Logical_conjunction). [Check detailed documentation](https://evitadb.io/documentation/query/requirements/facet#facet-groups-conjunction) */
  facetTagsGroupsConjunction?: InputMaybe<WrapperObjectbf103f9d282b9df3>;
  /** Sets relation of facets in the specified groups towards facets in different groups to [logical OR](https://en.wikipedia.org/wiki/Logical_disjunction) . [Check detailed documentation](https://evitadb.io/documentation/query/requirements/facet#facet-groups-disjunction) */
  facetTagsGroupsDisjunction?: InputMaybe<WrapperObjectbf103f9d282b9df3>;
  /** [Negates](https://en.wikipedia.org/wiki/Negation) the meaning of selected facets in specified facet groups in the sense that their selection would return entities that don't have any of those facets. [Check detailed documentation](https://evitadb.io/documentation/query/requirements/facet#facet-groups-negation) */
  facetTagsGroupsNegation?: InputMaybe<WrapperObjectbf103f9d282b9df3>;
};

export type RequireContainerc64ffdf508119414 = {
  /** The constraint specifies which price type (with/without tax) will be used for handling filtering and sorting constraints. [Check detailed documentation](https://evitadb.io/documentation/query/requirements/price#price-type) */
  priceType?: InputMaybe<QueryPriceMode>;
};

export type RequireContainerf34982527348dc72 = {
  /** Sets inter-facets relation within the specified groups to [logical AND](https://en.wikipedia.org/wiki/Logical_conjunction). [Check detailed documentation](https://evitadb.io/documentation/query/requirements/facet#facet-groups-conjunction) */
  facetBrandGroupsConjunction?: InputMaybe<WrapperObject24b50475c5a18ef3>;
  /** Sets relation of facets in the specified groups towards facets in different groups to [logical OR](https://en.wikipedia.org/wiki/Logical_disjunction) . [Check detailed documentation](https://evitadb.io/documentation/query/requirements/facet#facet-groups-disjunction) */
  facetBrandGroupsDisjunction?: InputMaybe<WrapperObject24b50475c5a18ef3>;
  /** [Negates](https://en.wikipedia.org/wiki/Negation) the meaning of selected facets in specified facet groups in the sense that their selection would return entities that don't have any of those facets. [Check detailed documentation](https://evitadb.io/documentation/query/requirements/facet#facet-groups-negation) */
  facetBrandGroupsNegation?: InputMaybe<WrapperObject24b50475c5a18ef3>;
  /** Sets inter-facets relation within the specified groups to [logical AND](https://en.wikipedia.org/wiki/Logical_conjunction). [Check detailed documentation](https://evitadb.io/documentation/query/requirements/facet#facet-groups-conjunction) */
  facetCategoriesGroupsConjunction?: InputMaybe<WrapperObjectff6212302bee7196>;
  /** Sets relation of facets in the specified groups towards facets in different groups to [logical OR](https://en.wikipedia.org/wiki/Logical_disjunction) . [Check detailed documentation](https://evitadb.io/documentation/query/requirements/facet#facet-groups-disjunction) */
  facetCategoriesGroupsDisjunction?: InputMaybe<WrapperObjectff6212302bee7196>;
  /** [Negates](https://en.wikipedia.org/wiki/Negation) the meaning of selected facets in specified facet groups in the sense that their selection would return entities that don't have any of those facets. [Check detailed documentation](https://evitadb.io/documentation/query/requirements/facet#facet-groups-negation) */
  facetCategoriesGroupsNegation?: InputMaybe<WrapperObjectff6212302bee7196>;
  /** Sets inter-facets relation within the specified groups to [logical AND](https://en.wikipedia.org/wiki/Logical_conjunction). [Check detailed documentation](https://evitadb.io/documentation/query/requirements/facet#facet-groups-conjunction) */
  facetGroupsGroupsConjunction?: InputMaybe<WrapperObject8858f0859ede58d1>;
  /** Sets relation of facets in the specified groups towards facets in different groups to [logical OR](https://en.wikipedia.org/wiki/Logical_disjunction) . [Check detailed documentation](https://evitadb.io/documentation/query/requirements/facet#facet-groups-disjunction) */
  facetGroupsGroupsDisjunction?: InputMaybe<WrapperObject8858f0859ede58d1>;
  /** [Negates](https://en.wikipedia.org/wiki/Negation) the meaning of selected facets in specified facet groups in the sense that their selection would return entities that don't have any of those facets. [Check detailed documentation](https://evitadb.io/documentation/query/requirements/facet#facet-groups-negation) */
  facetGroupsGroupsNegation?: InputMaybe<WrapperObject8858f0859ede58d1>;
  /** Sets inter-facets relation within the specified groups to [logical AND](https://en.wikipedia.org/wiki/Logical_conjunction). [Check detailed documentation](https://evitadb.io/documentation/query/requirements/facet#facet-groups-conjunction) */
  facetParameterValuesGroupsConjunction?: InputMaybe<WrapperObject956b09fee466ca8e>;
  /** Sets relation of facets in the specified groups towards facets in different groups to [logical OR](https://en.wikipedia.org/wiki/Logical_disjunction) . [Check detailed documentation](https://evitadb.io/documentation/query/requirements/facet#facet-groups-disjunction) */
  facetParameterValuesGroupsDisjunction?: InputMaybe<WrapperObject956b09fee466ca8e>;
  /** [Negates](https://en.wikipedia.org/wiki/Negation) the meaning of selected facets in specified facet groups in the sense that their selection would return entities that don't have any of those facets. [Check detailed documentation](https://evitadb.io/documentation/query/requirements/facet#facet-groups-negation) */
  facetParameterValuesGroupsNegation?: InputMaybe<WrapperObject956b09fee466ca8e>;
  /** Sets inter-facets relation within the specified groups to [logical AND](https://en.wikipedia.org/wiki/Logical_conjunction). [Check detailed documentation](https://evitadb.io/documentation/query/requirements/facet#facet-groups-conjunction) */
  facetStocksGroupsConjunction?: InputMaybe<WrapperObjectf3278a69a95ebbb6>;
  /** Sets relation of facets in the specified groups towards facets in different groups to [logical OR](https://en.wikipedia.org/wiki/Logical_disjunction) . [Check detailed documentation](https://evitadb.io/documentation/query/requirements/facet#facet-groups-disjunction) */
  facetStocksGroupsDisjunction?: InputMaybe<WrapperObjectf3278a69a95ebbb6>;
  /** [Negates](https://en.wikipedia.org/wiki/Negation) the meaning of selected facets in specified facet groups in the sense that their selection would return entities that don't have any of those facets. [Check detailed documentation](https://evitadb.io/documentation/query/requirements/facet#facet-groups-negation) */
  facetStocksGroupsNegation?: InputMaybe<WrapperObjectf3278a69a95ebbb6>;
  /** Sets inter-facets relation within the specified groups to [logical AND](https://en.wikipedia.org/wiki/Logical_conjunction). [Check detailed documentation](https://evitadb.io/documentation/query/requirements/facet#facet-groups-conjunction) */
  facetTagsGroupsConjunction?: InputMaybe<WrapperObject133aa9b62145d97c>;
  /** Sets relation of facets in the specified groups towards facets in different groups to [logical OR](https://en.wikipedia.org/wiki/Logical_disjunction) . [Check detailed documentation](https://evitadb.io/documentation/query/requirements/facet#facet-groups-disjunction) */
  facetTagsGroupsDisjunction?: InputMaybe<WrapperObject133aa9b62145d97c>;
  /** [Negates](https://en.wikipedia.org/wiki/Negation) the meaning of selected facets in specified facet groups in the sense that their selection would return entities that don't have any of those facets. [Check detailed documentation](https://evitadb.io/documentation/query/requirements/facet#facet-groups-negation) */
  facetTagsGroupsNegation?: InputMaybe<WrapperObject133aa9b62145d97c>;
  /** Sets inter-facets relation within the specified groups to [logical AND](https://en.wikipedia.org/wiki/Logical_conjunction). [Check detailed documentation](https://evitadb.io/documentation/query/requirements/facet#facet-groups-conjunction) */
  facetVariantParametersGroupsConjunction?: InputMaybe<WrapperObjectbc3011f23f9af40f>;
  /** Sets relation of facets in the specified groups towards facets in different groups to [logical OR](https://en.wikipedia.org/wiki/Logical_disjunction) . [Check detailed documentation](https://evitadb.io/documentation/query/requirements/facet#facet-groups-disjunction) */
  facetVariantParametersGroupsDisjunction?: InputMaybe<WrapperObjectbc3011f23f9af40f>;
  /** [Negates](https://en.wikipedia.org/wiki/Negation) the meaning of selected facets in specified facet groups in the sense that their selection would return entities that don't have any of those facets. [Check detailed documentation](https://evitadb.io/documentation/query/requirements/facet#facet-groups-negation) */
  facetVariantParametersGroupsNegation?: InputMaybe<WrapperObjectbc3011f23f9af40f>;
  /** The constraint specifies which price type (with/without tax) will be used for handling filtering and sorting constraints. [Check detailed documentation](https://evitadb.io/documentation/query/requirements/price#price-type) */
  priceType?: InputMaybe<QueryPriceMode>;
};

export type RequireContainerfafb7379fd98a57c = {
  /** The constraint limits the traversing in stop at container at specified distance (number of nodes in path). [Check detailed documentation](https://evitadb.io/documentation/query/requirements/hierarchy#distance) */
  distance?: InputMaybe<Scalars['Int']['input']>;
  /** The constraint limits the traversing in stop at container at specified level from root. [Check detailed documentation](https://evitadb.io/documentation/query/requirements/hierarchy#level) */
  level?: InputMaybe<Scalars['Int']['input']>;
  /** The constraint allows to locate the pivot hierarchy node. [Check detailed documentation](https://evitadb.io/documentation/query/requirements/hierarchy#node) */
  node?: InputMaybe<WrapperObject9f96d343afba626d>;
};

export type RequireContainerfd394975372976d3 = {
  /** Sets inter-facets relation within the specified groups to [logical AND](https://en.wikipedia.org/wiki/Logical_conjunction). [Check detailed documentation](https://evitadb.io/documentation/query/requirements/facet#facet-groups-conjunction) */
  facetTagsGroupsConjunction?: InputMaybe<WrapperObject30a6db7b4f47e794>;
  /** Sets relation of facets in the specified groups towards facets in different groups to [logical OR](https://en.wikipedia.org/wiki/Logical_disjunction) . [Check detailed documentation](https://evitadb.io/documentation/query/requirements/facet#facet-groups-disjunction) */
  facetTagsGroupsDisjunction?: InputMaybe<WrapperObject30a6db7b4f47e794>;
  /** [Negates](https://en.wikipedia.org/wiki/Negation) the meaning of selected facets in specified facet groups in the sense that their selection would return entities that don't have any of those facets. [Check detailed documentation](https://evitadb.io/documentation/query/requirements/facet#facet-groups-negation) */
  facetTagsGroupsNegation?: InputMaybe<WrapperObject30a6db7b4f47e794>;
  /** The constraint specifies which price type (with/without tax) will be used for handling filtering and sorting constraints. [Check detailed documentation](https://evitadb.io/documentation/query/requirements/price#price-type) */
  priceType?: InputMaybe<QueryPriceMode>;
};

/**
 * Enum containing all supported data types.
 *
 */
export enum Scalar {
  BigDecimal = 'BigDecimal',
  BigDecimalArray = 'BigDecimalArray',
  BigDecimalNumberRange = 'BigDecimalNumberRange',
  BigDecimalNumberRangeArray = 'BigDecimalNumberRangeArray',
  Boolean = 'Boolean',
  BooleanArray = 'BooleanArray',
  Byte = 'Byte',
  ByteArray = 'ByteArray',
  ByteNumberRange = 'ByteNumberRange',
  ByteNumberRangeArray = 'ByteNumberRangeArray',
  Character = 'Character',
  CharacterArray = 'CharacterArray',
  ComplexDataObject = 'ComplexDataObject',
  Currency = 'Currency',
  CurrencyArray = 'CurrencyArray',
  DateTimeRange = 'DateTimeRange',
  DateTimeRangeArray = 'DateTimeRangeArray',
  Integer = 'Integer',
  IntegerArray = 'IntegerArray',
  IntegerNumberRange = 'IntegerNumberRange',
  IntegerNumberRangeArray = 'IntegerNumberRangeArray',
  LocalDate = 'LocalDate',
  LocalDateArray = 'LocalDateArray',
  LocalDateTime = 'LocalDateTime',
  LocalDateTimeArray = 'LocalDateTimeArray',
  LocalTime = 'LocalTime',
  LocalTimeArray = 'LocalTimeArray',
  Locale = 'Locale',
  LocaleArray = 'LocaleArray',
  Long = 'Long',
  LongArray = 'LongArray',
  LongNumberRange = 'LongNumberRange',
  LongNumberRangeArray = 'LongNumberRangeArray',
  OffsetDateTime = 'OffsetDateTime',
  OffsetDateTimeArray = 'OffsetDateTimeArray',
  Predecessor = 'Predecessor',
  Short = 'Short',
  ShortArray = 'ShortArray',
  ShortNumberRange = 'ShortNumberRange',
  ShortNumberRangeArray = 'ShortNumberRangeArray',
  String = 'String',
  StringArray = 'StringArray',
  Uuid = 'UUID',
  UuidArray = 'UUIDArray'
}

/**
 * This mutation allows to set `parent` in the `entity`.
 *
 */
export type SetParentMutation = {
  /**
   * Optional new primary key of parent entity. If null, this entity is at the root of hierarchy.
   *
   */
  parentPrimaryKey: Scalars['Int']['input'];
};

/**
 * This mutation allows to set / remove `priceInnerRecordHandling` behaviour of the entity.
 *
 */
export type SetPriceInnerRecordHandlingMutation = {
  /**
   * Price inner record handling controls how prices that share same `inner entity id` will behave during filtering and sorting.
   *
   */
  priceInnerRecordHandling: PriceInnerRecordHandling;
};

/**
 * This mutation allows to create / update group of the reference.
 *
 */
export type SetReferenceGroupMutation = {
  /**
   * Primary key of the referenced entity representing group. Might be also any integer
   * that uniquely identifies some external resource not maintained by Evita.
   *
   */
  groupPrimaryKey: Scalars['Int']['input'];
  /**
   *       Type of the referenced entity representing group. Might be also any `String`
   *       that identifies type in some external resource not maintained by Evita.
   *
   */
  groupType?: InputMaybe<Scalars['String']['input']>;
  /**
   * Unique identifier of the reference.
   *
   */
  name: Scalars['String']['input'];
  /**
   * Primary key of the referenced entity. Might be also any integer
   * that uniquely identifies some external resource not maintained by Evita.
   *
   */
  primaryKey: Scalars['Int']['input'];
};

/** Shipping method describes a form of shipping that can be selected to transport the goods to the customer. */
export type ShippingMethod = Entity & {
  __typename?: 'ShippingMethod';
  /**
   * Contains set of all locales that were used for localized attributes or associated data of
   * this particular entity.
   *
   */
  allLocales: Array<CatalogLocale>;
  /**
   * Associated data carry additional data entries that are never used for filtering / sorting but may be needed to be fetched
   * along with entity in order to present data to the target consumer (i.e. user / API / bot). Associated data may be stored
   * in slower storage and may contain wide range of data types - from small ones (i.e. numbers, strings, dates) up to large
   * binary arrays representing entire files (i.e. pictures, documents).
   *
   */
  associatedData?: Maybe<ShippingMethodAssociatedData>;
  /**
   * Attributes allows defining set of data that are fetched in bulk along with the reference.
   * Attributes may be used for fast filtering or can be used to sort along.
   *
   */
  attributes?: Maybe<ShippingMethodAttributes>;
  /**
   * Set of tags allowing to compute whether the shipping method should be available for use in context of
   * the products being shipped.
   */
  calculationTags: Array<ShippingMethodCalculationTagsReference>;
  /**
   * Contains set of requested locales for this particular entity.
   *
   */
  locales: Array<CatalogLocale>;
  /**
   * Single price corresponding to defined arguments picked up from set of all `prices`.
   * If more than one price is found, the valid one is picked. Validity is check based on query, if desired
   * validity is not specified in query, current time is used.
   *
   */
  price?: Maybe<Price>;
  /**
   * Price for which the entity should be sold. This method can be used only when appropriate
   * price related constraints are present so that `currency` and `priceList` priority can be extracted from the query.
   * The moment is either extracted from the query as well (if present) or current date and time is used.
   *
   */
  priceForSale?: Maybe<Price>;
  /**
   * Price inner record handling controls how prices that share same `inner entity id` will behave during filtering and sorting.
   *
   */
  priceInnerRecordHandling: PriceInnerRecordHandling;
  /**
   * Prices allows defining set of prices of entity for complex filtering and ordering.
   *
   */
  prices: Array<Price>;
  /**
   * Unique Integer positive number representing the entity. Can be used for fast lookup for
   * entity (entities). Primary key must be unique within the same entity type.
   *
   */
  primaryKey: Scalars['Int']['output'];
  /** Set of payments methods that limits the offer of payment methods when this shipping method is selected. */
  restrictedPaymentMethods: Array<ShippingMethodRestrictedPaymentMethodsReference>;
  /**
   * Tags allow non-systematic categorization (cross-structure tagging) of the entities. Tags are often more
   * digestible from the user's point of view. Tags are maintained in Edee.ONE CMS and here we just link them.
   */
  tags: Array<ShippingMethodTagsReference>;
  /**
   * Type of entity.
   * Entity type is main sharding key - all data of entities with same type are stored in separated collections. Within the
   * entity type entity is uniquely represented by primary key.
   *
   */
  type: Scalars['String']['output'];
  /**
   * Contains version of this definition object and gets increased with any entity type update. Allows to execute
   * optimistic locking i.e. avoiding parallel modifications.
   *
   */
  version: Scalars['Int']['output'];
};


/** Shipping method describes a form of shipping that can be selected to transport the goods to the customer. */
export type ShippingMethodAssociatedDataArgs = {
  locale?: InputMaybe<CatalogLocale>;
};


/** Shipping method describes a form of shipping that can be selected to transport the goods to the customer. */
export type ShippingMethodAttributesArgs = {
  locale?: InputMaybe<CatalogLocale>;
};


/** Shipping method describes a form of shipping that can be selected to transport the goods to the customer. */
export type ShippingMethodCalculationTagsArgs = {
  filterBy?: InputMaybe<FilterContainere9cd3f187046f5d6>;
  orderBy?: InputMaybe<Array<OrderContainer7d9ecf1c05051af6>>;
};


/** Shipping method describes a form of shipping that can be selected to transport the goods to the customer. */
export type ShippingMethodPriceArgs = {
  currency?: InputMaybe<CatalogCurrency>;
  locale?: InputMaybe<CatalogLocale>;
  priceList: Scalars['String']['input'];
};


/** Shipping method describes a form of shipping that can be selected to transport the goods to the customer. */
export type ShippingMethodPriceForSaleArgs = {
  currency?: InputMaybe<CatalogCurrency>;
  locale?: InputMaybe<CatalogLocale>;
  priceList?: InputMaybe<Scalars['String']['input']>;
  validIn?: InputMaybe<Scalars['OffsetDateTime']['input']>;
  validNow?: InputMaybe<Scalars['Boolean']['input']>;
};


/** Shipping method describes a form of shipping that can be selected to transport the goods to the customer. */
export type ShippingMethodPricesArgs = {
  currency?: InputMaybe<CatalogCurrency>;
  locale?: InputMaybe<CatalogLocale>;
  priceLists?: InputMaybe<Array<Scalars['String']['input']>>;
};


/** Shipping method describes a form of shipping that can be selected to transport the goods to the customer. */
export type ShippingMethodRestrictedPaymentMethodsArgs = {
  filterBy?: InputMaybe<FilterContainer9df8ecf165a46846>;
  orderBy?: InputMaybe<Array<OrderContainer776ab88cdf14b588>>;
};


/** Shipping method describes a form of shipping that can be selected to transport the goods to the customer. */
export type ShippingMethodTagsArgs = {
  filterBy?: InputMaybe<FilterContainer8036eb0fa0d4b8bb>;
  orderBy?: InputMaybe<Array<OrderContainer7388522944352f3a>>;
};

/**
 * Associated data carry additional data entries that are never used for filtering / sorting but may be needed to be fetched
 * along with entity in order to present data to the target consumer (i.e. user / API / bot). Associated data may be stored
 * in slower storage and may contain wide range of data types - from small ones (i.e. numbers, strings, dates) up to large
 * binary arrays representing entire files (i.e. pictures, documents).
 *
 */
export type ShippingMethodAssociatedData = {
  __typename?: 'ShippingMethodAssociatedData';
  /**
   * Contains a structure that keeps all currently active URLs for different locales. This information is used
   * for rendering language switching menu. We need to use correct active URL so that user stays looking
   * the exact same entity after the locale switch occurred - just in different language.
   */
  allActiveUrls?: Maybe<Scalars['ComplexDataObject']['output']>;
  /** A structure that allows to specify a set of localized labels for entity. */
  localization?: Maybe<Scalars['ComplexDataObject']['output']>;
};

/**
 * Attributes allows defining set of data that are fetched in bulk along with the entity body.
 * Attributes may be used for fast filtering or can be used to sort along.
 *
 */
export type ShippingMethodAttributes = {
  __typename?: 'ShippingMethodAttributes';
  /**
   * Date and time of the last change of this entity. This timestamp is updated only when real change
   * in entity occurs in primary data store.  This timestamp should be used on boundaries with external
   * systems (such as inventory feeds and so on).
   */
  changed: Scalars['OffsetDateTime']['output'];
  /**
   * Unique code that identifies the entity among other entities of the same kind.
   * The code is equivalent to primary key but is targeted on external consumers (systems).
   */
  code: Scalars['String']['output'];
  /**
   * Limits using the shipping method to a specific set of countries. The countries are specified in
   * ISO-3166-1-alpha-2 format.
   */
  countryRestrictions?: Maybe<Array<Scalars['String']['output']>>;
  /**
   * Defines list of countries that are allowed to ship in when this shipping method is selected. The country is
   * specified in ISO-3166-1-alpha-2 format.
   */
  deliveryCountries?: Maybe<Array<Scalars['String']['output']>>;
  /** Full description of the entity in HTML format. */
  description?: Maybe<Scalars['String']['output']>;
  /** Shortened version of description of the entity in plain text. */
  descriptionShort?: Maybe<Scalars['String']['output']>;
  /** Localized name of the entity. */
  name: Scalars['String']['output'];
  /**
   * Order of the entity among other entities sharing the same parent in the listing. Used for sorting entities
   * in ascending order.
   */
  order: Scalars['Predecessor']['output'];
  /** The type of the select method - one of the `com.fg.cps.eshop.shipping.model.PickUpBranchMethodSelect` constants. */
  pickUpBranchMethodSelect?: Maybe<Scalars['String']['output']>;
  /**
   * Date and time when this entity was last published in the evitaDB index. This timestamp will usually
   * be different from the `changed` attribute because the publishing process asynchronously picks up
   * changed entities and publishes them to the evitaDB index with some delay. Also, when evitaDB is
   * completely re-indexed, all timestamps in this attribute will be reset to a new timestamp, while the
   * `changed` attribute will remain the same.
   *
   */
  published: Scalars['OffsetDateTime']['output'];
  /**
   * Property derived from `com.fg.cps.eshop.order.model.ShippingType#isRequiredCustomerDeliveryAddress()`.
   * If `true`, the shipping requires a shipping address (can be the same as the billing address).
   * If `false`, the delivery address is not needed because it is known (e.g. personal collection or mail order).
   *
   */
  requiredCustomerDeliveryAddress: Scalars['Boolean']['output'];
  /**
   * Property derived from `com.fg.cps.eshop.order.model.ShippingType#isRequiredPersonalPickupLocation()`.
   * If `true`, the delivery requires a choice of collection point (e.g. personal collection at a branch,
   * parcel to post office or mail order).
   *
   */
  requiredPersonalPickupLocation: Scalars['Boolean']['output'];
  /** The type of the shipping method - one of the `com.fg.cps.eshop.order.model.ShippingType` constants. */
  shippingType: Scalars['String']['output'];
  /**
   * Returns the status of the entity:
   *
   * - ACTIVE: entity is available on frontend
   * - PRIVATE: entity is  not available on frontend, but it's visible in administration
   */
  status: Scalars['String']['output'];
  /** Localized and globally unique URL of the entity. */
  url?: Maybe<Scalars['String']['output']>;
  /**
   * Old URLs that has been originally assigned to the entity, but are no longer active. Each value that was
   * once `url` but was changed to something else is moved to this list. Thi allows accessing the entity even
   * on the previous location (with redirect) so that remembered URLs in external systems don't end up with
   * "entity not found" response.
   */
  urlInactive?: Maybe<Array<Scalars['String']['output']>>;
  /**
   * Date time range of general accessibility to the entity. Outside this range the entity behaves like if
   * the status was set to PRIVATE.
   */
  validity?: Maybe<Scalars['DateTimeRange']['output']>;
  /**
   * Returns the visibility state of the entity:
   * 	- VISIBLE: entity is visible in signposts, searchable, accessible on detail page
   * 	- INVISIBLE: the entity is only available on a specific detail page (with URL knowledge),
   * 		is not searchable and is not present in listings
   */
  visibility: Scalars['String']['output'];
};

/**
 * Attributes allows defining set of data that are fetched in bulk along with the entity body.
 * Attributes may be used for fast filtering or can be used to sort along.
 *
 */
export type ShippingMethodCalculationTagsAttributes = {
  __typename?: 'ShippingMethodCalculationTagsAttributes';
  /**
   * Determines whether the meaning of the tag for computation whether the shipping method should be excluded or
   * included in the offer list in current shipping context. Possible values:
   *
   * - INCLUDE_IF_AT_LEAST_ONE_ITEM_HAS: include shipping method if at least one product in shopping cart has this tag
   * - INCLUDE_IF_All_ITEMS_HAVE:  include shipping method if all products in shopping cart have this tag
   * - EXCLUDE_IF_AT_LEAST_ONE_ITEM_HAS: exclude shipping method if at least one product in shopping cart has this tag
   * - EXCLUDE_IF_All_ITEMS_HAVE: exclude shipping method if all products in shopping cart have this tag
   *
   */
  meaning: Scalars['String']['output'];
};

/**
 * Set of tags allowing to compute whether the shipping method should be available for use in context of
 * the products being shipped.
 */
export type ShippingMethodCalculationTagsReference = {
  __typename?: 'ShippingMethodCalculationTagsReference';
  /**
   * Attributes allows defining set of data that are fetched in bulk along with the reference.
   * Attributes may be used for fast filtering or can be used to sort along.
   *
   */
  attributes?: Maybe<ShippingMethodCalculationTagsAttributes>;
  /**
   * Returns body of the referenced entity in case its fetching was requested via entity_groupFetch constraint.
   *
   */
  groupEntity: EntityReference;
  /**
   * Returns body of the referenced entity in case its fetching was requested via entity_fetch constraint.
   *
   */
  referencedEntity?: Maybe<Tag>;
  /**
   *          Returns primary key of the referenced (internal or external) entity.
   *
   */
  referencedPrimaryKey: Scalars['Int']['output'];
};

/**
 * Map of requested extra results besides actual found records.
 *
 */
export type ShippingMethodExtraResults = {
  __typename?: 'ShippingMethodExtraResults';
  attributeHistograms?: Maybe<Array<AttributeNamedHistogram>>;
  /**
   * Returns summary of all facets that match query filter excluding those inside `userFilter`.
   * Object contains information about facet groups and individual facets in them as well as appropriate statistics for them.
   *
   */
  facetSummary?: Maybe<ShippingMethodFacetSummary>;
  /**
   * Returns computed histogram for prices satisfactory to filter constraints.
   *
   * A histogram is an approximate representation of the distribution of numerical data. For detailed description please
   * see [WikiPedia](https://en.wikipedia.org/wiki/Histogram).
   * Histogram can be computed only for numeric based properties. It visualises which property values are more common
   * in the returned data set and which are rare. Bucket count will never exceed requested bucket count specified in
   * `requestedCount` but there
   * may be less of them if there is no enough data for computation. Bucket thresholds are specified heuristically so that
   * there are as few "empty buckets" as possible.
   *
   * - buckets are defined by their lower bounds (inclusive)
   * - the upper bound is the lower bound of the next bucket
   *
   */
  priceHistogram?: Maybe<Histogram>;
  /**
   * Returns object containing detailed information about query processing time and its decomposition to single operations.
   *
   */
  queryTelemetry: Scalars['Object']['output'];
};


/**
 * Map of requested extra results besides actual found records.
 *
 */
export type ShippingMethodExtraResultsAttributeHistogramsArgs = {
  attributes: Array<Scalars['String']['input']>;
};


/**
 * Map of requested extra results besides actual found records.
 *
 */
export type ShippingMethodExtraResultsQueryTelemetryArgs = {
  formatted?: InputMaybe<Scalars['Boolean']['input']>;
};

/**
 * This DTO allows returning summary of all facets that match query filter excluding those inside `userFilter`.
 * DTO contains information about facet groups and individual facets in them as well as appropriate statistics for them.
 *
 */
export type ShippingMethodFacetSummary = {
  __typename?: 'ShippingMethodFacetSummary';
  tags?: Maybe<Array<ShippingMethodTagsFacetGroupStatistics>>;
};


/**
 * This DTO allows returning summary of all facets that match query filter excluding those inside `userFilter`.
 * DTO contains information about facet groups and individual facets in them as well as appropriate statistics for them.
 *
 */
export type ShippingMethodFacetSummaryTagsArgs = {
  filterGroupBy?: InputMaybe<FilterContainer3a2a9890a875d4bd>;
  orderGroupBy?: InputMaybe<Array<OrderContainer2cb1816184dccd3f>>;
};

/**
 * Contains all possible local mutations to perform on entity `ShippingMethod`.
 *
 */
export type ShippingMethodLocalMutationAggregate = {
  /**
   * Increments or decrements existing numeric value by specified delta (negative number produces decremental of
   * existing number, positive one incrementation).
   *
   * Allows to specify the number range that is tolerated for the value after delta application has been finished to
   * verify for example that number of items on stock doesn't go below zero.
   *
   */
  applyDeltaAttributeMutation?: InputMaybe<ApplyDeltaAttributeMutation>;
  /**
   * This mutation allows to create a reference in the entity.
   *
   */
  insertReferenceMutation?: InputMaybe<InsertReferenceMutation>;
  /**
   * This mutation allows to create / update / remove attribute of the reference.
   *
   */
  referenceAttributeMutation?: InputMaybe<ReferenceAttributeMutation>;
  /**
   * Remove associated data mutation will drop existing associatedData - ie.generates new version of the associated data with tombstone
   * on it.
   *
   */
  removeAssociatedDataMutation?: InputMaybe<RemoveAssociatedDataMutation>;
  /**
   * Remove attribute mutation will drop existing attribute - ie.generates new version of the attribute with tombstone
   * on it.
   *
   */
  removeAttributeMutation?: InputMaybe<RemoveAttributeMutation>;
  /**
   * This mutation allows to remove existing `price` of the entity.
   *
   */
  removePriceMutation?: InputMaybe<RemovePriceMutation>;
  /**
   * This mutation allows to remove group in the reference.
   *
   */
  removeReferenceGroupMutation?: InputMaybe<RemoveReferenceGroupMutation>;
  /**
   * This mutation allows to remove a reference from the entity.
   *
   */
  removeReferenceMutation?: InputMaybe<RemoveReferenceMutation>;
  /**
   * This mutation allows to set / remove `priceInnerRecordHandling` behaviour of the entity.
   *
   */
  setPriceInnerRecordHandlingMutation?: InputMaybe<SetPriceInnerRecordHandlingMutation>;
  /**
   * This mutation allows to create / update group of the reference.
   *
   */
  setReferenceGroupMutation?: InputMaybe<SetReferenceGroupMutation>;
  /**
   * Upsert associatedData mutation will either update existing associatedData or create new one.
   *
   */
  upsertAssociatedDataMutation?: InputMaybe<UpsertAssociatedDataMutation>;
  /**
   * Upsert attribute mutation will either update existing attribute or create new one.
   *
   */
  upsertAttributeMutation?: InputMaybe<UpsertAttributeMutation>;
  /**
   * This mutation allows to create / update `price` of the entity.
   *
   */
  upsertPriceMutation?: InputMaybe<UpsertPriceMutation>;
};

/**
 * Page of records according to pagination rules in input query.
 *
 */
export type ShippingMethodRecordPage = {
  __typename?: 'ShippingMethodRecordPage';
  /**
   * Actual found sorted page/strip of records.
   *
   */
  data: Array<ShippingMethod>;
  /**
   * Returns true if there are no data available.
   *
   */
  empty: Scalars['Boolean']['output'];
  /**
   * Returns true if current page/strip is the first page/strip in the result set.
   *
   */
  first: Scalars['Boolean']['output'];
  /**
   * Returns offset of the first record of current page with current pageSize.
   *
   */
  firstPageItemNumber: Scalars['Int']['output'];
  /**
   * Returns true if there is next page/strip available.
   *
   */
  hasNext: Scalars['Boolean']['output'];
  /**
   * Returns true if there is previous page/strip available.
   *
   */
  hasPrevious: Scalars['Boolean']['output'];
  /**
   * Returns true if current page/strip is the last page/strip in the result set.
   *
   */
  last: Scalars['Boolean']['output'];
  /**
   * Returns offset of the last record of current page with current pageSize.
   *
   */
  lastPageItemNumber: Scalars['Int']['output'];
  /**
   * Returns number of the last page that can be accessed with current number of records.
   * Returns -1 when offset/limit was used for creating paginated list.
   *
   */
  lastPageNumber: Scalars['Int']['output'];
  /**
   * Returns current page number (indexed from 1).
   *
   */
  pageNumber: Scalars['Int']['output'];
  /**
   * Returns number of records per single page.
   *
   */
  pageSize: Scalars['Int']['output'];
  /**
   * Returns true if there is only single page/strip available (i.e. total record count < record count on one page).
   *
   */
  singlePage: Scalars['Boolean']['output'];
  /**
   * Returns total number of records that are possible to fetch by paginating entire result stream.
   *
   */
  totalRecordCount: Scalars['Int']['output'];
};

/**
 * Strip of records according to offset and limit rules in input query.
 *
 */
export type ShippingMethodRecordStrip = {
  __typename?: 'ShippingMethodRecordStrip';
  /**
   * Actual found sorted page/strip of records.
   *
   */
  data: Array<ShippingMethod>;
  /**
   * Returns true if there are no data available.
   *
   */
  empty: Scalars['Boolean']['output'];
  /**
   * Returns true if current page/strip is the first page/strip in the result set.
   *
   */
  first: Scalars['Boolean']['output'];
  /**
   * Returns true if there is next page/strip available.
   *
   */
  hasNext: Scalars['Boolean']['output'];
  /**
   * Returns true if there is previous page/strip available.
   *
   */
  hasPrevious: Scalars['Boolean']['output'];
  /**
   * Returns true if current page/strip is the last page/strip in the result set.
   *
   */
  last: Scalars['Boolean']['output'];
  /**
   * Returns limit - i.e. maximal number of records that are requested after offset.
   *
   */
  limit: Scalars['Int']['output'];
  /**
   * Returns current offset (indexed from 0).
   *
   */
  offset: Scalars['Int']['output'];
  /**
   * Returns true if there is only single page/strip available (i.e. total record count < record count on one page).
   *
   */
  singlePage: Scalars['Boolean']['output'];
  /**
   * Returns total number of records that are possible to fetch by paginating entire result stream.
   *
   */
  totalRecordCount: Scalars['Int']['output'];
};

/**
 * Evita response contains all results to single query. Results are divided to two parts - main results returned by
 * `recordPage`/`recordStrip` and set of extra results retrieved by `extraResults`.
 *
 */
export type ShippingMethodResponse = {
  __typename?: 'ShippingMethodResponse';
  /**
   * Returns map of requested extra results besides actual found records.
   *
   */
  extraResults: ShippingMethodExtraResults;
  /**
   * Returns page of records according to pagination rules in input query.
   * Either `page` or `strip` can be used, not both.
   *
   */
  recordPage?: Maybe<ShippingMethodRecordPage>;
  /**
   * Returns strip of records according to pagination rules in input query.
   * Either `page` or `strip` can be used, not both.
   *
   */
  recordStrip?: Maybe<ShippingMethodRecordStrip>;
};


/**
 * Evita response contains all results to single query. Results are divided to two parts - main results returned by
 * `recordPage`/`recordStrip` and set of extra results retrieved by `extraResults`.
 *
 */
export type ShippingMethodResponseRecordPageArgs = {
  number?: InputMaybe<Scalars['Int']['input']>;
  size?: InputMaybe<Scalars['Int']['input']>;
};


/**
 * Evita response contains all results to single query. Results are divided to two parts - main results returned by
 * `recordPage`/`recordStrip` and set of extra results retrieved by `extraResults`.
 *
 */
export type ShippingMethodResponseRecordStripArgs = {
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
};

/** Set of payments methods that limits the offer of payment methods when this shipping method is selected. */
export type ShippingMethodRestrictedPaymentMethodsReference = {
  __typename?: 'ShippingMethodRestrictedPaymentMethodsReference';
  /**
   * Returns body of the referenced entity in case its fetching was requested via entity_fetch constraint.
   *
   */
  referencedEntity?: Maybe<PaymentMethod>;
  /**
   *          Returns primary key of the referenced (internal or external) entity.
   *
   */
  referencedPrimaryKey: Scalars['Int']['output'];
};

/**
 * This DTO contains information about single facet group and statistics of the facets that relates to it.
 *
 */
export type ShippingMethodTagsFacetGroupStatistics = {
  __typename?: 'ShippingMethodTagsFacetGroupStatistics';
  /**
   * Contains number of distinct entities in the response that possess any reference in this group.
   *
   */
  count: Scalars['Int']['output'];
  /**
   * Contains statistics of individual facets.
   *
   */
  facetStatistics: Array<ShippingMethodTagsFacetStatistics>;
  /**
   * Contains referenced entity representing this group.
   *
   */
  groupEntity?: Maybe<EntityReference>;
};


/**
 * This DTO contains information about single facet group and statistics of the facets that relates to it.
 *
 */
export type ShippingMethodTagsFacetGroupStatisticsFacetStatisticsArgs = {
  filterBy?: InputMaybe<FilterContainer967c71ead6465215>;
  orderBy?: InputMaybe<Array<OrderContainer60ec14e01e238dfe>>;
};

/**
 * This DTO contains information about single facet statistics of the entities that are present in the response.
 *
 */
export type ShippingMethodTagsFacetStatistics = {
  __typename?: 'ShippingMethodTagsFacetStatistics';
  /**
   * Contains number of distinct entities in the response that possess of this reference.
   *
   */
  count: Scalars['Int']['output'];
  /**
   * Contains referenced entity representing.
   *
   */
  facetEntity?: Maybe<Tag>;
  /**
   * This field is not null only when this facet is not requested.
   * Contains projected impact on the current response if this facet is also requested in filtering constraints.
   *
   */
  impact?: Maybe<FacetRequestImpact>;
  /**
   * Contains TRUE if the facet was part of the query filtering constraints.
   *
   */
  requested: Scalars['Boolean']['output'];
};

/**
 * Tags allow non-systematic categorization (cross-structure tagging) of the entities. Tags are often more
 * digestible from the user's point of view. Tags are maintained in Edee.ONE CMS and here we just link them.
 */
export type ShippingMethodTagsReference = {
  __typename?: 'ShippingMethodTagsReference';
  /**
   * Returns body of the referenced entity in case its fetching was requested via entity_groupFetch constraint.
   *
   */
  groupEntity: EntityReference;
  /**
   * Returns body of the referenced entity in case its fetching was requested via entity_fetch constraint.
   *
   */
  referencedEntity?: Maybe<Tag>;
  /**
   *          Returns primary key of the referenced (internal or external) entity.
   *
   */
  referencedPrimaryKey: Scalars['Int']['output'];
};

export enum StatisticsBase {
  CompleteFilter = 'COMPLETE_FILTER',
  WithoutUserFilter = 'WITHOUT_USER_FILTER'
}

/**
 * Stock represents a warehouse/depot where the product is being stored. The stock always keeps a specific
 * amount of the product.
 */
export type Stock = Entity & {
  __typename?: 'Stock';
  /**
   * Contains set of all locales that were used for localized attributes or associated data of
   * this particular entity.
   *
   */
  allLocales: Array<CatalogLocale>;
  /**
   * Associated data carry additional data entries that are never used for filtering / sorting but may be needed to be fetched
   * along with entity in order to present data to the target consumer (i.e. user / API / bot). Associated data may be stored
   * in slower storage and may contain wide range of data types - from small ones (i.e. numbers, strings, dates) up to large
   * binary arrays representing entire files (i.e. pictures, documents).
   *
   */
  associatedData?: Maybe<StockAssociatedData>;
  /**
   * Attributes allows defining set of data that are fetched in bulk along with the reference.
   * Attributes may be used for fast filtering or can be used to sort along.
   *
   */
  attributes?: Maybe<StockAttributes>;
  /**
   * Contains set of requested locales for this particular entity.
   *
   */
  locales: Array<CatalogLocale>;
  /**
   * Unique Integer positive number representing the entity. Can be used for fast lookup for
   * entity (entities). Primary key must be unique within the same entity type.
   *
   */
  primaryKey: Scalars['Int']['output'];
  /**
   * Type of entity.
   * Entity type is main sharding key - all data of entities with same type are stored in separated collections. Within the
   * entity type entity is uniquely represented by primary key.
   *
   */
  type: Scalars['String']['output'];
  /**
   * Contains version of this definition object and gets increased with any entity type update. Allows to execute
   * optimistic locking i.e. avoiding parallel modifications.
   *
   */
  version: Scalars['Int']['output'];
};


/**
 * Stock represents a warehouse/depot where the product is being stored. The stock always keeps a specific
 * amount of the product.
 */
export type StockAssociatedDataArgs = {
  locale?: InputMaybe<CatalogLocale>;
};


/**
 * Stock represents a warehouse/depot where the product is being stored. The stock always keeps a specific
 * amount of the product.
 */
export type StockAttributesArgs = {
  locale?: InputMaybe<CatalogLocale>;
};

/**
 * Associated data carry additional data entries that are never used for filtering / sorting but may be needed to be fetched
 * along with entity in order to present data to the target consumer (i.e. user / API / bot). Associated data may be stored
 * in slower storage and may contain wide range of data types - from small ones (i.e. numbers, strings, dates) up to large
 * binary arrays representing entire files (i.e. pictures, documents).
 *
 */
export type StockAssociatedData = {
  __typename?: 'StockAssociatedData';
  /**
   * Contains a structure that keeps all currently active URLs for different locales. This information is used
   * for rendering language switching menu. We need to use correct active URL so that user stays looking
   * the exact same entity after the locale switch occurred - just in different language.
   */
  allActiveUrls?: Maybe<Scalars['ComplexDataObject']['output']>;
  /** A structure that allows to specify a set of localized labels for entity. */
  localization?: Maybe<Scalars['ComplexDataObject']['output']>;
};

/**
 * Attributes allows defining set of data that are fetched in bulk along with the entity body.
 * Attributes may be used for fast filtering or can be used to sort along.
 *
 */
export type StockAttributes = {
  __typename?: 'StockAttributes';
  /**
   * Date and time of the last change of this entity. This timestamp is updated only when real change
   * in entity occurs in primary data store.  This timestamp should be used on boundaries with external
   * systems (such as inventory feeds and so on).
   */
  changed: Scalars['OffsetDateTime']['output'];
  /**
   * Unique code that identifies the entity among other entities of the same kind.
   * The code is equivalent to primary key but is targeted on external consumers (systems).
   */
  code: Scalars['String']['output'];
  /** Full description of the entity in HTML format. */
  description?: Maybe<Scalars['String']['output']>;
  /** Shortened version of description of the entity in plain text. */
  descriptionShort?: Maybe<Scalars['String']['output']>;
  /** Localized name of the entity. */
  name: Scalars['String']['output'];
  /**
   * Order of the entity among other entities sharing the same parent in the listing. Used for sorting entities
   * in ascending order.
   */
  order: Scalars['Predecessor']['output'];
  /**
   * Date and time when this entity was last published in the evitaDB index. This timestamp will usually
   * be different from the `changed` attribute because the publishing process asynchronously picks up
   * changed entities and publishes them to the evitaDB index with some delay. Also, when evitaDB is
   * completely re-indexed, all timestamps in this attribute will be reset to a new timestamp, while the
   * `changed` attribute will remain the same.
   *
   */
  published: Scalars['OffsetDateTime']['output'];
  /**
   * Returns the status of the entity:
   *
   * - ACTIVE: entity is available on frontend
   * - PRIVATE: entity is  not available on frontend, but it's visible in administration
   */
  status: Scalars['String']['output'];
  /** Localized and globally unique URL of the entity. */
  url?: Maybe<Scalars['String']['output']>;
  /**
   * Old URLs that has been originally assigned to the entity, but are no longer active. Each value that was
   * once `url` but was changed to something else is moved to this list. Thi allows accessing the entity even
   * on the previous location (with redirect) so that remembered URLs in external systems don't end up with
   * "entity not found" response.
   */
  urlInactive?: Maybe<Array<Scalars['String']['output']>>;
  /**
   * Date time range of general accessibility to the entity. Outside this range the entity behaves like if
   * the status was set to PRIVATE.
   */
  validity?: Maybe<Scalars['DateTimeRange']['output']>;
  /**
   * Returns the visibility state of the entity:
   * 	- VISIBLE: entity is visible in signposts, searchable, accessible on detail page
   * 	- INVISIBLE: the entity is only available on a specific detail page (with URL knowledge),
   * 		is not searchable and is not present in listings
   */
  visibility: Scalars['String']['output'];
};

/**
 * Map of requested extra results besides actual found records.
 *
 */
export type StockExtraResults = {
  __typename?: 'StockExtraResults';
  attributeHistograms?: Maybe<Array<AttributeNamedHistogram>>;
  /**
   * Returns object containing detailed information about query processing time and its decomposition to single operations.
   *
   */
  queryTelemetry: Scalars['Object']['output'];
};


/**
 * Map of requested extra results besides actual found records.
 *
 */
export type StockExtraResultsAttributeHistogramsArgs = {
  attributes: Array<Scalars['String']['input']>;
};


/**
 * Map of requested extra results besides actual found records.
 *
 */
export type StockExtraResultsQueryTelemetryArgs = {
  formatted?: InputMaybe<Scalars['Boolean']['input']>;
};

/**
 * Contains all possible local mutations to perform on entity `Stock`.
 *
 */
export type StockLocalMutationAggregate = {
  /**
   * Increments or decrements existing numeric value by specified delta (negative number produces decremental of
   * existing number, positive one incrementation).
   *
   * Allows to specify the number range that is tolerated for the value after delta application has been finished to
   * verify for example that number of items on stock doesn't go below zero.
   *
   */
  applyDeltaAttributeMutation?: InputMaybe<ApplyDeltaAttributeMutation>;
  /**
   * Remove associated data mutation will drop existing associatedData - ie.generates new version of the associated data with tombstone
   * on it.
   *
   */
  removeAssociatedDataMutation?: InputMaybe<RemoveAssociatedDataMutation>;
  /**
   * Remove attribute mutation will drop existing attribute - ie.generates new version of the attribute with tombstone
   * on it.
   *
   */
  removeAttributeMutation?: InputMaybe<RemoveAttributeMutation>;
  /**
   * Upsert associatedData mutation will either update existing associatedData or create new one.
   *
   */
  upsertAssociatedDataMutation?: InputMaybe<UpsertAssociatedDataMutation>;
  /**
   * Upsert attribute mutation will either update existing attribute or create new one.
   *
   */
  upsertAttributeMutation?: InputMaybe<UpsertAttributeMutation>;
};

/**
 * Page of records according to pagination rules in input query.
 *
 */
export type StockRecordPage = {
  __typename?: 'StockRecordPage';
  /**
   * Actual found sorted page/strip of records.
   *
   */
  data: Array<Stock>;
  /**
   * Returns true if there are no data available.
   *
   */
  empty: Scalars['Boolean']['output'];
  /**
   * Returns true if current page/strip is the first page/strip in the result set.
   *
   */
  first: Scalars['Boolean']['output'];
  /**
   * Returns offset of the first record of current page with current pageSize.
   *
   */
  firstPageItemNumber: Scalars['Int']['output'];
  /**
   * Returns true if there is next page/strip available.
   *
   */
  hasNext: Scalars['Boolean']['output'];
  /**
   * Returns true if there is previous page/strip available.
   *
   */
  hasPrevious: Scalars['Boolean']['output'];
  /**
   * Returns true if current page/strip is the last page/strip in the result set.
   *
   */
  last: Scalars['Boolean']['output'];
  /**
   * Returns offset of the last record of current page with current pageSize.
   *
   */
  lastPageItemNumber: Scalars['Int']['output'];
  /**
   * Returns number of the last page that can be accessed with current number of records.
   * Returns -1 when offset/limit was used for creating paginated list.
   *
   */
  lastPageNumber: Scalars['Int']['output'];
  /**
   * Returns current page number (indexed from 1).
   *
   */
  pageNumber: Scalars['Int']['output'];
  /**
   * Returns number of records per single page.
   *
   */
  pageSize: Scalars['Int']['output'];
  /**
   * Returns true if there is only single page/strip available (i.e. total record count < record count on one page).
   *
   */
  singlePage: Scalars['Boolean']['output'];
  /**
   * Returns total number of records that are possible to fetch by paginating entire result stream.
   *
   */
  totalRecordCount: Scalars['Int']['output'];
};

/**
 * Strip of records according to offset and limit rules in input query.
 *
 */
export type StockRecordStrip = {
  __typename?: 'StockRecordStrip';
  /**
   * Actual found sorted page/strip of records.
   *
   */
  data: Array<Stock>;
  /**
   * Returns true if there are no data available.
   *
   */
  empty: Scalars['Boolean']['output'];
  /**
   * Returns true if current page/strip is the first page/strip in the result set.
   *
   */
  first: Scalars['Boolean']['output'];
  /**
   * Returns true if there is next page/strip available.
   *
   */
  hasNext: Scalars['Boolean']['output'];
  /**
   * Returns true if there is previous page/strip available.
   *
   */
  hasPrevious: Scalars['Boolean']['output'];
  /**
   * Returns true if current page/strip is the last page/strip in the result set.
   *
   */
  last: Scalars['Boolean']['output'];
  /**
   * Returns limit - i.e. maximal number of records that are requested after offset.
   *
   */
  limit: Scalars['Int']['output'];
  /**
   * Returns current offset (indexed from 0).
   *
   */
  offset: Scalars['Int']['output'];
  /**
   * Returns true if there is only single page/strip available (i.e. total record count < record count on one page).
   *
   */
  singlePage: Scalars['Boolean']['output'];
  /**
   * Returns total number of records that are possible to fetch by paginating entire result stream.
   *
   */
  totalRecordCount: Scalars['Int']['output'];
};

/**
 * Evita response contains all results to single query. Results are divided to two parts - main results returned by
 * `recordPage`/`recordStrip` and set of extra results retrieved by `extraResults`.
 *
 */
export type StockResponse = {
  __typename?: 'StockResponse';
  /**
   * Returns map of requested extra results besides actual found records.
   *
   */
  extraResults: StockExtraResults;
  /**
   * Returns page of records according to pagination rules in input query.
   * Either `page` or `strip` can be used, not both.
   *
   */
  recordPage?: Maybe<StockRecordPage>;
  /**
   * Returns strip of records according to pagination rules in input query.
   * Either `page` or `strip` can be used, not both.
   *
   */
  recordStrip?: Maybe<StockRecordStrip>;
};


/**
 * Evita response contains all results to single query. Results are divided to two parts - main results returned by
 * `recordPage`/`recordStrip` and set of extra results retrieved by `extraResults`.
 *
 */
export type StockResponseRecordPageArgs = {
  number?: InputMaybe<Scalars['Int']['input']>;
  size?: InputMaybe<Scalars['Int']['input']>;
};


/**
 * Evita response contains all results to single query. Results are divided to two parts - main results returned by
 * `recordPage`/`recordStrip` and set of extra results retrieved by `extraResults`.
 *
 */
export type StockResponseRecordStripArgs = {
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
};

/** Tag is equivalent to `EdeeTag` that is published to evitaDB. */
export type Tag = Entity & {
  __typename?: 'Tag';
  /**
   * Contains set of all locales that were used for localized attributes or associated data of
   * this particular entity.
   *
   */
  allLocales: Array<CatalogLocale>;
  /**
   * Associated data carry additional data entries that are never used for filtering / sorting but may be needed to be fetched
   * along with entity in order to present data to the target consumer (i.e. user / API / bot). Associated data may be stored
   * in slower storage and may contain wide range of data types - from small ones (i.e. numbers, strings, dates) up to large
   * binary arrays representing entire files (i.e. pictures, documents).
   *
   */
  associatedData?: Maybe<TagAssociatedData>;
  /**
   * Attributes allows defining set of data that are fetched in bulk along with the reference.
   * Attributes may be used for fast filtering or can be used to sort along.
   *
   */
  attributes?: Maybe<TagAttributes>;
  /** Tag category is a group aggregating similar Edee tags together in a logical fashion. */
  categories: Array<TagCategoriesReference>;
  /**
   * Contains set of requested locales for this particular entity.
   *
   */
  locales: Array<CatalogLocale>;
  /**
   * Unique Integer positive number representing the entity. Can be used for fast lookup for
   * entity (entities). Primary key must be unique within the same entity type.
   *
   */
  primaryKey: Scalars['Int']['output'];
  /**
   * Type of entity.
   * Entity type is main sharding key - all data of entities with same type are stored in separated collections. Within the
   * entity type entity is uniquely represented by primary key.
   *
   */
  type: Scalars['String']['output'];
  /**
   * Contains version of this definition object and gets increased with any entity type update. Allows to execute
   * optimistic locking i.e. avoiding parallel modifications.
   *
   */
  version: Scalars['Int']['output'];
};


/** Tag is equivalent to `EdeeTag` that is published to evitaDB. */
export type TagAssociatedDataArgs = {
  locale?: InputMaybe<CatalogLocale>;
};


/** Tag is equivalent to `EdeeTag` that is published to evitaDB. */
export type TagAttributesArgs = {
  locale?: InputMaybe<CatalogLocale>;
};


/** Tag is equivalent to `EdeeTag` that is published to evitaDB. */
export type TagCategoriesArgs = {
  filterBy?: InputMaybe<FilterContainer21fbcdb63b6665fb>;
  orderBy?: InputMaybe<Array<OrderContainera6e9ec426f250857>>;
};

/**
 * Associated data carry additional data entries that are never used for filtering / sorting but may be needed to be fetched
 * along with entity in order to present data to the target consumer (i.e. user / API / bot). Associated data may be stored
 * in slower storage and may contain wide range of data types - from small ones (i.e. numbers, strings, dates) up to large
 * binary arrays representing entire files (i.e. pictures, documents).
 *
 */
export type TagAssociatedData = {
  __typename?: 'TagAssociatedData';
  /** A structure that allows to specify a set of localized labels for entity. */
  localization?: Maybe<Scalars['ComplexDataObject']['output']>;
};

/**
 * Attributes allows defining set of data that are fetched in bulk along with the entity body.
 * Attributes may be used for fast filtering or can be used to sort along.
 *
 */
export type TagAttributes = {
  __typename?: 'TagAttributes';
  /**
   * Date and time of the last change of this entity. This timestamp is updated only when real change
   * in entity occurs in primary data store.  This timestamp should be used on boundaries with external
   * systems (such as inventory feeds and so on).
   */
  changed: Scalars['OffsetDateTime']['output'];
  /**
   * Unique code that identifies the entity among other entities of the same kind.
   * The code is equivalent to primary key but is targeted on external consumers (systems).
   */
  code: Scalars['String']['output'];
  /** Full description of the entity in HTML format. */
  description?: Maybe<Scalars['String']['output']>;
  /** Shortened version of description of the entity in plain text. */
  descriptionShort?: Maybe<Scalars['String']['output']>;
  /** Contains true if tag should be displayed as a part of the product detail page. */
  isVisibleInDetail: Scalars['Boolean']['output'];
  /** Contains true if tag should be displayed as a part of the product filter. */
  isVisibleInFilter: Scalars['Boolean']['output'];
  /** Contains true if tag should be displayed as a part of the product listings. */
  isVisibleInListing: Scalars['Boolean']['output'];
  /** Localized name of the entity. */
  name: Scalars['String']['output'];
  /**
   * Date and time when this entity was last published in the evitaDB index. This timestamp will usually
   * be different from the `changed` attribute because the publishing process asynchronously picks up
   * changed entities and publishes them to the evitaDB index with some delay. Also, when evitaDB is
   * completely re-indexed, all timestamps in this attribute will be reset to a new timestamp, while the
   * `changed` attribute will remain the same.
   *
   */
  published: Scalars['OffsetDateTime']['output'];
  /**
   * Returns the status of the entity:
   *
   * - ACTIVE: entity is available on frontend
   * - PRIVATE: entity is  not available on frontend, but it's visible in administration
   */
  status: Scalars['String']['output'];
};

/**
 * Attributes allows defining set of data that are fetched in bulk along with the entity body.
 * Attributes may be used for fast filtering or can be used to sort along.
 *
 */
export type TagCategoriesAttributes = {
  __typename?: 'TagCategoriesAttributes';
  /** Localized name of the Edee tag category. */
  name: Scalars['String']['output'];
};

/** Tag category is a group aggregating similar Edee tags together in a logical fashion. */
export type TagCategoriesReference = {
  __typename?: 'TagCategoriesReference';
  /**
   * Attributes allows defining set of data that are fetched in bulk along with the reference.
   * Attributes may be used for fast filtering or can be used to sort along.
   *
   */
  attributes?: Maybe<TagCategoriesAttributes>;
  /**
   * Returns body of the referenced entity in case its fetching was requested via entity_fetch constraint.
   *
   */
  referencedEntity?: Maybe<EntityReference>;
  /**
   *          Returns primary key of the referenced (internal or external) entity.
   *
   */
  referencedPrimaryKey: Scalars['Int']['output'];
};

/**
 * Map of requested extra results besides actual found records.
 *
 */
export type TagExtraResults = {
  __typename?: 'TagExtraResults';
  attributeHistograms?: Maybe<Array<AttributeNamedHistogram>>;
  /**
   * Returns object containing detailed information about query processing time and its decomposition to single operations.
   *
   */
  queryTelemetry: Scalars['Object']['output'];
};


/**
 * Map of requested extra results besides actual found records.
 *
 */
export type TagExtraResultsAttributeHistogramsArgs = {
  attributes: Array<Scalars['String']['input']>;
};


/**
 * Map of requested extra results besides actual found records.
 *
 */
export type TagExtraResultsQueryTelemetryArgs = {
  formatted?: InputMaybe<Scalars['Boolean']['input']>;
};

/**
 * Contains all possible local mutations to perform on entity `Tag`.
 *
 */
export type TagLocalMutationAggregate = {
  /**
   * Increments or decrements existing numeric value by specified delta (negative number produces decremental of
   * existing number, positive one incrementation).
   *
   * Allows to specify the number range that is tolerated for the value after delta application has been finished to
   * verify for example that number of items on stock doesn't go below zero.
   *
   */
  applyDeltaAttributeMutation?: InputMaybe<ApplyDeltaAttributeMutation>;
  /**
   * This mutation allows to create a reference in the entity.
   *
   */
  insertReferenceMutation?: InputMaybe<InsertReferenceMutation>;
  /**
   * This mutation allows to create / update / remove attribute of the reference.
   *
   */
  referenceAttributeMutation?: InputMaybe<ReferenceAttributeMutation>;
  /**
   * Remove associated data mutation will drop existing associatedData - ie.generates new version of the associated data with tombstone
   * on it.
   *
   */
  removeAssociatedDataMutation?: InputMaybe<RemoveAssociatedDataMutation>;
  /**
   * Remove attribute mutation will drop existing attribute - ie.generates new version of the attribute with tombstone
   * on it.
   *
   */
  removeAttributeMutation?: InputMaybe<RemoveAttributeMutation>;
  /**
   * This mutation allows to remove `parent` from the `entity`.
   *
   */
  removeParentMutation?: InputMaybe<Scalars['Boolean']['input']>;
  /**
   * This mutation allows to remove existing `price` of the entity.
   *
   */
  removePriceMutation?: InputMaybe<RemovePriceMutation>;
  /**
   * This mutation allows to remove group in the reference.
   *
   */
  removeReferenceGroupMutation?: InputMaybe<RemoveReferenceGroupMutation>;
  /**
   * This mutation allows to remove a reference from the entity.
   *
   */
  removeReferenceMutation?: InputMaybe<RemoveReferenceMutation>;
  /**
   * This mutation allows to set `parent` in the `entity`.
   *
   */
  setParentMutation?: InputMaybe<SetParentMutation>;
  /**
   * This mutation allows to set / remove `priceInnerRecordHandling` behaviour of the entity.
   *
   */
  setPriceInnerRecordHandlingMutation?: InputMaybe<SetPriceInnerRecordHandlingMutation>;
  /**
   * This mutation allows to create / update group of the reference.
   *
   */
  setReferenceGroupMutation?: InputMaybe<SetReferenceGroupMutation>;
  /**
   * Upsert associatedData mutation will either update existing associatedData or create new one.
   *
   */
  upsertAssociatedDataMutation?: InputMaybe<UpsertAssociatedDataMutation>;
  /**
   * Upsert attribute mutation will either update existing attribute or create new one.
   *
   */
  upsertAttributeMutation?: InputMaybe<UpsertAttributeMutation>;
  /**
   * This mutation allows to create / update `price` of the entity.
   *
   */
  upsertPriceMutation?: InputMaybe<UpsertPriceMutation>;
};

/**
 * Page of records according to pagination rules in input query.
 *
 */
export type TagRecordPage = {
  __typename?: 'TagRecordPage';
  /**
   * Actual found sorted page/strip of records.
   *
   */
  data: Array<Tag>;
  /**
   * Returns true if there are no data available.
   *
   */
  empty: Scalars['Boolean']['output'];
  /**
   * Returns true if current page/strip is the first page/strip in the result set.
   *
   */
  first: Scalars['Boolean']['output'];
  /**
   * Returns offset of the first record of current page with current pageSize.
   *
   */
  firstPageItemNumber: Scalars['Int']['output'];
  /**
   * Returns true if there is next page/strip available.
   *
   */
  hasNext: Scalars['Boolean']['output'];
  /**
   * Returns true if there is previous page/strip available.
   *
   */
  hasPrevious: Scalars['Boolean']['output'];
  /**
   * Returns true if current page/strip is the last page/strip in the result set.
   *
   */
  last: Scalars['Boolean']['output'];
  /**
   * Returns offset of the last record of current page with current pageSize.
   *
   */
  lastPageItemNumber: Scalars['Int']['output'];
  /**
   * Returns number of the last page that can be accessed with current number of records.
   * Returns -1 when offset/limit was used for creating paginated list.
   *
   */
  lastPageNumber: Scalars['Int']['output'];
  /**
   * Returns current page number (indexed from 1).
   *
   */
  pageNumber: Scalars['Int']['output'];
  /**
   * Returns number of records per single page.
   *
   */
  pageSize: Scalars['Int']['output'];
  /**
   * Returns true if there is only single page/strip available (i.e. total record count < record count on one page).
   *
   */
  singlePage: Scalars['Boolean']['output'];
  /**
   * Returns total number of records that are possible to fetch by paginating entire result stream.
   *
   */
  totalRecordCount: Scalars['Int']['output'];
};

/**
 * Strip of records according to offset and limit rules in input query.
 *
 */
export type TagRecordStrip = {
  __typename?: 'TagRecordStrip';
  /**
   * Actual found sorted page/strip of records.
   *
   */
  data: Array<Tag>;
  /**
   * Returns true if there are no data available.
   *
   */
  empty: Scalars['Boolean']['output'];
  /**
   * Returns true if current page/strip is the first page/strip in the result set.
   *
   */
  first: Scalars['Boolean']['output'];
  /**
   * Returns true if there is next page/strip available.
   *
   */
  hasNext: Scalars['Boolean']['output'];
  /**
   * Returns true if there is previous page/strip available.
   *
   */
  hasPrevious: Scalars['Boolean']['output'];
  /**
   * Returns true if current page/strip is the last page/strip in the result set.
   *
   */
  last: Scalars['Boolean']['output'];
  /**
   * Returns limit - i.e. maximal number of records that are requested after offset.
   *
   */
  limit: Scalars['Int']['output'];
  /**
   * Returns current offset (indexed from 0).
   *
   */
  offset: Scalars['Int']['output'];
  /**
   * Returns true if there is only single page/strip available (i.e. total record count < record count on one page).
   *
   */
  singlePage: Scalars['Boolean']['output'];
  /**
   * Returns total number of records that are possible to fetch by paginating entire result stream.
   *
   */
  totalRecordCount: Scalars['Int']['output'];
};

/**
 * Evita response contains all results to single query. Results are divided to two parts - main results returned by
 * `recordPage`/`recordStrip` and set of extra results retrieved by `extraResults`.
 *
 */
export type TagResponse = {
  __typename?: 'TagResponse';
  /**
   * Returns map of requested extra results besides actual found records.
   *
   */
  extraResults: TagExtraResults;
  /**
   * Returns page of records according to pagination rules in input query.
   * Either `page` or `strip` can be used, not both.
   *
   */
  recordPage?: Maybe<TagRecordPage>;
  /**
   * Returns strip of records according to pagination rules in input query.
   * Either `page` or `strip` can be used, not both.
   *
   */
  recordStrip?: Maybe<TagRecordStrip>;
};


/**
 * Evita response contains all results to single query. Results are divided to two parts - main results returned by
 * `recordPage`/`recordStrip` and set of extra results retrieved by `extraResults`.
 *
 */
export type TagResponseRecordPageArgs = {
  number?: InputMaybe<Scalars['Int']['input']>;
  size?: InputMaybe<Scalars['Int']['input']>;
};


/**
 * Evita response contains all results to single query. Results are divided to two parts - main results returned by
 * `recordPage`/`recordStrip` and set of extra results retrieved by `extraResults`.
 *
 */
export type TagResponseRecordStripArgs = {
  limit?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
};

/**
 * Upsert associatedData mutation will either update existing associatedData or create new one.
 *
 */
export type UpsertAssociatedDataMutation = {
  /**
   * Contains locale in case the associatedData is locale specific.
   *
   */
  locale?: InputMaybe<Scalars['Locale']['input']>;
  /**
   * Unique name of the associatedData. Case-sensitive. Distinguishes one associated data item from another within
   * single entity instance.
   *
   */
  name: Scalars['String']['input'];
  /**
   * New value of this associated data. Data type is expected to be the same as in schema or must be explicitly
   * set via `valueType`.
   *
   */
  value: Scalars['Any']['input'];
  /**
   * Data type of passed value of this associated data. Required only when inserting new associated data
   * without prior schema. Otherwise data type is found in schema.
   *
   */
  valueType?: InputMaybe<AssociatedDataScalar>;
};

/**
 * Upsert attribute mutation will either update existing attribute or create new one.
 *
 */
export type UpsertAttributeMutation = {
  /**
   * Contains locale in case the attribute is locale specific.
   *
   */
  locale?: InputMaybe<Scalars['Locale']['input']>;
  /**
   * Unique name of the attribute. Case-sensitive. Distinguishes one associated data item from another within
   * single entity instance.
   *
   */
  name: Scalars['String']['input'];
  /**
   * New value of this attribute. Data type is expected to be the same as in schema or must be explicitly
   * set via `valueType`.
   *
   */
  value: Scalars['Any']['input'];
  /**
   * Data type of passed value of this attribute. Required only when inserting new attribute
   * without prior schema. Otherwise data type is found in schema.
   *
   */
  valueType?: InputMaybe<Scalar>;
};

/**
 * This mutation allows to create / update `price` of the entity.
 *
 */
export type UpsertPriceMutation = {
  /**
   * Identification of the currency. Three-letter form according to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
   *
   */
  currency: Scalars['Currency']['input'];
  /**
   * Some special products (such as master products, or product sets) may contain prices of all "subordinate" products
   * so that the aggregating product can represent them in certain views on the product. In that case there is need
   * to distinguish the projected prices of the subordinate product in the one that represents them.
   *
   * Inner record id must contain positive value.
   *
   */
  innerRecordId?: InputMaybe<Scalars['Int']['input']>;
  /**
   * Contains identification of the price in the external systems. This id is expected to be used for the synchronization
   * of the price in relation with the primary source of the prices.
   *
   * This id is used to uniquely find a price within same price list and currency and is mandatory.
   *
   */
  priceId: Scalars['Int']['input'];
  /**
   * Contains identification of the price list in the external system. Each price must reference a price list. Price list
   * identification may refer to another Evita entity or may contain any external price list identification
   * (for example id or unique name of the price list in the external system).
   *
   * Single entity is expected to have single price for the price list unless there is `validity` specified.
   * In other words there is no sense to have multiple concurrently valid prices for the same entity that have roots
   * in the same price list.
   *
   */
  priceList: Scalars['String']['input'];
  /**
   * Price with tax.
   *
   */
  priceWithTax: Scalars['BigDecimal']['input'];
  /**
   * Price without tax.
   *
   */
  priceWithoutTax: Scalars['BigDecimal']['input'];
  /**
   * Controls whether price is subject to filtering / sorting logic, non-sellable prices will be fetched along with
   * entity but won't be considered when evaluating search query. These prices may be
   * used for "informational" prices such as reference price (the crossed out price often found on e-commerce sites
   * as "usual price") but are not considered as the "selling" price.
   *
   */
  sellable: Scalars['Boolean']['input'];
  /**
   * Tax rate percentage (i.e. for 19% it'll be 19.00)
   *
   */
  taxRate: Scalars['BigDecimal']['input'];
  /**
   * Date and time interval for which the price is valid (inclusive).
   *
   */
  validity?: InputMaybe<Scalars['DateTimeRange']['input']>;
};

export type WrapperObject2f8608dc42f6dd47 = {
  ofParent: FilterContainerf812d9f8dc0269a4;
  with?: InputMaybe<FilterContainer84ed5a3faed889d8>;
};

export type WrapperObject3dbf5375c415e46e = {
  filterBy?: InputMaybe<FilterContainerf812d9f8dc0269a4>;
};

export type WrapperObject3f6a23223ec95d81 = {
  filterBy?: InputMaybe<FilterContainer967c71ead6465215>;
};

export type WrapperObject5dcae8f8f4fda156 = {
  filterBy: FilterContainerf812d9f8dc0269a4;
};

export type WrapperObject9f96d343afba626d = {
  filterBy: FilterContainerf812d9f8dc0269a4;
};

export type WrapperObject24b50475c5a18ef3 = {
  filterBy?: InputMaybe<FilterContainer517d1d8ea5c4e742>;
};

export type WrapperObject28df12ad5ac5d051 = {
  filterBy?: InputMaybe<FilterContainer9151b3bab054ab55>;
};

export type WrapperObject30a6db7b4f47e794 = {
  filterBy?: InputMaybe<FilterContainer967c71ead6465215>;
};

export type WrapperObject133aa9b62145d97c = {
  filterBy?: InputMaybe<FilterContainer967c71ead6465215>;
};

export type WrapperObject504f6fde83fe3a5f = {
  filterBy?: InputMaybe<FilterContainer967c71ead6465215>;
};

export type WrapperObject833e49fd2eea6dc0 = {
  filterBy: FilterContainerf812d9f8dc0269a4;
};

export type WrapperObject956b09fee466ca8e = {
  filterBy?: InputMaybe<FilterContainer744027555f798cbb>;
};

export type WrapperObject4308c2836b7bc5fd = {
  filterBy?: InputMaybe<FilterContainer517d1d8ea5c4e742>;
};

export type WrapperObject8858f0859ede58d1 = {
  filterBy?: InputMaybe<FilterContainerc183dce568fe08c7>;
};

export type WrapperObject9011b120aeeb54fb = {
  filterBy?: InputMaybe<FilterContainer9151b3bab054ab55>;
};

export type WrapperObject9516b67b2fd8a21d = {
  filterBy: FilterContainerf812d9f8dc0269a4;
};

export type WrapperObject53785cc10d0a33f0 = {
  ofParent: FilterContainerf812d9f8dc0269a4;
  with?: InputMaybe<FilterContainerd1470c746341886a>;
};

export type WrapperObject499978623b8a3d26 = {
  ofParent: FilterContainerf812d9f8dc0269a4;
  with?: InputMaybe<FilterContainer206bcd749d60c71d>;
};

export type WrapperObject810097294cc37dc2 = {
  filterBy?: InputMaybe<FilterContainerc183dce568fe08c7>;
};

export type WrapperObjectae82c6317277b833 = {
  ofParent: FilterContainerf812d9f8dc0269a4;
  with?: InputMaybe<FilterContainer80acaa2de31d0173>;
};

export type WrapperObjectbc3011f23f9af40f = {
  filterBy?: InputMaybe<FilterContainer9151b3bab054ab55>;
};

export type WrapperObjectbf103f9d282b9df3 = {
  filterBy?: InputMaybe<FilterContainer967c71ead6465215>;
};

export type WrapperObjecte963f349a8f01837 = {
  filterBy?: InputMaybe<FilterContainer967c71ead6465215>;
};

export type WrapperObjectf3278a69a95ebbb6 = {
  filterBy?: InputMaybe<FilterContainer11895e8d40db8091>;
};

export type WrapperObjectfa27519a6f1a1ca3 = {
  filterBy?: InputMaybe<FilterContainer744027555f798cbb>;
};

export type WrapperObjectff6212302bee7196 = {
  filterBy?: InputMaybe<FilterContainerf812d9f8dc0269a4>;
};

export type GetBrandsQueryVariables = Exact<{
  categoryId?: InputMaybe<Array<Scalars['Int']['input']> | Scalars['Int']['input']>;
}>;


export type GetBrandsQuery = { __typename?: 'Query', queryProduct: { __typename?: 'ProductResponse', extraResults: { __typename?: 'ProductExtraResults', facetSummary?: { __typename?: 'ProductFacetSummary', brand?: { __typename?: 'ProductBrandFacetGroupStatistics', count: number, facetStatistics: Array<{ __typename?: 'ProductBrandFacetStatistics', facetEntity?: { __typename?: 'Brand', primaryKey: number, attributes?: { __typename?: 'BrandAttributes', name: string } | null } | null }> } | null } | null } } };

export type GetParametrsQueryVariables = Exact<{
  categoryId?: InputMaybe<Array<Scalars['Int']['input']> | Scalars['Int']['input']>;
}>;


export type GetParametrsQuery = { __typename?: 'Query', queryProduct: { __typename?: 'ProductResponse', extraResults: { __typename?: 'ProductExtraResults', facetSummary?: { __typename?: 'ProductFacetSummary', parameterValues?: Array<{ __typename?: 'ProductParameterValuesFacetGroupStatistics', count: number, groupEntity?: { __typename?: 'Parameter', primaryKey: number, attributes?: { __typename?: 'ParameterAttributes', code: string, name: string } | null } | null, facetStatistics: Array<{ __typename?: 'ProductParameterValuesFacetStatistics', requested: boolean, impact?: { __typename?: 'FacetRequestImpact', difference: number, hasSense: boolean, matchCount: number } | null, facetEntity?: { __typename?: 'ParameterValue', primaryKey: number, attributes?: { __typename?: 'ParameterValueAttributes', code: string, name: string } | null } | null }> }> | null } | null } } };

export type GetCategoryQueryVariables = Exact<{
  categoryId?: InputMaybe<Array<Scalars['Int']['input']> | Scalars['Int']['input']>;
}>;


export type GetCategoryQuery = { __typename?: 'Query', listCategory: Array<{ __typename?: 'Category', parentPrimaryKey?: number | null, primaryKey: number, attributes?: { __typename?: 'CategoryAttributes', name: string } | null }> };

export type ListCategoryQueryVariables = Exact<{ [key: string]: never; }>;


export type ListCategoryQuery = { __typename?: 'Query', listCategory: Array<{ __typename?: 'Category', primaryKey: number, parentPrimaryKey?: number | null, attributes?: { __typename?: 'CategoryAttributes', name: string } | null }> };


export const GetBrandsDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"getBrands"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"categoryId"}},"type":{"kind":"ListType","type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"queryProduct"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"filterBy"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"hierarchyCategoriesWithin"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"ofParent"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"entityPrimaryKeyInSet"},"value":{"kind":"Variable","name":{"kind":"Name","value":"categoryId"}}}]}}]}},{"kind":"ObjectField","name":{"kind":"Name","value":"entityLocaleEquals"},"value":{"kind":"EnumValue","value":"en"}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"extraResults"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"facetSummary"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"brand"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"count"}},{"kind":"Field","name":{"kind":"Name","value":"facetStatistics"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"facetEntity"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"primaryKey"}},{"kind":"Field","name":{"kind":"Name","value":"attributes"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"name"}}]}}]}}]}}]}}]}}]}}]}}]}}]} as unknown as DocumentNode;

/**
 * __useGetBrandsQuery__
 *
 * To run a query within a Vue component, call `useGetBrandsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetBrandsQuery` returns an object from Apollo Client that contains result, loading and error properties
 * you can use to render your UI.
 *
 * @param variables that will be passed into the query
 * @param options that will be passed into the query, supported options are listed on: https://v4.apollo.vuejs.org/guide-composable/query.html#options;
 *
 * @example
 * const { result, loading, error } = useGetBrandsQuery({
 *   categoryId: // value for 'categoryId'
 * });
 */
export function useGetBrandsQuery(variables: GetBrandsQueryVariables | VueCompositionApi.Ref<GetBrandsQueryVariables> | ReactiveFunction<GetBrandsQueryVariables> = {}, options: VueApolloComposable.UseQueryOptions<GetBrandsQuery, GetBrandsQueryVariables> | VueCompositionApi.Ref<VueApolloComposable.UseQueryOptions<GetBrandsQuery, GetBrandsQueryVariables>> | ReactiveFunction<VueApolloComposable.UseQueryOptions<GetBrandsQuery, GetBrandsQueryVariables>> = {}) {
  return VueApolloComposable.useQuery<GetBrandsQuery, GetBrandsQueryVariables>(GetBrandsDocument, variables, options);
}
export function useGetBrandsLazyQuery(variables: GetBrandsQueryVariables | VueCompositionApi.Ref<GetBrandsQueryVariables> | ReactiveFunction<GetBrandsQueryVariables> = {}, options: VueApolloComposable.UseQueryOptions<GetBrandsQuery, GetBrandsQueryVariables> | VueCompositionApi.Ref<VueApolloComposable.UseQueryOptions<GetBrandsQuery, GetBrandsQueryVariables>> | ReactiveFunction<VueApolloComposable.UseQueryOptions<GetBrandsQuery, GetBrandsQueryVariables>> = {}) {
  return VueApolloComposable.useLazyQuery<GetBrandsQuery, GetBrandsQueryVariables>(GetBrandsDocument, variables, options);
}
export type GetBrandsQueryCompositionFunctionResult = VueApolloComposable.UseQueryReturn<GetBrandsQuery, GetBrandsQueryVariables>;
export const GetParametrsDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"getParametrs"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"categoryId"}},"type":{"kind":"ListType","type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"queryProduct"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"filterBy"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"hierarchyCategoriesWithin"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"ofParent"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"entityPrimaryKeyInSet"},"value":{"kind":"Variable","name":{"kind":"Name","value":"categoryId"}}}]}}]}},{"kind":"ObjectField","name":{"kind":"Name","value":"entityLocaleEquals"},"value":{"kind":"EnumValue","value":"en"}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"extraResults"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"facetSummary"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"parameterValues"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"count"}},{"kind":"Field","name":{"kind":"Name","value":"groupEntity"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"primaryKey"}},{"kind":"Field","name":{"kind":"Name","value":"attributes"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"code"}},{"kind":"Field","name":{"kind":"Name","value":"name"}}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"facetStatistics"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"requested"}},{"kind":"Field","name":{"kind":"Name","value":"impact"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"difference"}},{"kind":"Field","name":{"kind":"Name","value":"hasSense"}},{"kind":"Field","name":{"kind":"Name","value":"matchCount"}}]}},{"kind":"Field","name":{"kind":"Name","value":"facetEntity"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"primaryKey"}},{"kind":"Field","name":{"kind":"Name","value":"attributes"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"code"}},{"kind":"Field","name":{"kind":"Name","value":"name"}}]}}]}}]}}]}}]}}]}}]}}]}}]} as unknown as DocumentNode;

/**
 * __useGetParametrsQuery__
 *
 * To run a query within a Vue component, call `useGetParametrsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetParametrsQuery` returns an object from Apollo Client that contains result, loading and error properties
 * you can use to render your UI.
 *
 * @param variables that will be passed into the query
 * @param options that will be passed into the query, supported options are listed on: https://v4.apollo.vuejs.org/guide-composable/query.html#options;
 *
 * @example
 * const { result, loading, error } = useGetParametrsQuery({
 *   categoryId: // value for 'categoryId'
 * });
 */
export function useGetParametrsQuery(variables: GetParametrsQueryVariables | VueCompositionApi.Ref<GetParametrsQueryVariables> | ReactiveFunction<GetParametrsQueryVariables> = {}, options: VueApolloComposable.UseQueryOptions<GetParametrsQuery, GetParametrsQueryVariables> | VueCompositionApi.Ref<VueApolloComposable.UseQueryOptions<GetParametrsQuery, GetParametrsQueryVariables>> | ReactiveFunction<VueApolloComposable.UseQueryOptions<GetParametrsQuery, GetParametrsQueryVariables>> = {}) {
  return VueApolloComposable.useQuery<GetParametrsQuery, GetParametrsQueryVariables>(GetParametrsDocument, variables, options);
}
export function useGetParametrsLazyQuery(variables: GetParametrsQueryVariables | VueCompositionApi.Ref<GetParametrsQueryVariables> | ReactiveFunction<GetParametrsQueryVariables> = {}, options: VueApolloComposable.UseQueryOptions<GetParametrsQuery, GetParametrsQueryVariables> | VueCompositionApi.Ref<VueApolloComposable.UseQueryOptions<GetParametrsQuery, GetParametrsQueryVariables>> | ReactiveFunction<VueApolloComposable.UseQueryOptions<GetParametrsQuery, GetParametrsQueryVariables>> = {}) {
  return VueApolloComposable.useLazyQuery<GetParametrsQuery, GetParametrsQueryVariables>(GetParametrsDocument, variables, options);
}
export type GetParametrsQueryCompositionFunctionResult = VueApolloComposable.UseQueryReturn<GetParametrsQuery, GetParametrsQueryVariables>;
export const GetCategoryDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"getCategory"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"categoryId"}},"type":{"kind":"ListType","type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"listCategory"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"filterBy"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"hierarchyWithinSelf"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"ofParent"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"entityPrimaryKeyInSet"},"value":{"kind":"Variable","name":{"kind":"Name","value":"categoryId"}}}]}},{"kind":"ObjectField","name":{"kind":"Name","value":"with"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"excludingRoot"},"value":{"kind":"BooleanValue","value":true}}]}}]}},{"kind":"ObjectField","name":{"kind":"Name","value":"entityLocaleEquals"},"value":{"kind":"EnumValue","value":"en"}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"parentPrimaryKey"}},{"kind":"Field","name":{"kind":"Name","value":"primaryKey"}},{"kind":"Field","name":{"kind":"Name","value":"attributes"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"name"}}]}}]}}]}}]} as unknown as DocumentNode;

/**
 * __useGetCategoryQuery__
 *
 * To run a query within a Vue component, call `useGetCategoryQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetCategoryQuery` returns an object from Apollo Client that contains result, loading and error properties
 * you can use to render your UI.
 *
 * @param variables that will be passed into the query
 * @param options that will be passed into the query, supported options are listed on: https://v4.apollo.vuejs.org/guide-composable/query.html#options;
 *
 * @example
 * const { result, loading, error } = useGetCategoryQuery({
 *   categoryId: // value for 'categoryId'
 * });
 */
export function useGetCategoryQuery(variables: GetCategoryQueryVariables | VueCompositionApi.Ref<GetCategoryQueryVariables> | ReactiveFunction<GetCategoryQueryVariables> = {}, options: VueApolloComposable.UseQueryOptions<GetCategoryQuery, GetCategoryQueryVariables> | VueCompositionApi.Ref<VueApolloComposable.UseQueryOptions<GetCategoryQuery, GetCategoryQueryVariables>> | ReactiveFunction<VueApolloComposable.UseQueryOptions<GetCategoryQuery, GetCategoryQueryVariables>> = {}) {
  return VueApolloComposable.useQuery<GetCategoryQuery, GetCategoryQueryVariables>(GetCategoryDocument, variables, options);
}
export function useGetCategoryLazyQuery(variables: GetCategoryQueryVariables | VueCompositionApi.Ref<GetCategoryQueryVariables> | ReactiveFunction<GetCategoryQueryVariables> = {}, options: VueApolloComposable.UseQueryOptions<GetCategoryQuery, GetCategoryQueryVariables> | VueCompositionApi.Ref<VueApolloComposable.UseQueryOptions<GetCategoryQuery, GetCategoryQueryVariables>> | ReactiveFunction<VueApolloComposable.UseQueryOptions<GetCategoryQuery, GetCategoryQueryVariables>> = {}) {
  return VueApolloComposable.useLazyQuery<GetCategoryQuery, GetCategoryQueryVariables>(GetCategoryDocument, variables, options);
}
export type GetCategoryQueryCompositionFunctionResult = VueApolloComposable.UseQueryReturn<GetCategoryQuery, GetCategoryQueryVariables>;
export const ListCategoryDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"listCategory"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"listCategory"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"filterBy"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"entityLocaleEquals"},"value":{"kind":"EnumValue","value":"en"}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"primaryKey"}},{"kind":"Field","name":{"kind":"Name","value":"parentPrimaryKey"}},{"kind":"Field","name":{"kind":"Name","value":"attributes"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"name"}}]}}]}}]}}]} as unknown as DocumentNode;

/**
 * __useListCategoryQuery__
 *
 * To run a query within a Vue component, call `useListCategoryQuery` and pass it any options that fit your needs.
 * When your component renders, `useListCategoryQuery` returns an object from Apollo Client that contains result, loading and error properties
 * you can use to render your UI.
 *
 * @param options that will be passed into the query, supported options are listed on: https://v4.apollo.vuejs.org/guide-composable/query.html#options;
 *
 * @example
 * const { result, loading, error } = useListCategoryQuery();
 */
export function useListCategoryQuery(options: VueApolloComposable.UseQueryOptions<ListCategoryQuery, ListCategoryQueryVariables> | VueCompositionApi.Ref<VueApolloComposable.UseQueryOptions<ListCategoryQuery, ListCategoryQueryVariables>> | ReactiveFunction<VueApolloComposable.UseQueryOptions<ListCategoryQuery, ListCategoryQueryVariables>> = {}) {
  return VueApolloComposable.useQuery<ListCategoryQuery, ListCategoryQueryVariables>(ListCategoryDocument, {}, options);
}
export function useListCategoryLazyQuery(options: VueApolloComposable.UseQueryOptions<ListCategoryQuery, ListCategoryQueryVariables> | VueCompositionApi.Ref<VueApolloComposable.UseQueryOptions<ListCategoryQuery, ListCategoryQueryVariables>> | ReactiveFunction<VueApolloComposable.UseQueryOptions<ListCategoryQuery, ListCategoryQueryVariables>> = {}) {
  return VueApolloComposable.useLazyQuery<ListCategoryQuery, ListCategoryQueryVariables>(ListCategoryDocument, {}, options);
}
export type ListCategoryQueryCompositionFunctionResult = VueApolloComposable.UseQueryReturn<ListCategoryQuery, ListCategoryQueryVariables>;